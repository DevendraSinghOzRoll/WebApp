Imports Microsoft.VisualBasic
Imports System.Data.SqlClient

Public Class PSPricingDAO

    Function getPSPrice(ByVal intMaterialTypeID As Integer, ByVal intInstallationAreaID As Integer, ByVal intMountMethodID As Integer, ByVal intManufactureLocationID As Integer, ByVal intControlTypeID As Integer, ByVal dteEffectiveDate As Date, ByVal intWidth As Integer, ByVal intBladeSizeID As Integer) As DataTable

        Dim dbConn As New DBConnection
        Dim cnn As SqlConnection = dbConn.getSQLConnection_To_OzRollPlantationScheduling
        Dim cmd As New SqlCommand
        Dim adp As New SqlDataAdapter
        Dim dt As New DataTable

        Try
            cnn.Open()
            cmd.Connection = cnn
            cmd.CommandText = "sp_getPSPrice"
            cmd.CommandType = CommandType.StoredProcedure

            cmd.Parameters.Add("@MaterialTypeID", SqlDbType.Int)
            cmd.Parameters("@MaterialTypeID").Value = intMaterialTypeID

            cmd.Parameters.Add("@InstallationAreaID", SqlDbType.Int)
            cmd.Parameters("@InstallationAreaID").Value = intInstallationAreaID

            cmd.Parameters.Add("@MountMethodID", SqlDbType.Int)
            cmd.Parameters("@MountMethodID").Value = intMountMethodID

            cmd.Parameters.Add("@ManufactureLocationID", SqlDbType.Int)
            cmd.Parameters("@ManufactureLocationID").Value = intManufactureLocationID

            cmd.Parameters.Add("@ControlTypeID", SqlDbType.Int)
            cmd.Parameters("@ControlTypeID").Value = intControlTypeID

            cmd.Parameters.Add("@EffectiveDate", SqlDbType.DateTime)
            cmd.Parameters("@EffectiveDate").Value = dteEffectiveDate

            cmd.Parameters.Add("@Width", SqlDbType.Int)
            cmd.Parameters("@Width").Value = intWidth

            cmd.Parameters.Add("@BladeSizeID", SqlDbType.Int)
            cmd.Parameters("@BladeSizeID").Value = intBladeSizeID


            adp.SelectCommand = cmd
            adp.Fill(dt)

            cnn.Close()

            Return dt
        Catch ex As Exception
            EventLog.addEventLogEmail(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name & ": " & System.Reflection.MethodBase.GetCurrentMethod().Name & " - " & ex.Message & Environment.NewLine)
            Return dt
        Finally
            adp.Dispose()
            adp = Nothing
            cmd.Dispose()
            cmd = Nothing
            cnn.Dispose()
            cnn = Nothing
        End Try

        dbConn = Nothing

    End Function

    Function getPSPriceMount(ByVal intInstallationAreaID As Integer, ByVal intManufactureLocationID As Integer, ByVal intMountMethodID As Integer, ByVal intTrackID As Integer, ByVal dteEffectiveDate As Date, ByVal intSideboards As Integer, ByVal intBottomboards As Integer, ByVal intMaterialTypeID As Integer) As DataTable

        Dim dbConn As New DBConnection
        Dim cnn As SqlConnection = dbConn.getSQLConnection_To_OzRollPlantationScheduling
        Dim cmd As New SqlCommand
        Dim adp As New SqlDataAdapter
        Dim dt As New DataTable

        Try
            cnn.Open()
            cmd.Connection = cnn
            cmd.CommandText = "sp_getPSPriceMount"
            cmd.CommandType = CommandType.StoredProcedure

            cmd.Parameters.Add("@InstallationAreaID", SqlDbType.Int)
            cmd.Parameters("@InstallationAreaID").Value = intInstallationAreaID

            cmd.Parameters.Add("@ManufactureLocationID", SqlDbType.Int)
            cmd.Parameters("@ManufactureLocationID").Value = intManufactureLocationID

            cmd.Parameters.Add("@MountMethodID", SqlDbType.Int)
            cmd.Parameters("@MountMethodID").Value = intMountMethodID

            cmd.Parameters.Add("@TrackID", SqlDbType.Int)
            cmd.Parameters("@TrackID").Value = intTrackID

            cmd.Parameters.Add("@EffectiveDate", SqlDbType.DateTime)
            cmd.Parameters("@EffectiveDate").Value = dteEffectiveDate

            cmd.Parameters.Add("@Sideboards", SqlDbType.Int)
            cmd.Parameters("@Sideboards").Value = intSideboards

            cmd.Parameters.Add("@Bottomboards", SqlDbType.Int)
            cmd.Parameters("@Bottomboards").Value = intBottomboards

            cmd.Parameters.Add("@MaterialTypeID", SqlDbType.Int)
            cmd.Parameters("@MaterialTypeID").Value = intMaterialTypeID

            adp.SelectCommand = cmd
            adp.Fill(dt)

            cnn.Close()

            Return dt
        Catch ex As Exception
            EventLog.addEventLogEmail(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name & ": " & System.Reflection.MethodBase.GetCurrentMethod().Name & " - " & ex.Message & Environment.NewLine)
            Return dt
        Finally
            adp.Dispose()
            adp = Nothing
            cmd.Dispose()
            cmd = Nothing
            cnn.Dispose()
            cnn = Nothing
        End Try

        dbConn = Nothing

    End Function

    Function getPSPriceFrame(ByVal intManufactureLocationID As Integer, ByVal intFrameTypeID As Integer, ByVal dteEffectiveDate As Date, ByVal intBayPost As Integer, ByVal intCornerPost As Integer, ByVal intMaterialTypeID As Integer) As DataTable

        Dim dbConn As New DBConnection
        Dim cnn As SqlConnection = dbConn.getSQLConnection_To_OzRollPlantationScheduling
        Dim cmd As New SqlCommand
        Dim adp As New SqlDataAdapter
        Dim dt As New DataTable

        Try
            cnn.Open()
            cmd.Connection = cnn
            cmd.CommandText = "sp_getPSPriceFrame"
            cmd.CommandType = CommandType.StoredProcedure


            cmd.Parameters.Add("@ManufactureLocationID", SqlDbType.Int)
            cmd.Parameters("@ManufactureLocationID").Value = intManufactureLocationID

            cmd.Parameters.Add("@FrameTypeID", SqlDbType.Int)
            cmd.Parameters("@FrameTypeID").Value = intFrameTypeID

            cmd.Parameters.Add("@EffectiveDate", SqlDbType.DateTime)
            cmd.Parameters("@EffectiveDate").Value = dteEffectiveDate

            cmd.Parameters.Add("@BayPost", SqlDbType.Int)
            cmd.Parameters("@BayPost").Value = intBayPost

            cmd.Parameters.Add("@CornerPost", SqlDbType.Int)
            cmd.Parameters("@CornerPost").Value = intCornerPost

            cmd.Parameters.Add("@MaterialTypeID", SqlDbType.Int)
            cmd.Parameters("@MaterialTypeID").Value = intMaterialTypeID

            adp.SelectCommand = cmd
            adp.Fill(dt)

            cnn.Close()

            Return dt
        Catch ex As Exception
            EventLog.addEventLogEmail(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name & ": " & System.Reflection.MethodBase.GetCurrentMethod().Name & " - " & ex.Message & Environment.NewLine)
            Return dt
        Finally
            adp.Dispose()
            adp = Nothing
            cmd.Dispose()
            cmd = Nothing
            cnn.Dispose()
            cnn = Nothing
        End Try

        dbConn = Nothing

    End Function

End Class
