
Partial Class BookStock
    Inherits System.Web.UI.Page

    Protected Sub Page_Load(sender As Object, e As System.EventArgs) Handles Me.Load

        If Not IsPostBack Then

            If Session("sessUserID") = String.Empty Then
                Response.Redirect("Logout.aspx", False)
                Exit Sub
            Else
                If Not IsNumeric(Session("sessUserID")) Then
                    Response.Redirect("Logout.aspx", False)
                    Exit Sub
                End If
            End If

            Me.txtProductTypeID.Text = Session("sessProductTypeID").ToString

            Dim service As New AppService
            service.addWebsitePageAccess("Ozroll Plantation Scheduling", CInt(Session("sessUserID")), Session("sessUserName").ToString, System.IO.Path.GetFileName(Request.PhysicalPath), Request.QueryString.ToString(), Now)
            service = Nothing
            txtJobNumber.Text = 451248
            'Populate Gridview with Data
            loadBookStockData()

            'Populate Labels with Data
            LoadJobData(CInt(txtJobNumber.Text))

            'Populate DropDown of Book Stock List
            CreateStockDatatable()

            'Populate Labels PowderCoater
            LoadPowderCoatData(1)

        End If

    End Sub

    Private Sub Page_Error(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Error
        Dim objErr1 As Exception = Server.GetLastError().GetBaseException()

        Dim strErrorMessage As String = String.Empty

        strErrorMessage &= "Error In: " & Request.Url.ToString() & Environment.NewLine & Environment.NewLine

        strErrorMessage &= "Server.GetLastError().GetBaseException()" & Environment.NewLine & Environment.NewLine

        strErrorMessage &= "Error Message: " & objErr1.Message & Environment.NewLine
        strErrorMessage &= "Stack Trace:" & Environment.NewLine
        strErrorMessage &= objErr1.StackTrace & Environment.NewLine & Environment.NewLine

        Dim objErr2 As Exception = Server.GetLastError()

        strErrorMessage &= "Server.GetLastError()" & Environment.NewLine & Environment.NewLine

        strErrorMessage &= "Error Message: " & objErr2.Message & Environment.NewLine
        strErrorMessage &= "Stack Trace:" & Environment.NewLine
        strErrorMessage &= objErr2.StackTrace & Environment.NewLine

        EventLog.addEventLogEmail(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name & ": " & System.Reflection.MethodBase.GetCurrentMethod().Name & " - " & strErrorMessage)

        Server.ClearError()

        Response.Redirect("GenericErrorPage.aspx", False)
    End Sub

    Private Function getPageInfo() As String

        Dim strPageInfo As String = String.Empty
        Dim strName As String = String.Empty
        If Session.Contents.Count > 0 Then
            strPageInfo &= "Session Variables" & Environment.NewLine
            For Each strName In Session.Contents
                strPageInfo &= strName & ": " & CStr(Session.Contents(strName)) & Environment.NewLine
            Next
        Else
            strPageInfo &= "No Session Variables" & Environment.NewLine
        End If

        strPageInfo &= Environment.NewLine
        If Me.HasControls Then
            strPageInfo &= "Form Controls" & Environment.NewLine
            getPageControls(Me, strPageInfo)
        Else
            strPageInfo &= "No Form Controls" & Environment.NewLine
        End If
        Return strPageInfo

    End Function

    Private Sub getPageControls(ByVal ctrl As Control, ByRef strPageControls As String)

        If ctrl.HasControls Then
            For Each childCtrl As Control In ctrl.Controls
                getPageControls(childCtrl, strPageControls)
            Next
        Else
            Select Case ctrl.GetType.Name
                Case "TextBox"
                    Dim frmTxt As TextBox
                    frmTxt = DirectCast(ctrl, TextBox)
                    strPageControls &= frmTxt.ID & ": " & Left(frmTxt.Text, 100) & Environment.NewLine
                Case "DropDownList"
                    Dim frmCbo As DropDownList
                    frmCbo = DirectCast(ctrl, DropDownList)
                    If frmCbo.Items.Count > 0 Then
                        strPageControls &= frmCbo.ID & ": " & frmCbo.SelectedItem.Text & " (" & frmCbo.SelectedValue & ")" & Environment.NewLine
                    Else
                        strPageControls &= frmCbo.ID & ": Not Populated" & Environment.NewLine
                    End If
                Case "CheckBox"
                    Dim frmChk As CheckBox
                    frmChk = DirectCast(ctrl, CheckBox)
                    strPageControls &= frmChk.ID & ": " & frmChk.Checked & Environment.NewLine
                Case "RadioButton"
                    Dim frmRdo As RadioButton
                    frmRdo = DirectCast(ctrl, RadioButton)
                    strPageControls &= frmRdo.ID & ": " & frmRdo.Checked & Environment.NewLine
                Case "RadioButtonList"
                    Dim frmRdoLst As RadioButtonList
                    frmRdoLst = DirectCast(ctrl, RadioButtonList)
                    If frmRdoLst.SelectedIndex >= 0 Then
                        strPageControls &= frmRdoLst.ID & ": " & frmRdoLst.SelectedItem.Text & " (" & frmRdoLst.SelectedValue & ")" & Environment.NewLine
                    Else
                        strPageControls &= frmRdoLst.ID & ": Not Selected" & Environment.NewLine
                    End If
            End Select
        End If

    End Sub

    Protected Sub btnLogout_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnLogout.Click
        Response.Redirect("Logout.aspx", False)
    End Sub

    Protected Function loadDatatable() As DataTable
        'Dim service As New AppService, strSQL As String
        'strSQL = "Select ID, ShutterProNumber, UpdatesText, TotalPanels from tblProductionScheduleList prod inner join tblCustomers cus on prod.CustomerID=cus.CustomerID "
        'strSQL += "Left Join tblLouvreDetails det on prod.ID=det.ProductionScheduleID where prod.JobNumber = " + txtJobNumber.Text
        'Dim dt As DataTable = createDatatable()
        'Dim dtMain As DataTable = service.runSQLScheduling(strSQL)
        'service = Nothing
        'If dtMain.Rows.Count > 0 Then
        '    For i As Integer = 0 To dtMain.Rows.Count - 1
        '        Dim drow As DataRow = dt.NewRow
        '        drow("ID") = dtMain.Rows(i)("ID")
        '        drow("ShutterProNumber") = dtMain.Rows(i)("ShutterProNumber")
        '        drow("UpdatesText") = dtMain.Rows(i)("UpdatesText")
        '        drow("TotalPanels") = dtMain.Rows(i)("TotalPanels")
        '        dt.Rows.Add(drow)
        '        drow = Nothing
        '    Next
        'Else
        '    Dim rowNew As DataRow = dt.NewRow
        '    rowNew("ID") = ""
        '    rowNew("ShutterProNumber") = ""
        '    rowNew("UpdatesText") = ""
        '    rowNew("TotalPanels") = ""
        '    dt.Rows.Add(rowNew)
        '    rowNew = Nothing
        'End If

        Dim dt As DataTable = createDatatable()
        Dim rowNew As DataRow = dt.NewRow
        rowNew("ID") = dt.Rows.Count
        rowNew("ActualQuantity") = 0
        rowNew("StockArticleID") = ""
        rowNew("StockArticleIDType") = ""
        rowNew("Position") = "last"
        dt.Rows.Add(rowNew)
        rowNew = Nothing

        ViewState("sessStkUsage") = dt

        Return dt
    End Function

    Protected Function createDatatable() As DataTable

        Dim dt As DataTable = New DataTable
        Dim col As DataColumn = New DataColumn
        col.ColumnName = "ID"
        col.DataType = System.Type.GetType("System.Int32")
        dt.Columns.Add(col)
        col = Nothing

        col = New DataColumn
        col.ColumnName = "StockArticleIDType"
        col.DataType = System.Type.GetType("System.String")
        dt.Columns.Add(col)
        col = Nothing

        col = New DataColumn
        col.ColumnName = "StockArticleID"
        col.DataType = System.Type.GetType("System.String")
        dt.Columns.Add(col)
        col = Nothing

        col = New DataColumn
        col.ColumnName = "ActualQuantity"
        col.DataType = System.Type.GetType("System.Decimal")
        dt.Columns.Add(col)
        col = Nothing

        col = New DataColumn
        col.ColumnName = "Position"
        col.DataType = System.Type.GetType("System.String")
        dt.Columns.Add(col)
        col = Nothing

        Return dt

    End Function

    Protected Sub loadBookStockData()

        Dim service As New AppService
        Dim dt As DataTable = loadDatatable()
        Me.dgvStockList.DataSource = dt
        Me.dgvStockList.DataBind()
        Dim gvbtnDelete As Button = DirectCast(dgvStockList.Rows(0).Cells(1).FindControl("btnDelete"), Button)
        gvbtnDelete.Visible = False

    End Sub

    Protected Sub btnSave_Click(sender As Object, e As System.EventArgs) Handles btnSave.Click
        Dim service As New AppService
        Dim bolContinue As Boolean = True
        Dim StkUsage As New StockUsage
        Dim dbConn As New DBConnection
        Dim cnn As SqlClient.SqlConnection = dbConn.getSQLConnection_To_OzRollPlantationScheduling
        Dim trans As SqlClient.SqlTransaction = Nothing
        Dim i As Integer
        dbConn = Nothing
        btnSave.Enabled = False
        btnSave.CssClass = "form-button-disabled"
        lblStatus.Text = String.Empty
        Try
            i = 0
            cnn.Open()
            trans = cnn.BeginTransaction
            Dim txtNewQuantity As TextBox
            Dim cboProductList As ListBox
            For Each gvr As GridViewRow In dgvStockList.Rows
                txtNewQuantity = DirectCast(gvr.FindControl("txtQuantity"), TextBox)
                cboProductList = DirectCast(gvr.FindControl("cboProduct"), ListBox)
                If txtNewQuantity.Text = String.Empty Or cboProductList.SelectedIndex < 1 Then
                    Continue For
                Else
                    Dim newValue As Decimal = 0.0
                    'If (Decimal.TryParse(txtNewQuantity.Text.Replace(",", "."), newValue)) Then
                    If (Decimal.TryParse(txtNewQuantity.Text, newValue)) Then
                        'newValue = Math.Round(newValue, 2)
                        'lblStatus.Text = newValue.ToString("#,###.##")
                        StkUsage.ActualQuantity = txtNewQuantity.Text
                        StkUsage.StockArticleTypeID = cboProcess.SelectedValue

                        StkUsage.AdditionalRequirementsID = 55
                        StkUsage.BookedOutBy = "KSingh - " + i.ToString()
                        StkUsage.CostPrice = 25.55 + (i * 5)
                        StkUsage.CostPriceGST = 10 / 100 * StkUsage.CostPriceGST
                        StkUsage.DateBookedOut = DateTime.Now
                        StkUsage.StockArticleID = 11 + i

                        If service.AddStkRecord(StkUsage, cnn, trans) < 1 Then
                            bolContinue = False
                            Exit Sub
                        End If
                    End If
                End If
                i += 1
            Next


            If bolContinue Then
                trans.Commit()
                Response.Redirect("BookStock.aspx", False)
            Else
                EventLog.addEventLogEmail(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name & ": " & System.Reflection.MethodBase.GetCurrentMethod().Name & " - Transaction Rolled Back" & Environment.NewLine & getPageInfo())
                trans.Rollback()
                If lblStatus.Text = String.Empty Then
                    lblStatus.Text = "Error saving details. Please try again."
                End If
                btnSave.Enabled = True
                btnSave.CssClass = "form-button"
            End If

        Catch ex As Exception
            If Not trans Is Nothing Then
                trans.Rollback()
            End If
            If cnn.State = ConnectionState.Open Then
                cnn.Close()
            End If
            EventLog.addEventLogEmail(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name & ": " & System.Reflection.MethodBase.GetCurrentMethod().Name & " - " & ex.Message & Environment.NewLine & getPageInfo())
            bolContinue = False
        Finally
            trans.Dispose()
            trans = Nothing
            If cnn.State = ConnectionState.Open Then
                cnn.Close()
            End If
            cnn.Dispose()
            cnn = Nothing
        End Try
        service = Nothing

    End Sub

    Protected Function setEnteredValues() As DataTable

        Dim dt As DataTable = New DataTable

        Dim col As DataColumn = New DataColumn
        col.ColumnName = "ID"
        col.DataType = System.Type.GetType("System.Int32")
        dt.Columns.Add(col)
        col = Nothing

        col = New DataColumn
        col.ColumnName = "StockCode"
        col.DataType = System.Type.GetType("System.String")
        dt.Columns.Add(col)
        col = Nothing

        col = New DataColumn
        col.ColumnName = "StockDescription"
        col.DataType = System.Type.GetType("System.String")
        dt.Columns.Add(col)
        col = Nothing

        col = New DataColumn
        col.ColumnName = "QuantityBookedOut"
        col.DataType = System.Type.GetType("System.Integer")
        dt.Columns.Add(col)
        col = Nothing

        Dim intID As Integer = Constants.DEFAULT_INTEGER_VALUE
        Dim drow As DataRow = Nothing

        Return dt

    End Function

    Private Sub LoadJobData(JobNumber As Integer)
        Dim service As New AppService
        Dim bolContinue As Boolean = True

        Dim dbConn As New DBConnection
        Dim cnn As SqlClient.SqlConnection = dbConn.getSQLConnection_To_OzRollPlantationScheduling

        Dim strSQL As String = "select pro.JobNumber,cus.CustomerName,pro.CustomerName as CusReference,pro.CustomerID,pro.TotalPanels,"
        strSQL += "pro.OrderReference,pro.OzrollContractNo,cast(cast(pro.TotalSQM as decimal(10,2)) as float) as TotalSQM,pro.ShutterProNumber, ord.OrderDescription  "
        strSQL += " from tblProductionScheduleList pro inner join Tblcustomers cus on cus.customerid = pro.customerID inner join tblOrderType ord On pro.OrderTypeID=ord.OrderTypeID"
        strSQL += " where JobNumber=" & JobNumber
        Dim dt As DataTable = service.runSQLScheduling(strSQL)
        '       dt = service.getPlantationJobDetailsRecordsByPlantationScheduleID(231)
        dbConn = Nothing

        If dt.Rows.Count() > 0 Then
            lblCustomer.Text = dt.Rows(0).Item("CustomerName")
            lblCusReference.Text = dt.Rows(0).Item("CusReference")
            lblPanels.Text = dt.Rows(0).Item("TotalPanels")
            lblOrderRef.Text = dt.Rows(0).Item("OrderReference")
            lblTotalSQM.Text = dt.Rows(0).Item("TotalSQM")
            lblOrderType.Text = dt.Rows(0).Item("OrderDescription")
            lblOzrollID.Text = dt.Rows(0).Item("ShutterProNumber")
            lblHeader.Text = "Stock Issued For Job " & lblOzrollID.Text
        End If
        dt = Nothing
    End Sub


    Private Sub LoadPowderCoatData(ID As Integer)
        Dim service As New AppService
        Dim bolContinue As Boolean = True

        'Dim dbConn As New DBConnection
        'Dim cnn As SqlClient.SqlConnection = dbConn.getSQLConnection_To_OzRollPlantationScheduling

        'Dim strSQL As String = "Select AdditionalRequirementsID, PowdercoaterName, DescriptionText, StartDate, ETADate, CompleteDate from tblAdditionalRequirements adreq "
        'strSQL += " inner join tblPowdercoater pwdr on adreq.PowderCoaterID=pwdr.PowderCoaterID where AdditionalRequirementsID=" & ID
        'Dim dt As DataTable = service.runSQLScheduling(strSQL)
        ''       dt = service.getPlantationJobDetailsRecordsByPlantationScheduleID(231)
        'dbConn = Nothing

        'If dt.Rows.Count() > 0 Then
        '    lblAddID.Text = dt.Rows(0).Item("AdditionalRequirementsID")
        '    lblCoaterName.Text = dt.Rows(0).Item("PowdercoaterName")
        '    lblDescription.Text = dt.Rows(0).Item("DescriptionText")
        '    lblStartDate.Text = dt.Rows(0).Item("StartDate")
        '    lblETAdate.Text = dt.Rows(0).Item("ETADate")
        'End If
        'dt = Nothing
    End Sub


    Protected Sub btnCancel_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnCancel.Click
        Response.Redirect("Home.aspx", False)
    End Sub

    Protected Sub btnHome_Click(sender As Object, e As System.EventArgs) Handles btnHome.Click

        Response.Redirect("Home.aspx", False)

    End Sub

    Protected Sub btnSaveAddStock_Click(sender As Object, e As System.EventArgs) Handles btnSaveAddStock.Click
        'modal popup save button
        Dim service As New AppService

        Dim dbConn As New DBConnection
        Dim cnn As SqlClient.SqlConnection = dbConn.getSQLConnection_To_OzRollPlantationScheduling
        Dim trans As SqlClient.SqlTransaction

        Dim bolSavedOK As Boolean = True

        Try
            'Dim cLouvreJobDetails As New LouvreDetails
            'If CInt(Me.txtHiddenPSDetailID.Text) > 0 Then
            '    cLouvreJobDetails = service.getTempLouvreDetailsRecord(CInt(Me.txtHiddenPSDetailID.Text))
            'End If

            'cLouvreJobDetails = prepareShutterDetailForSave(cLouvreJobDetails)
            'cLouvreJobDetails.TempGUID = Me.txtPSDetailGUID.Text

            'cnn.Open()
            'trans = cnn.BeginTransaction

            'If cLouvreJobDetails.LouvreDetailID = Constants.DEFAULT_INTEGER_VALUE Then
            '    'Integer PSDetailID is being return    - Noticed By Kartar on 14/06/2017
            '    bolSavedOK = service.addTempLouvreDetails(cLouvreJobDetails, cnn, trans)
            '    'Details are being wiped out here in the addTempLouvreDetails

            'Else
            '    bolSavedOK = service.updateTempLouvreDetails(cLouvreJobDetails, cnn, trans)
            'End If

            'If bolSavedOK Then
            '    trans.Commit()
            'Else
            '    trans.Rollback()
            'End If

        Catch ex As Exception
            If Not trans Is Nothing Then
                trans.Rollback()
            End If
            If cnn.State = ConnectionState.Open Then
                cnn.Close()
            End If
            EventLog.addEventLogEmail(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name & ": " & System.Reflection.MethodBase.GetCurrentMethod().Name & " - " & ex.Message & Environment.NewLine & getPageInfo())
        Finally
            If Not IsNothing(trans) Then
                trans.Dispose()
            End If
            trans = Nothing
            If cnn.State = ConnectionState.Open Then
                cnn.Close()
            End If
            cnn.Dispose()
            cnn = Nothing
        End Try

        If bolSavedOK Then
            'resetPopupControlsToDefault()
            'Me.txtPSDetailID.Text = "0"
            loadBookStockData()
        End If


    End Sub

    Protected Sub cboProcess_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cboProcess.SelectedIndexChanged
        If cboProcess.SelectedValue = 2 Then
            pnlBottom.Visible = True
            lblPanelBottom.Text = "Details of " + cboProcess.SelectedItem.ToString
        Else
            pnlBottom.Visible = False
        End If
    End Sub
    Protected Sub cboProduct_SelectedIndexChanged(sender As Object, e As EventArgs)

        Dim gvr As GridViewRow = DirectCast(DirectCast(sender, Control).NamingContainer, GridViewRow)
        Dim intRow As Integer = CInt(dgvStockList.DataKeys(gvr.RowIndex).Values("ID"))

        'Dim row As GridViewRow
        'row = Me.dgvStockList.Rows(intRow)

        'If Not IsNothing(row) Then
        '    Dim Index As Integer = row.RowIndex
        'End If

    End Sub

    Protected Function CreateStockDatatable() As DataTable

        Dim dt As DataTable = New DataTable
        Dim col As DataColumn

        col = New DataColumn
        col.ColumnName = "ProcessID"
        col.DataType = System.Type.GetType("System.Int32")
        dt.Columns.Add(col)
        col = Nothing

        col = New DataColumn
        col.ColumnName = "ProcessDescription"
        col.DataType = System.Type.GetType("System.String")
        dt.Columns.Add(col)
        col = Nothing


        Dim drow As DataRow = dt.NewRow
        drow("ProcessID") = 0
        drow("ProcessDescription") = "-Select Please-"
        dt.Rows.Add(drow)
        drow = Nothing

        drow = dt.NewRow
        drow("ProcessID") = 1
        drow("ProcessDescription") = "Extrusion for Assembly"
        dt.Rows.Add(drow)
        drow = Nothing

        drow = dt.NewRow
        drow("ProcessID") = 2
        drow("ProcessDescription") = "Extrusion for Powdercoating"
        dt.Rows.Add(drow)
        drow = Nothing

        drow = dt.NewRow
        drow("ProcessID") = 3
        drow("ProcessDescription") = "Extrusion for Hardware"
        dt.Rows.Add(drow)
        drow = Nothing

        Me.cboProcess.DataSource = dt
        Me.cboProcess.DataValueField = "ProcessID"
        Me.cboProcess.DataTextField = "ProcessDescription"
        Me.cboProcess.DataBind()
        Me.cboProcess.SelectedIndex = 0

        Return dt

    End Function


    Protected Sub AddNewRow()

        If Not IsNothing(ViewState("sessStkUsage")) Then
            Dim dtCurrentTable As DataTable = CType(ViewState("sessStkUsage"), DataTable)
            Dim intCurrentRow As Integer = dtCurrentTable.Rows.Count - 1
            Dim gvtxtQuantity As TextBox = DirectCast(dgvStockList.Rows(intCurrentRow).Cells(1).FindControl("txtQuantity"), TextBox)
            Dim gvCboProduct As DropDownList = DirectCast(dgvStockList.Rows(intCurrentRow).Cells(1).FindControl("cboProduct"), DropDownList)

            lblStatus.Text = ""
            If cboProcess.SelectedIndex < 1 Then
                lblStatus.Text = "Please choose a Proccess and try again!!"
                Exit Sub
            ElseIf gvCboProduct.SelectedIndex < 1 Then
                lblStatus.Text = "Please choose a Item and try again!!"
                Exit Sub
            ElseIf gvtxtQuantity.Text.Trim = "" Or gvtxtQuantity.Text.Trim = "0" Then
                lblStatus.Text = "Please enter Quantity for the Item!!"
                Exit Sub
            End If

            Dim drCurrentRow As DataRow

            If (dtCurrentTable.Rows.Count > 0) Then
                For i As Integer = 0 To dtCurrentTable.Rows.Count - 1
                    gvtxtQuantity = DirectCast(dgvStockList.Rows(i).Cells(1).FindControl("txtQuantity"), TextBox)
                    gvCboProduct = DirectCast(dgvStockList.Rows(i).Cells(1).FindControl("cboProduct"), DropDownList)
                    Dim gvbtnDelete As Button = DirectCast(dgvStockList.Rows(i).Cells(1).FindControl("btnDelete"), Button)
                    dtCurrentTable.Rows(i)("Position") = ""
                    dtCurrentTable.Rows(i)("ID") = i + 1
                    If gvtxtQuantity.Text = String.Empty And IsDBNull(dtCurrentTable.Rows(i)("ActualQuantity")) Then
                        dtCurrentTable.Rows(i)("ActualQuantity") = DBNull.Value
                    Else
                        '   dtCurrentTable.Rows(i)("ActualQuantity") = IIf(IsDBNull(dtCurrentTable.Rows(i)("ActualQuantity")), gvtxtQuantity.Text, dtCurrentTable.Rows(i)("ActualQuantity"))
                        If IsDBNull(dtCurrentTable.Rows(i)("ActualQuantity")) Then
                            dtCurrentTable.Rows(i)("ActualQuantity") = gvtxtQuantity.Text
                        Else
                            dtCurrentTable.Rows(i)("ActualQuantity") = IIf(dtCurrentTable.Rows(i)("ActualQuantity") = 0, gvtxtQuantity.Text, dtCurrentTable.Rows(i)("ActualQuantity"))
                        End If

                    End If
                    '  dtCurrentTable.Rows(i)("StockArticleIDType") = IIf(gvCboProduct.SelectedItem.ToString = "", dtCurrentTable.Rows(i)("StockArticleIDType"), gvCboProduct.SelectedItem)
                    If i = dtCurrentTable.Rows.Count - 1 Then
                        dtCurrentTable.Rows(i)("StockArticleID") = gvCboProduct.SelectedIndex
                    End If
                Next
            End If

            drCurrentRow = dtCurrentTable.NewRow()
            drCurrentRow("ID") = 0
            drCurrentRow("ActualQuantity") = DBNull.Value
            drCurrentRow("StockArticleID") = DBNull.Value
            drCurrentRow("StockArticleIDType") = DBNull.Value
            drCurrentRow("Position") = "last"
            dtCurrentTable.Rows.Add(drCurrentRow)
            ViewState("sessStkUsage") = dtCurrentTable

            dgvStockList.DataSource = dtCurrentTable
            dgvStockList.DataBind()
            Dim gvbtnDelete0 As Button = DirectCast(dgvStockList.Rows(dtCurrentTable.Rows.Count - 1).Cells(1).FindControl("btnDelete"), Button)
            gvbtnDelete0.Visible = False
        End If

    End Sub
    Private Sub dgvStockList_RowCommand(sender As Object, e As GridViewCommandEventArgs) Handles dgvStockList.RowCommand
        Dim dtStk As DataTable = CType(ViewState("sessStkUsage"), DataTable)
        If (e.CommandName = "rowDelete") Then
            Dim index As Integer = Convert.ToInt32(e.CommandArgument)
            'Dim rows As GridViewRow = dgvStockList.Rows(index)
            'Dim strID As String = dgvStockList.DataKeys(rows.DataItemIndex).Value
            dtStk.Rows(index).Delete()
            For i As Integer = 0 To dtStk.Rows.Count - 1
                If i < dtStk.Rows.Count - 1 Then
                    dtStk.Rows(i)("Position") = ""
                Else
                    dtStk.Rows(i)("Position") = "last"
                End If
            Next
            ViewState("sessStkUsage") = dtStk
            dgvStockList.DataSource = dtStk
            dgvStockList.DataBind()
        ElseIf (e.CommandName = "rowAdd") Then
            Dim index As Integer = Convert.ToInt32(e.CommandArgument)
            Dim row As GridViewRow = DirectCast(DirectCast(e.CommandSource, Control).NamingContainer, GridViewRow)
            Dim gvCboProduct As DropDownList = DirectCast(row.FindControl("cboProduct"), DropDownList)
            'AddNewRow(gvCboProduct.SelectedIndex)
            AddNewRow()
        End If
    End Sub

    Private Sub dgvStockList_RowDataBound(sender As Object, e As GridViewRowEventArgs) Handles dgvStockList.RowDataBound
        If (e.Row.RowType = DataControlRowType.DataRow) Then
            Dim dr As DataRowView = DirectCast(e.Row.DataItem, DataRowView)
            Dim strDisplayCheck As String = dr("Position").ToString()
            Dim gvtxtQuantity As TextBox = DirectCast(e.Row.FindControl("txtQuantity"), TextBox)
            Dim gvCboProduct As DropDownList = DirectCast(e.Row.FindControl("cboProduct"), DropDownList)

            If strDisplayCheck.ToLower <> "last" Then
                gvtxtQuantity.Text = dr("ActualQuantity").ToString()
                gvCboProduct.SelectedIndex = dr("StockArticleID").ToString()
            Else
                Dim btnDeleteView As Button = DirectCast(e.Row.FindControl("btnDelete"), Button)
                btnDeleteView.Visible = False
            End If
        End If
    End Sub

End Class
