Imports System.Data.SqlClient
Imports System.Drawing
Imports System.IO
Imports Sybiz

Partial Class LouvreJobDetails
    Inherits System.Web.UI.Page

    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs) Handles Me.Load

        If Not IsPostBack Then

            If Session("sessUserID") = String.Empty Then
                Response.Redirect("Logout.aspx", False)
                Exit Sub
            Else
                If Not IsNumeric(Session("sessUserID")) Then
                    Response.Redirect("Logout.aspx", False)
                    Exit Sub
                End If
            End If

            'don't allow access to this page if in as plantation
            If Session("sessProductTypeID").ToString = "1" Then
                Response.Redirect("Home.aspx", False)
                Exit Sub
            End If

            Me.txtProductTypeID.Text = Session("sessProductTypeID").ToString

            Dim service As New AppService

            Dim intScheduleID As Integer = Constants.DEFAULT_INTEGER_VALUE
            Dim intViewType As Integer = Constants.DEFAULT_INTEGER_VALUE

            service.addWebsitePageAccess("Ozroll Plantation Scheduling", CInt(Session("sessUserID")), Session("sessUserName").ToString, System.IO.Path.GetFileName(Request.PhysicalPath), Request.QueryString.ToString(), Now)


            Try

                If Not Request.QueryString.Count = 0 Then
                    If Not IsNothing(Request.Params("ScheduleID")) Then
                        intScheduleID = CInt(Request.Params("ScheduleID"))
                    End If
                    If Not IsNothing(Request.Params("ViewType")) Then
                        intViewType = CInt(Request.Params("ViewType"))
                    End If
                End If
                Me.txtViewType.Text = intViewType.ToString

                Me.lblStatus.Text = String.Empty

                Me.lblPostProduction1.Text = "Despatch Date"
                Me.lblPostProduction2.Text = "Invoice Date"

                initCtrls()
                populateDetails(intScheduleID)

                'check if paperwork generation in progress - need to stop any actions from being taken until it is done...
                'pnlJobPaperwork.Visible = True


                'if job has already been saved, display the reports buttons
                If intScheduleID > 0 Then
                    Me.btnDeliveryDocket.Enabled = True
                    Me.btnDeliveryDocket.CssClass = "form-button"
                    Me.btnRunningSheet.Enabled = True
                    Me.btnRunningSheet.CssClass = "form-button"
                    Me.btnTimeSheet.Enabled = True
                    Me.btnTimeSheet.CssClass = "form-button"
                    Me.btnCoverSheet.Enabled = True
                    Me.btnCoverSheet.CssClass = "form-button"
                End If


                If txtTempFolder.Text.Trim.Length < 1 Then
                    txtTempFolder.Text = "temp_" + DateTime.Now.Ticks.ToString()
                End If
                'Session.Remove("DTUploadFiles")
                CreateUpLoadDataTable()
                'If intViewType = 1 Then   'Update (Not Addition)                
                '    LoadAttchments(True)
                'End If

                checkAndSetClearButtonVisibilityForStatusDates()

                Dim newGUID As New Guid
                newGUID = Guid.NewGuid()
                Me.txtPSDetailGUID.Text = newGUID.ToString

                copyLouvreJobDetailsFromMainToTemp()
                loadShutterDetailsForDataGrid()

                copyAdditionalRequirementsFromMainToTemp()

                loadPowdercoating()

                otherDetails()

                loadAdditionalRequirements()

                checkPermissions()

                If intScheduleID > 0 Then
                    copyNotesFromMainToTemp()
                    loadNotesToAccordian()
                End If

                'If dgvDetails.Rows.Count > 0 Then
                '    btnAcceptOrder.Visible = True
                'End If

                If Me.txtId.Text <> String.Empty Then
                    Me.pnlCancellation.Visible = True
                End If


                CheckStatus()

                'If Me.txtId.Text <> String.Empty Then
                '   loadOrderFormLinks()
                'End If

                'If cboOrderType.SelectedIndex > 0 Then
                '    If CInt(cboOrderType.SelectedValue) > 1 Then
                '        populateGRADetailsGrid()
                '    End If
                'End If

                'If txtPlannedShippingDate.Text.Trim.Length > 0 And txtRequirementETADate.Text.Trim.Length > 0 Then
                '    If CDate(txtPlannedShippingDate.Text) < CDate(txtRequirementETADate.Text) Then
                '        txtPlannedShippingDate.ForeColor = Color.Red
                '    Else
                '        txtPlannedShippingDate.ForeColor = Color.Black
                '    End If
                'Else
                '    txtPlannedShippingDate.ForeColor = Color.Black
                'End If


                'powdercoat form display link
                'check file exists before showing on page
                'Dim strFileName As String = "Production.xlsx"
                'If IO.File.Exists(Server.MapPath("~") & "UpLoadedFiles\" & strFileName) Then
                '    Dim strOrderForm As String = "UpLoadedFiles/" & strFileName
                '    Me.lblOrderForm.Text &= "<a target=""_blank"" href=""" & ResolveUrl(strOrderForm) & """>Production Sheets</a><br />"
                '    Me.pnlOrderForms.Visible = True
                'End If

                'strFileName = "Matrix.xls"
                'If IO.File.Exists(Server.MapPath("~") & "UpLoadedFiles\" & strFileName) Then
                '    Dim strOrderForm As String = "UpLoadedFiles/" & strFileName
                '    Me.lblOrderForm.Text &= "<a target=""_blank"" href=""" & ResolveUrl(strOrderForm) & """>Optimised Matrix</a><br />"
                '    Me.pnlOrderForms.Visible = True
                'End If

                'strFileName = "PCList.pdf"
                'If IO.File.Exists(Server.MapPath("~") & "UpLoadedFiles\" & strFileName) Then
                '    Dim strOrderForm As String = "UpLoadedFiles/" & strFileName
                '    Me.lblOrderForm.Text &= "<a target=""_blank"" href=""" & ResolveUrl(strOrderForm) & """>Powdercoat Form</a><br />"
                '    Me.pnlOrderForms.Visible = True
                'End If

            Catch ex As Exception
                EventLog.addEventLogEmail(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name & ": " & System.Reflection.MethodBase.GetCurrentMethod().Name & " - " & ex.Message & Environment.NewLine & getPageInfo())
            End Try
            service = Nothing
        End If

        ScriptManager.RegisterStartupScript(Me.Page, GetType(String), "validpanel", "getValidPanel();", True)
        ScriptManager.RegisterStartupScript(Me.Page, GetType(String), "midRailEna", "midRailEnable();", True)
        ScriptManager.RegisterStartupScript(Me.Page, GetType(String), "OpenInout", "openEnable();", True)

        ScriptManager.RegisterStartupScript(Me.Page, GetType(String), "othColourEnable", "otherColourEnable();", True)
        ScriptManager.RegisterStartupScript(Me.Page, GetType(String), "stEnable", "stackEnable();", True)
        ScriptManager.RegisterStartupScript(Me.Page, GetType(String), "rlEnable", "roomLocationOtherEnable();", True)

        ScriptManager.RegisterStartupScript(Me.Page, GetType(String), "pivEnable", "pivotEnable();", True)
        ScriptManager.RegisterStartupScript(Me.Page, GetType(String), "fraEnable", "frameEnable();", True)
        ScriptManager.RegisterStartupScript(Me.Page, GetType(String), "lockOpt", "lockOptions();", True)

        ScriptManager.RegisterStartupScript(Me.Page, GetType(String), "bottomTrack", "bottomTrackEnable();", True)
        ScriptManager.RegisterStartupScript(Me.Page, GetType(String), "bladeOperation", "bladeOperationEnable();", True)
        ScriptManager.RegisterStartupScript(Me.Page, GetType(String), "bladeOperationBottom", "bladeOperationBottomEnable();", True)
        ScriptManager.RegisterStartupScript(Me.Page, GetType(String), "curvedTrack", "curvedTrackEnable();", True)
        ScriptManager.RegisterStartupScript(Me.Page, GetType(String), "standOff", "standOffEnable();", True)
        ScriptManager.RegisterStartupScript(Me.Page, GetType(String), "winder", "winderEnable();", True)
        ScriptManager.RegisterStartupScript(Me.Page, GetType(String), "controllerSide", "controllerSideEnable();", True)
        ScriptManager.RegisterStartupScript(Me.Page, GetType(String), "mainShutter", "MainShutterType();", True)

        'ScriptManager.RegisterStartupScript(Me.Page, GetType(String), "midrailen", "midRailEnable();", True)
        ScriptManager.RegisterStartupScript(Me.Page, GetType(String), "maxShutter", "maxShutterHeight();", True)
        ScriptManager.RegisterStartupScript(Me.Page, GetType(String), "numberKey", "isNumberKey(event);", True)

        If IsPostBack() Then
            LoadAttchments(False)
        End If
    End Sub

    Private Sub CheckStatus()
        If cboJobType.SelectedIndex > 0 Then
            Select Case CInt(Me.cboJobType.SelectedValue)
                Case 1 'domestic
                    'Me.cboJobType.Enabled = False
                    'Me.cboJobType.CssClass = "form-select-disable"
                    Me.pnlCheckMeasureDate.Visible = True
                    Me.pnlInstallDate.Visible = True
                    Me.pnlRetailInstallDetails.Visible = True
                    CheckForCreatedLouvre()
                    If txtCheckMeasureDate.Text <> String.Empty And txtCheckMeasureDate.Enabled = False And txtPickingDate.Text = String.Empty Then
                        Me.btnClearCM.Visible = True
                        Me.btnClearReceived.Visible = False
                    ElseIf txtPickingDate.Text = String.Empty And txtReceived.Text <> String.Empty Then
                        Me.btnClearReceived.Visible = True
                        Me.btnClearCM.Visible = False
                        Me.btnClearPicking.Visible = False
                    ElseIf txtReceived.Text <> String.Empty And txtPickingDate.Text <> String.Empty And txtScheduledDate.Text = String.Empty Then
                        Me.btnClearReceived.Visible = False
                        Me.btnClearCM.Visible = False
                        Me.btnClearPicking.Visible = True
                    ElseIf txtReceived.Text <> String.Empty And txtPickingDate.Text <> String.Empty And txtScheduledDate.Text <> String.Empty Then
                        Me.btnClearReceived.Visible = False
                        Me.btnClearCM.Visible = False
                        Me.btnClearPicking.Visible = False
                    Else
                        If txtInstallDate.Text <> String.Empty And txtInstallDate.Enabled = False And txtPostProduction1.Text = String.Empty Then
                            Me.btnClearPostProduction1.Visible = True
                            Me.btnClearQC.Visible = False
                        ElseIf txtPostProduction1.Text = String.Empty And txtQCDate.Text <> String.Empty Then
                            Me.btnClearQC.Visible = True
                            Me.btnClearInstall.Visible = False
                            Me.btnClearPostProduction1.Visible = False
                        ElseIf btnClearQC.Text <> String.Empty And txtPostProduction1.Text <> String.Empty And txtPostProduction2.Text = String.Empty Then
                            Me.btnClearQC.Visible = False
                            Me.btnClearInstall.Visible = False
                            Me.btnClearPostProduction1.Visible = True
                        ElseIf btnClearQC.Text <> String.Empty And txtPostProduction1.Text <> String.Empty And txtPostProduction2.Text <> String.Empty Then
                            Me.btnClearQC.Visible = False
                            Me.btnClearInstall.Visible = False
                            Me.btnClearPostProduction1.Visible = False
                        Else
                            Me.btnClearReceived.Visible = False
                            Me.btnClearCM.Visible = False
                            Me.btnClearCM.Text = String.Empty
                            Me.btnClearPicking.Visible = False
                        End If
                    End If
                Case 2 'wholesale
                    Me.pnlCheckMeasureDate.Visible = False
                    Me.pnlInstallDate.Visible = False
                    Me.pnlRetailInstallDetails.Visible = False
                    'Me.cboJobType.Enabled = False
                    'Me.cboJobType.CssClass = "form-select-disable"
                    CheckForCreatedLouvre()
                Case Else
                    Me.pnlCheckMeasureDate.Visible = False
                    Me.pnlInstallDate.Visible = False
                    Me.pnlRetailInstallDetails.Visible = False
                    'Me.cboJobType.Enabled = True
                    'Me.cboJobType.Enabled = False
                    'Me.cboJobType.CssClass = "form-select"
                    CheckForCreatedLouvre()
            End Select
        End If
    End Sub

    Private Sub CheckForCreatedLouvre()
        'Dim service As New AppService

        'Dim strSQL As String = "Select * from tblLouvreDetails where ProductionScheduleID = " & txtIntScheduleID.Text
        'Dim dtCreatedLouvre As DataTable = service.runSQLScheduling(strSQL)

        'If dtCreatedLouvre.Rows.Count > 0 Then
        '    Me.dgvDetails.DataSource = dtCreatedLouvre
        '    Me.dgvDetails.DataBind()
        'End If

    End Sub

    Private Sub Page_Error(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Error
        Dim objErr1 As Exception = Server.GetLastError().GetBaseException()

        Dim strErrorMessage As String = String.Empty

        strErrorMessage &= "Error In: " & Request.Url.ToString() & Environment.NewLine & Environment.NewLine

        strErrorMessage &= "Server.GetLastError().GetBaseException()" & Environment.NewLine & Environment.NewLine

        strErrorMessage &= "Error Message: " & objErr1.Message & Environment.NewLine
        strErrorMessage &= "Stack Trace:" & Environment.NewLine
        strErrorMessage &= objErr1.StackTrace & Environment.NewLine & Environment.NewLine

        Dim objErr2 As Exception = Server.GetLastError()

        strErrorMessage &= "Server.GetLastError()" & Environment.NewLine & Environment.NewLine

        strErrorMessage &= "Error Message: " & objErr2.Message & Environment.NewLine
        strErrorMessage &= "Stack Trace:" & Environment.NewLine
        strErrorMessage &= objErr2.StackTrace & Environment.NewLine

        EventLog.addEventLogEmail(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name & ": " & System.Reflection.MethodBase.GetCurrentMethod().Name & " - " & strErrorMessage)

        Server.ClearError()

        Response.Redirect("GenericErrorPage.aspx", False)
    End Sub

    Private Function getPageInfo() As String

        Dim strPageInfo As String = String.Empty

        Dim strName As String = String.Empty
        If Session.Contents.Count > 0 Then
            strPageInfo &= "Session Variables" & Environment.NewLine
            For Each strName In Session.Contents
                strPageInfo &= strName & ": " & CStr(Session.Contents(strName)) & Environment.NewLine
            Next
        Else
            strPageInfo &= "No Session Variables" & Environment.NewLine
        End If

        strPageInfo &= Environment.NewLine

        If Me.HasControls Then
            strPageInfo &= "Form Controls" & Environment.NewLine
            getPageControls(Me, strPageInfo)
        Else
            strPageInfo &= "No Form Controls" & Environment.NewLine
        End If
        Return strPageInfo

    End Function

    Private Sub getPageControls(ByVal ctrl As Control, ByRef strPageControls As String)

        If ctrl.HasControls Then
            For Each childCtrl As Control In ctrl.Controls
                getPageControls(childCtrl, strPageControls)
            Next
        Else
            Select Case ctrl.GetType.Name
                Case "TextBox"
                    Dim frmTxt As TextBox
                    frmTxt = DirectCast(ctrl, TextBox)
                    strPageControls &= frmTxt.ID & ": " & Left(frmTxt.Text, 100) & Environment.NewLine
                Case "DropDownList"
                    Dim frmCbo As DropDownList
                    frmCbo = DirectCast(ctrl, DropDownList)
                    If frmCbo.Items.Count > 0 Then
                        strPageControls &= frmCbo.ID & ": " & frmCbo.SelectedItem.Text & " (" & frmCbo.SelectedValue & ")" & Environment.NewLine
                    Else
                        strPageControls &= frmCbo.ID & ": Not Populated" & Environment.NewLine
                    End If
                Case "CheckBox"
                    Dim frmChk As CheckBox
                    frmChk = DirectCast(ctrl, CheckBox)
                    strPageControls &= frmChk.ID & ": " & frmChk.Checked & Environment.NewLine
                Case "RadioButton"
                    Dim frmRdo As RadioButton
                    frmRdo = DirectCast(ctrl, RadioButton)
                    strPageControls &= frmRdo.ID & ": " & frmRdo.Checked & Environment.NewLine
                Case "RadioButtonList"
                    Dim frmRdoLst As RadioButtonList
                    frmRdoLst = DirectCast(ctrl, RadioButtonList)
                    If frmRdoLst.SelectedIndex >= 0 Then
                        strPageControls &= frmRdoLst.ID & ": " & frmRdoLst.SelectedItem.Text & " (" & frmRdoLst.SelectedValue & ")" & Environment.NewLine
                    Else
                        strPageControls &= frmRdoLst.ID & ": Not Selected" & Environment.NewLine
                    End If
            End Select
        End If

    End Sub

    Protected Sub btnLogout_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnLogout.Click

        Response.Redirect("Logout.aspx", False)

    End Sub

    Protected Sub DisableDetails()

        'Added by Michael Behar 26/06/2017

        'These changes are implemented to grey out the appropriate textboxes when needed.
        If cboSlide.SelectedIndex = 0 Then
            cboSlide.Enabled = False
            cboSlide.CssClass = "form-select-disable"
        End If

        If cboBottomTrackType.SelectedIndex = 0 Then
            cboBottomTrackType.Enabled = False
            cboBottomTrackType.CssClass = "form-select-disable"
        End If

        If cboBiFoldHingedDoor.SelectedIndex = 0 Then
            cboBiFoldHingedDoor.Enabled = False
            cboBiFoldHingedDoor.CssClass = "form-select-disable"
        End If

        If cboEndCapColour.SelectedIndex = 0 Then
            cboEndCapColour.Enabled = False
            cboEndCapColour.CssClass = "form-select-disable"
        End If

        If cboBottomTrackType.SelectedIndex > 0 Then
            cboBottomTrackType.Enabled = True
            cboBottomTrackType.CssClass = "form-select"
            If (cboShutterType.SelectedItem.Text = "Fixed" Or cboShutterType.SelectedItem.Text = "Fixed Blade Fixed Pane" Or cboShutterType.SelectedItem.Text = "Fixed Blades In Angle") Then
                cboBottomTrackType.Enabled = False
                cboBottomTrackType.CssClass = "form-select-disable"
                cboBottomTrackType.Text = ""
            End If
        End If


        If cboFlushBoltsTop.SelectedIndex = 0 Then
            cboFlushBoltsTop.Enabled = False
            cboFlushBoltsTop.CssClass = "form-select-disable"
        End If

        If cboFlushBoltsBottom.SelectedIndex = 0 Then
            cboFlushBoltsBottom.Enabled = False
            cboFlushBoltsBottom.CssClass = "form-select-disable"
        End If

        If cboStacker.SelectedIndex = 0 Then
            cboStacker.Enabled = False
            cboStacker.CssClass = "form-select-disable"
        End If

        If cboLReveal.SelectedIndex = 0 Then
            cboLReveal.Enabled = False
            cboLReveal.CssClass = "form-select-disable"
        End If

        If cboZReveal.SelectedIndex = 0 Then
            cboZReveal.Enabled = False
            cboZReveal.CssClass = "form-select-disable"
        End If

        If cboWinder.SelectedIndex = 0 Then
            cboWinder.Enabled = False
            cboWinder.CssClass = "form-select-disable"
        End If

        If cboBladeOperationBottom.SelectedIndex = 0 Then
            cboBladeOperationBottom.Enabled = False
            cboBladeOperationBottom.CssClass = "form-select-disable"
        End If

        If cboInsertBottom.SelectedIndex = 0 Then
            cboInsertBottom.Enabled = False
            cboInsertBottom.CssClass = "form-select-disable"
        End If

        If txtMidRailHeight.Text = String.Empty Then
            txtMidRailHeight.Enabled = False
            txtMidRailHeight.CssClass = "form-select-disable"
        End If

        If cboFlyScreen.SelectedIndex = 0 Then
            If cboFlyScreen.SelectedItem.Text = String.Empty Then
                If cboBiFoldHingedDoor.Enabled = True And cboBiFoldHingedDoor.SelectedValue = 2 Then
                    cboFlyScreen.Enabled = True
                    cboFlyScreen.CssClass = "form-select"
                Else
                    cboFlyScreen.Enabled = False
                    cboFlyScreen.CssClass = "form-select-disable"
                    If txtHiddenFlyScreen.Text <> String.Empty Then
                        cboFlyScreen.SelectedValue = txtHiddenFlyScreen.Text
                    End If
                End If
            Else
                cboFlyScreen.Enabled = True
                cboFlyScreen.CssClass = "form-select"
                If txtHiddenFlyScreen.Text <> String.Empty Then
                    cboFlyScreen.SelectedValue = txtHiddenFlyScreen.Text
                End If
            End If
        End If

        If cboInsertBottom.SelectedIndex = 0 Then
            cboInsertBottom.Enabled = False
            cboInsertBottom.CssClass = "form-select-disable"
        End If


        If cboFixedPanelSides.SelectedIndex = 0 Then
            cboFixedPanelSides.Enabled = False
            cboFixedPanelSides.CssClass = "form-select-disable"
        End If

        If cboCChannel.SelectedIndex = 0 Then
            cboCChannel.Enabled = False
            cboCChannel.CssClass = "form-select-disable"
        End If

    End Sub

    Protected Sub initCtrls()

        Dim service As New AppService

        Dim dtCustomers As DataTable = service.runSQLScheduling("Select CustomerID,CustomerName from tblCustomers where WholesaleLouvres=1 Order By CustomerName")
        Dim drow As DataRow = dtCustomers.NewRow
        drow("CustomerID") = 0
        drow("CustomerName") = ""
        dtCustomers.Rows.InsertAt(drow, 0)
        Me.cboCustomer.DataSource = dtCustomers
        Me.cboCustomer.DataValueField = "CustomerID"
        Me.cboCustomer.DataTextField = "CustomerName"
        Me.cboCustomer.DataBind()
        Me.cboCustomer.SelectedIndex = 0



        'setup order types list
        Dim dtOrderType As DataTable = createOrderTypeDatatable()
        Me.cboOrderType.DataSource = dtOrderType
        Me.cboOrderType.DataValueField = "OrderTypeID"
        Me.cboOrderType.DataTextField = "OrderType"
        Me.cboOrderType.DataBind()
        Me.cboOrderType.SelectedIndex = 0

        'setup priority list
        Dim dtPriority As DataTable = createPriorityDatatable()
        Me.cboPriority.DataSource = dtPriority
        Me.cboPriority.DataValueField = "PriorityID"
        Me.cboPriority.DataTextField = "PriorityName"
        Me.cboPriority.DataBind()
        Me.cboPriority.SelectedIndex = 0

        Dim dtColour As DataTable = service.runSQLScheduling("select * From dbo.tblColours where Discontinued=0 and ProductTypeID=" & Me.txtProductTypeID.Text & " Order By SortOrder ASC")
        drow = dtColour.NewRow
        drow("ColourID") = 0
        drow("ColourName") = ""
        dtColour.Rows.InsertAt(drow, 0)
        Me.cboJobColour.DataSource = dtColour
        Me.cboJobColour.DataValueField = "ColourID"
        Me.cboJobColour.DataTextField = "ColourName"
        Me.cboJobColour.DataBind()
        Me.cboJobColour.SelectedIndex = 0

        Dim dtColour1 As DataTable = dtColour.Copy
        Me.cboColour.DataSource = dtColour1
        Me.cboColour.DataValueField = "ColourID"
        Me.cboColour.DataTextField = "ColourName"
        Me.cboColour.DataBind()
        Me.cboColour.SelectedIndex = 0


        Dim dtStyle As DataTable = service.runSQLScheduling("select * from dbo.tblLouvreStyles where Discontinued=0 order by SortOrder ASC")
        drow = dtStyle.NewRow
        drow("StyleID") = 0
        drow("StyleName") = ""
        dtStyle.Rows.InsertAt(drow, 0)
        Me.cboJobStyle.DataSource = dtStyle
        Me.cboJobStyle.DataValueField = "StyleID"
        Me.cboJobStyle.DataTextField = "StyleName"
        Me.cboJobStyle.DataBind()
        Me.cboJobStyle.SelectedIndex = 0

        Dim dtStyle1 As DataTable = dtStyle.Copy
        Me.cboLouvreProd.DataSource = dtStyle1
        Me.cboLouvreProd.DataValueField = "StyleID"
        Me.cboLouvreProd.DataTextField = "StyleName"
        Me.cboLouvreProd.DataBind()
        Me.cboLouvreProd.SelectedIndex = 0


        Dim dtType As DataTable = service.runSQLScheduling("select * from dbo.tblJobTypes where Discontinued=0 order by SortOrder ASC")
        drow = dtType.NewRow
        drow("JobTypeID") = 0
        drow("JobTypeName") = ""
        dtType.Rows.InsertAt(drow, 0)
        Me.cboJobType.DataSource = dtType
        Me.cboJobType.DataValueField = "JobTypeID"
        Me.cboJobType.DataTextField = "JobTypeName"
        Me.cboJobType.DataBind()
        Me.cboJobType.SelectedIndex = 0


        Dim dtPowdercoater As DataTable = service.runSQLScheduling("select * from dbo.tblPowdercoater where Discontinued=0 Order By SortOrder ASC")
        drow = dtPowdercoater.NewRow
        drow("PowdercoaterID") = 0
        drow("PowdercoaterName") = ""
        dtPowdercoater.Rows.InsertAt(drow, 0)
        Me.cboPowdercoater.DataSource = dtPowdercoater
        Me.cboPowdercoater.DataValueField = "PowdercoaterID"
        Me.cboPowdercoater.DataTextField = "PowdercoaterName"
        Me.cboPowdercoater.DataBind()
        Me.cboPowdercoater.SelectedIndex = 0

        'hardcoded to exclude powdercoating for now
        Dim dtRequirementType As DataTable = service.runSQLScheduling("select * from dbo.tblAdditionalRequirementTypes where AdditionalRequirementTypeID<>1 and Discontinued=0 and ProductTypeID = " & Me.txtProductTypeID.Text & " Order By SortOrder ASC")
        drow = dtRequirementType.NewRow
        drow("AdditionalRequirementTypeID") = 0
        drow("RequirementTypeName") = ""
        dtRequirementType.Rows.InsertAt(drow, 0)
        Me.cboRequirementType.DataSource = dtRequirementType
        Me.cboRequirementType.DataValueField = "AdditionalRequirementTypeID"
        Me.cboRequirementType.DataTextField = "RequirementTypeName"
        Me.cboRequirementType.DataBind()
        Me.cboRequirementType.SelectedIndex = 0

        service = Nothing
        '
        '

    End Sub

    Protected Function createOrderTypeDatatable() As DataTable

        Dim dt As DataTable = New DataTable

        Dim col As DataColumn = New DataColumn
        col.ColumnName = "OrderTypeID"
        col.DataType = System.Type.GetType("System.Int32")
        dt.Columns.Add(col)
        col = Nothing

        col = New DataColumn
        col.ColumnName = "OrderType"
        col.DataType = System.Type.GetType("System.String")
        dt.Columns.Add(col)
        col = Nothing

        Dim drow As DataRow = dt.NewRow
        drow("OrderTypeID") = 0
        drow("OrderType") = String.Empty
        dt.Rows.Add(drow)
        drow = Nothing

        drow = dt.NewRow
        drow("OrderTypeID") = 1
        drow("OrderType") = "Order"
        dt.Rows.Add(drow)
        drow = Nothing

        drow = dt.NewRow
        drow("OrderTypeID") = 2
        drow("OrderType") = "Remake"
        dt.Rows.Add(drow)
        drow = Nothing

        drow = dt.NewRow
        drow("OrderTypeID") = 3
        drow("OrderType") = "Rectification"
        dt.Rows.Add(drow)
        drow = Nothing

        Return dt

    End Function

    Protected Function createPriorityDatatable() As DataTable

        Dim dt As DataTable = New DataTable

        Dim col As DataColumn = New DataColumn
        col.ColumnName = "PriorityID"
        col.DataType = System.Type.GetType("System.Int32")
        dt.Columns.Add(col)
        col = Nothing

        col = New DataColumn
        col.ColumnName = "PriorityName"
        col.DataType = System.Type.GetType("System.String")
        dt.Columns.Add(col)
        col = Nothing

        Dim drow As DataRow = dt.NewRow
        drow("PriorityID") = 0
        drow("PriorityName") = String.Empty
        dt.Rows.Add(drow)
        drow = Nothing

        drow = dt.NewRow
        drow("PriorityID") = 1
        drow("PriorityName") = "High"
        dt.Rows.Add(drow)
        drow = Nothing


        Return dt

    End Function

    Protected Sub copyLouvreJobDetailsFromMainToTemp()

        Dim intScheduleID As Integer = Constants.DEFAULT_INTEGER_VALUE

        If Me.txtId.Text <> String.Empty Then
            intScheduleID = CInt(Me.txtId.Text)

            Dim service As New AppService
            Dim dtMain As DataTable = service.getLouvreDetailsByProductionScheduleID(intScheduleID)

            If dtMain.Rows.Count > 0 Then

                Dim dbConn As New DBConnection
                Dim cnn As SqlConnection = dbConn.getSQLConnection_To_OzRollPlantationScheduling
                Dim trans As SqlTransaction = Nothing

                Dim bolSavedOK As Boolean = True

                Try
                    cnn.Open()
                    trans = cnn.BeginTransaction

                    For i As Integer = 0 To dtMain.Rows.Count - 1

                        Dim cLouvreDetails As LouvreDetails = service.setLouvreDetailsObjectFromDataRow(dtMain.Rows(i))

                        cLouvreDetails.TempGUID = Me.txtPSDetailGUID.Text
                        cLouvreDetails.OriginalLVDetailID = cLouvreDetails.LouvreDetailID

                        Dim intPSDetailID As Integer = service.addTempLouvreDetails(cLouvreDetails, cnn, trans)

                        If intPSDetailID = Constants.DEFAULT_INTEGER_VALUE Then
                            bolSavedOK = False
                            Exit For
                        End If
                    Next

                    If bolSavedOK Then
                        trans.Commit()
                    Else
                        trans.Rollback()
                    End If

                Catch ex As Exception
                    If Not trans Is Nothing Then
                        trans.Rollback()
                    End If
                    If cnn.State = ConnectionState.Open Then
                        cnn.Close()
                    End If
                    EventLog.addEventLogEmail(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name & ": " & System.Reflection.MethodBase.GetCurrentMethod().Name & " - " & ex.Message & Environment.NewLine & getPageInfo())
                    bolSavedOK = False
                Finally
                    trans.Dispose()
                    trans = Nothing
                    If cnn.State = ConnectionState.Open Then
                        cnn.Close()
                    End If
                    cnn.Dispose()
                    cnn = Nothing
                End Try

            End If
            dtMain.Dispose()
            dtMain = Nothing

            service = Nothing
        End If


    End Sub

    Protected Sub copyAdditionalRequirementsFromMainToTemp()

        Dim intScheduleID As Integer = Constants.DEFAULT_INTEGER_VALUE

        If Me.txtId.Text <> String.Empty Then
            intScheduleID = CInt(Me.txtId.Text)

            Dim service As New AppService
            Dim dtMain As DataTable = service.getAdditionalRequirementsByProductionScheduleID(intScheduleID)

            If dtMain.Rows.Count > 0 Then

                Dim dbConn As New DBConnection
                Dim cnn As SqlConnection = dbConn.getSQLConnection_To_OzRollPlantationScheduling
                Dim trans As SqlTransaction = Nothing

                Dim bolSavedOK As Boolean = True

                Try
                    cnn.Open()
                    trans = cnn.BeginTransaction

                    For i As Integer = 0 To dtMain.Rows.Count - 1

                        Dim cRequirements As AdditionalRequirements = service.setAdditionalRequirementsObjectFromDataRow(dtMain.Rows(i))

                        cRequirements.TempGUID = Me.txtPSDetailGUID.Text
                        cRequirements.OriginalAddRequirementsID = cRequirements.AdditionalRequirementsID

                        Dim intPSDetailID As Integer = service.addTempAddRequirementsRecord(cRequirements, cnn, trans)

                        If intPSDetailID = Constants.DEFAULT_INTEGER_VALUE Then
                            bolSavedOK = False
                            Exit For
                        End If
                    Next

                    If bolSavedOK Then
                        trans.Commit()
                    Else
                        trans.Rollback()
                    End If

                Catch ex As Exception
                    If Not trans Is Nothing Then
                        trans.Rollback()
                    End If
                    If cnn.State = ConnectionState.Open Then
                        cnn.Close()
                    End If
                    EventLog.addEventLogEmail(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name & ": " & System.Reflection.MethodBase.GetCurrentMethod().Name & " - " & ex.Message & Environment.NewLine & getPageInfo())
                    bolSavedOK = False
                Finally
                    trans.Dispose()
                    trans = Nothing
                    If cnn.State = ConnectionState.Open Then
                        cnn.Close()
                    End If
                    cnn.Dispose()
                    cnn = Nothing
                End Try

            End If
            dtMain.Dispose()
            dtMain = Nothing

            service = Nothing
        End If

    End Sub

    Protected Sub copyNotesFromMainToTemp()

        Dim intScheduleID As Integer = Constants.DEFAULT_INTEGER_VALUE

        If Me.txtId.Text <> String.Empty Then
            intScheduleID = CInt(Me.txtId.Text)

            Dim service As New AppService
            Dim dtMain As DataTable = service.runSQLScheduling("select * from dbo.tblProdScheduleNotes where ProdScheduleID = " & intScheduleID.ToString)

            If dtMain.Rows.Count > 0 Then

                Dim dbConn As New DBConnection
                Dim cnn As SqlConnection = dbConn.getSQLConnection_To_OzRollPlantationScheduling
                Dim trans As SqlTransaction = Nothing

                Dim bolSavedOK As Boolean = True

                Try
                    cnn.Open()
                    trans = cnn.BeginTransaction

                    For i As Integer = 0 To dtMain.Rows.Count - 1

                        Dim cNote As New ProdScheduleNote
                        cNote.ProdScheduleID = CInt(dtMain.Rows(i)("ProdScheduleID"))
                        cNote.NoteDetails = dtMain.Rows(i)("NoteDetails").ToString
                        cNote.NoteTypeID = CInt(dtMain.Rows(i)("NoteTypeID"))
                        cNote.UserID = CInt(dtMain.Rows(i)("UserID"))
                        cNote.EntryDate = CDate(dtMain.Rows(i)("EntryDate"))
                        cNote.VisibleToCustomer = CInt(dtMain.Rows(i)("VisibleToCustomer"))

                        bolSavedOK = service.addTempProdScheduleNotes(cNote, Me.txtPSDetailGUID.Text, False, cnn, trans)

                        If bolSavedOK = False Then
                            Exit For
                        End If

                    Next

                    If bolSavedOK Then
                        trans.Commit()
                    Else
                        trans.Rollback()
                    End If

                Catch ex As Exception
                    If Not trans Is Nothing Then
                        trans.Rollback()
                    End If
                    If cnn.State = ConnectionState.Open Then
                        cnn.Close()
                    End If
                    EventLog.addEventLogEmail(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name & ": " & System.Reflection.MethodBase.GetCurrentMethod().Name & " - " & ex.Message & Environment.NewLine & getPageInfo())
                    bolSavedOK = False
                Finally
                    trans.Dispose()
                    trans = Nothing
                    If cnn.State = ConnectionState.Open Then
                        cnn.Close()
                    End If
                    cnn.Dispose()
                    cnn = Nothing
                End Try

            End If
            dtMain.Dispose()
            dtMain = Nothing

            service = Nothing
        End If

    End Sub

    Private Sub otherDetails()

        'txtTotalPrice.Enabled = False
        'txtShutterPrice.Enabled = False
        'txtExtraPrice.Enabled = False

        'Tool Tips

        imgColour.ToolTip = "Colour Of Louvre, Standard and Premium"
        imgHeight.ToolTip = "The Height Of The Opening Or Make Size"
        imgWidth.ToolTip = "The Width Of The Opening Or Make Size"
        imgMakeOpenSize.ToolTip = "Opening Or Make"
        imgLouvreProd.ToolTip = "Product Type, DLi or CL"
        imgNoOfPanels.ToolTip = "The Number Of Panels"
        imgBladeSize.ToolTip = "Blade Size Of Louvre"
        imgEndCapColour.ToolTip = "End Cap Colour For Louvre"
        imgBladeClipColour.ToolTip = "Blade Clip Colour For Louvre"
        imgPileColour.ToolTip = "Pile Colour (Grey Or Black)"
        imgMidRailHeight.ToolTip = "Transom Desired Height"
        imgFlushBoltsTop.ToolTip = "Top Flush Bolt For Louvre"
        imgFlushBoltsBottom.ToolTip = "Bottom Flush Bolt For Louvre"
        imgLockOptions.ToolTip = "Lock Options For Louvre"
        imgBottomTrackType.ToolTip = "Desired Bottom Track DLi Or CL"
        imgBladeLocks.ToolTip = "Ability To Lock The Blades"
        imgCChannel.ToolTip = "C Channel For Louvre"
        imgHChannel.ToolTip = "H Channel For Louvre"
        imgLReveal.ToolTip = "L Reveal For Louvre"
        imgZReveal.ToolTip = "Z Reveal For Louvre"
        imgBladeOperation.ToolTip = "Blade Operation For Louvre"
        imgWinder.ToolTip = "Manual Winder For Louvre"
        imgFlyScreen.ToolTip = "Optional Fly Screen For Louvre"
        imgBladeOperationBottom.ToolTip = "Blade Operation Bottom"
        imgInsertTop.ToolTip = "Top Insert For Louvre"
        imgCurvedTrack.ToolTip = "Optional Curved Track"
        imgExtraTrack.ToolTip = "Extra Tracks For Louvre"
        imgSlide.ToolTip = "Slide Yes/No"
        imgInsertBottom.ToolTip = "Bottom Insert Of Louvre"
        imgStacker.ToolTip = "Stacker Details"
        imgTopTrackType.ToolTip = "Top Track Type DLi Or CL"
        imgFixedPanelSides.ToolTip = "Fixed Sides For Panel"
        imgShutterType.ToolTip = "Type Of Louvre BiFold, Stacker etc."
        imgSpecialRequirements.ToolTip = "Special Requirements"

        imgVerticalLeftInfo.ToolTip = "Louvre Open's Left"
        imgVerticalRightInfo.ToolTip = "Louvre Open's Right"

        'Added by Michael Behar 26/10/2017
        imgBiFoldHingedDoor.ToolTip = "Louvre Open In Or Out"

    End Sub


    Protected Sub populateDetails(ByVal intProdScheduleId As Integer)

        Dim intViewType As Integer = Constants.DEFAULT_INTEGER_VALUE

        If Not Request.QueryString.Count = 0 Then
            If Not IsNothing(Request.Params("ViewType")) Then
                intViewType = CInt(Request.Params("ViewType"))
            End If
        End If
        Me.txtViewType.Text = intViewType

        Dim service As New AppService

        Dim clsProdSchedule As ProductionSchedule = New ProductionSchedule
        If intViewType = 1 Then
            clsProdSchedule = service.getProdScheduleClsByID(intProdScheduleId)
        End If

        Me.txtId.Text = clsProdSchedule.ID
        Me.txtIntScheduleID.Text = clsProdSchedule.ID
        Me.txtEnteredDatetime.Enabled = False
        If clsProdSchedule.ID <> Constants.DEFAULT_INTEGER_VALUE Then

            Me.txtJobNumber.Text = clsProdSchedule.JobNumber
            Me.txtContractNumber.Text = clsProdSchedule.OrderReference


            Me.lblOzrollID.Text = clsProdSchedule.ShutterProNumber

            Me.cboCustomer.SelectedValue = clsProdSchedule.CustomerID
            cboCustomer_SelectedIndexChanged(Nothing, Nothing)

            Me.txtCustomerName.Text = clsProdSchedule.CustomerName

            Me.txtCustomerId.Text = Me.cboCustomer.SelectedValue


            Me.txtState.Text = clsProdSchedule.State

            Me.txtOzrollContract.Text = clsProdSchedule.OzrollContractNo

            '
            If intViewType = 1 Then
                If clsProdSchedule.EnteredDatetime <> Constants.DEFAULT_DATE_VALUE Then
                    Me.txtEnteredDatetime.Text = Format(clsProdSchedule.EnteredDatetime, "d MMM yyyy")
                Else
                    Me.txtEnteredDatetime.Text = Format(Now, "d MMM yyyy")
                End If
            End If

            If clsProdSchedule.OrderDate <> Constants.DEFAULT_DATE_VALUE Then
                Me.txtOrderDate.Text = Format(clsProdSchedule.OrderDate, "d MMM yyyy")
            End If

            If clsProdSchedule.CostPrice <> Constants.DEFAULT_DECIMAL_VALUE Then
                Me.txtCostPrice.Text = Format(clsProdSchedule.CostPrice, "currency")
            End If

            If clsProdSchedule.FreightAmount <> Constants.DEFAULT_DECIMAL_VALUE Then
                txtFreightTotal.Text = FormatCurrency(clsProdSchedule.FreightAmount, 2)
            End If

            If clsProdSchedule.TotalSQM <> Constants.DEFAULT_DECIMAL_VALUE Then
                Me.txtTotalSQM.Text = clsProdSchedule.TotalSQM
            End If
            If clsProdSchedule.TotalPanels <> Constants.DEFAULT_INTEGER_VALUE Then
                Me.txtTotalPanels.Text = clsProdSchedule.TotalPanels
            End If


            Dim dtLouvreSpecs As DataTable = service.getLouvreSpecsByProdSchID(intProdScheduleId)
            If dtLouvreSpecs.Rows.Count > 0 Then
                If Not IsDBNull(dtLouvreSpecs.Rows(0)("StyleID")) Then
                    Me.cboJobStyle.SelectedValue = dtLouvreSpecs.Rows(0)("StyleID")
                End If

                If Not IsDBNull(dtLouvreSpecs.Rows(0)("LouvreJobTypeID")) Then
                    Me.cboJobType.SelectedValue = dtLouvreSpecs.Rows(0)("LouvreJobTypeID")
                End If

                If Not IsDBNull(dtLouvreSpecs.Rows(0)("ColourID")) Then
                    Me.cboJobColour.SelectedValue = dtLouvreSpecs.Rows(0)("ColourID")
                End If

                If Not IsDBNull(dtLouvreSpecs.Rows(0)("CheckMeasureDate")) Then
                    Me.txtCheckMeasureDate.Text = Format(CDate(dtLouvreSpecs.Rows(0)("CheckMeasureDate")), "d MMM yyyy")
                End If

                If Not IsDBNull(dtLouvreSpecs.Rows(0)("CheckMeasureID")) Then
                    Me.cboCheckMeasure.SelectedValue = dtLouvreSpecs.Rows(0)("CheckMeasureID")
                End If

                If Not IsDBNull(dtLouvreSpecs.Rows(0)("InstallDate")) Then
                    Me.txtInstallDate.Text = Format(CDate(dtLouvreSpecs.Rows(0)("InstallDate")), "d MMM yyyy")
                End If

                If Not IsDBNull(dtLouvreSpecs.Rows(0)("InstallID")) Then
                    Me.cboInstaller.SelectedValue = dtLouvreSpecs.Rows(0)("InstallID")
                End If

            End If
            dtLouvreSpecs.Dispose()
            dtLouvreSpecs = Nothing

            If clsProdSchedule.PromisedDate <> Constants.DEFAULT_DATE_VALUE Then
                Me.txtPromisedDate.Text = Format(clsProdSchedule.PromisedDate, "d MMM yyyy")
            End If

            If clsProdSchedule.ExpectedShippingDate <> Constants.DEFAULT_DATE_VALUE Then
                Me.txtPlannedShippingDate.Text = Format(clsProdSchedule.ExpectedShippingDate, "d MMM yyyy")
            End If

            If clsProdSchedule.ActualShippingDate <> Constants.DEFAULT_DATE_VALUE Then
                Me.txtActualShippingDate.Text = Format(clsProdSchedule.ActualShippingDate, "d MMM yyyy")
            End If
            '
            If clsProdSchedule.OrderTypeID <> Constants.DEFAULT_INTEGER_VALUE Then
                Me.cboOrderType.SelectedValue = clsProdSchedule.OrderTypeID
            Else
                Me.cboOrderType.SelectedIndex = 0
            End If
            Me.cboOrderType_SelectedIndexChanged(Me, Nothing)

            If clsProdSchedule.PriorityLevel <> Constants.DEFAULT_INTEGER_VALUE Then
                Me.cboPriority.SelectedValue = clsProdSchedule.PriorityLevel
            Else
                Me.cboPriority.SelectedIndex = 0
            End If

            If clsProdSchedule.ScheduledDate <> Constants.DEFAULT_DATE_VALUE Then
                Me.txtScheduledDate.Text = Format(clsProdSchedule.ScheduledDate, "d MMM yyyy")
                Me.txtScheduledDate.Enabled = False
            End If

            If clsProdSchedule.ReceivedDate <> Constants.DEFAULT_DATE_VALUE Then
                Me.txtReceived.Text = Format(clsProdSchedule.ReceivedDate, "d MMM yyyy")
                Me.txtReceived.Enabled = False
            End If

            If clsProdSchedule.PickingDate <> Constants.DEFAULT_DATE_VALUE Then
                Me.txtPickingDate.Text = Format(clsProdSchedule.PickingDate, "d MMM yyyy")
                Me.txtPickingDate.Enabled = False
            End If

            'fill job stages dates
            Dim dtJobStages As DataTable = service.runSQLScheduling("select * from dbo.tblJobStages where ScheduleID=" & intProdScheduleId.ToString)
            If dtJobStages.Rows.Count > 0 Then
                For i As Integer = 0 To dtJobStages.Rows.Count - 1
                    If Not IsDBNull(dtJobStages.Rows(i)("CompletedDateTime")) Then
                        Select Case CInt(dtJobStages.Rows(i)("StageID").ToString)
                            Case 1
                                Me.txtCuttingDate.Text = CDate(dtJobStages.Rows(i)("CompletedDateTime")).ToString("d MMM yyyy")
                                Me.txtCuttingDate.Enabled = False
                            Case 2
                                Me.txtPrepDate.Text = CDate(dtJobStages.Rows(i)("CompletedDateTime")).ToString("d MMM yyyy")
                                Me.txtPrepDate.Enabled = False
                            Case 3
                                Me.txtAssemblyDate.Text = CDate(dtJobStages.Rows(i)("CompletedDateTime")).ToString("d MMM yyyy")
                                Me.txtAssemblyDate.Enabled = False
                            Case 4
                                'Me.txtFramingDate.Text = CDate(dtJobStages.Rows(i)("CompletedDateTime")).ToString("d MMM yyyy")
                                'Me.txtFramingDate.Enabled = False
                            Case 5
                                Me.txtQCDate.Text = CDate(dtJobStages.Rows(i)("CompletedDateTime")).ToString("d MMM yyyy")
                                Me.txtQCDate.Enabled = False
                            Case 6
                                'Me.txtWrappingDate.Text = CDate(dtJobStages.Rows(i)("CompletedDateTime")).ToString("d MMM yyyy")
                                'Me.txtWrappingDate.Enabled = False
                            Case 7
                                'despatch which is currently not used
                            Case 8
                                Me.txtPiningDate.Text = CDate(dtJobStages.Rows(i)("CompletedDateTime")).ToString("d MMM yyyy")
                                Me.txtPiningDate.Enabled = False
                            Case 9
                                Me.txtHingingDate.Text = CDate(dtJobStages.Rows(i)("CompletedDateTime")).ToString("d MMM yyyy")
                                Me.txtHingingDate.Enabled = False
                            Case 10
                                Me.txtPackupDate.Text = CDate(dtJobStages.Rows(i)("CompletedDateTime")).ToString("d MMM yyyy")
                                Me.txtPackupDate.Enabled = False
                            Case Else
                                'not implemented
                        End Select
                    End If
                Next
            End If
            dtJobStages.Dispose()
            dtJobStages = Nothing

            Dim bolCollectFromFactory As Boolean = False

            Dim dtCustomer As DataTable = service.runSQLScheduling("select * from dbo.tblCustomers where CustomeriD = " & clsProdSchedule.CustomerID)
            If dtCustomer.Rows.Count > 0 Then
                If Not IsDBNull(dtCustomer.Rows(0)("CollectionFromFactory")) Then
                    If CInt(dtCustomer.Rows(0)("CollectionFromFactory")) = 1 Then
                        bolCollectFromFactory = True
                    End If
                End If

                If Not IsDBNull(dtCustomer.Rows(0)("SybizCustomerID")) Then
                    Me.txtSybizCustomerID.Text = dtCustomer.Rows(0)("SybizCustomerID").ToString
                End If
            End If
            dtCustomer.Dispose()
            dtCustomer = Nothing

            If bolCollectFromFactory Then
                Me.lblPostProduction1.Text = "Invoice Date"
                Me.txtPostProduction1.Text = String.Empty
                If clsProdSchedule.InvoicedDate <> Constants.DEFAULT_DATE_VALUE Then
                    Me.txtPostProduction1.Text = Format(clsProdSchedule.InvoicedDate, "d MMM yyyy")
                    Me.txtPostProduction1.Enabled = False
                    Me.pnlCancellation.Visible = False
                End If

                Me.lblPostProduction2.Text = "Collect Date"
                Me.txtPostProduction2.Text = String.Empty
                If clsProdSchedule.CollectedFactoryDate <> Constants.DEFAULT_DATE_VALUE Then
                    Me.txtPostProduction2.Text = Format(clsProdSchedule.CollectedFactoryDate, "d MMM yyyy")
                    Me.txtPostProduction2.Enabled = False
                    Me.pnlCancellation.Visible = False
                End If
            Else
                Me.lblPostProduction1.Text = "Despatch Date"
                Me.txtPostProduction1.Text = String.Empty
                Dim dtDespatch As DataTable = service.runSQLScheduling("select * from dbo.tblJobStages where (StageID=7) and  (ScheduleID=" & intProdScheduleId.ToString & ")")
                If dtDespatch.Rows.Count > 0 Then
                    If Not IsDBNull(dtDespatch.Rows(0)("CompletedDateTime")) Then
                        Me.txtPostProduction1.Text = CDate(dtDespatch.Rows(0)("CompletedDateTime")).ToString("d MMM yyyy")
                        Me.txtPostProduction1.Enabled = False
                        Me.pnlCancellation.Visible = False
                    End If
                End If

                Me.lblPostProduction2.Text = "Invoice Date"
                Me.txtPostProduction2.Text = String.Empty
                If clsProdSchedule.InvoicedDate <> Constants.DEFAULT_DATE_VALUE Then
                    Me.txtPostProduction2.Text = Format(clsProdSchedule.InvoicedDate, "d MMM yyyy")
                    Me.txtPostProduction2.Enabled = False
                    Me.pnlCancellation.Visible = False
                End If
            End If

            'get status text
            Dim dtStatus As DataTable = service.runSQLScheduling("select * from dbo.tblStatus")
            If dtStatus.Rows.Count > 0 Then
                Dim drows() As DataRow = dtStatus.Select("StatusID=" & clsProdSchedule.OrderStatus.ToString)
                If drows.Length > 0 Then
                    Me.lblCurrentStatus.Text = drows(0)("StatusName").ToString
                End If
                drows = Nothing
            End If
            dtStatus.Dispose()
            dtStatus = Nothing

            If clsProdSchedule.OnHold = 1 Then
                Me.chkHoldJob.Checked = True
                Me.lblCurrentStatus.Text = "On Hold" & " - " & Me.lblCurrentStatus.Text
            End If

            setDateBoxDisabledOverrideBasedOnStatus(clsProdSchedule.OrderStatus)

            service = Nothing

            If clsProdSchedule.CompletedDate <> Constants.DEFAULT_DATE_VALUE Then
                Me.pnlCancellation.Visible = False
            End If

            If clsProdSchedule.OrderStatus = 8 Then
                disableAllControls()
            End If

            Me.pnlStopCustomer.Visible = False
            pnlAcceptanceAlert.Visible = False

            If clsProdSchedule.OrderStatus = 1 Then
                'customer credit/cod check
                If clsProdSchedule.CreditOverrideUserID = Constants.DEFAULT_INTEGER_VALUE Then
                    'if not already overridden - do check
                    If Me.txtSybizCustomerID.Text <> String.Empty Then
                        If checkSybizCustomerDetails() = True Then
                            Me.pnlStopCustomer.Visible = True
                        Else
                            Me.pnlStopCustomer.Visible = False
                        End If
                    End If
                End If

                If clsProdSchedule.OutstandingItemsConfirmID = Constants.DEFAULT_INTEGER_VALUE Then
                    'if not already overridden - do check
                    'if awaiting acceptance, get checklist to display
                    checkOutstandingItemsForAcceptance()

                    If Me.lblAcceptance.Text <> String.Empty Then
                        'make alert visible and button to view
                        Me.pnlAcceptanceAlert.Visible = True
                    Else
                        pnlAcceptanceAlert.Visible = False
                    End If
                End If
            Else
                pnlAcceptanceAlert.Visible = False
            End If

        Else
            'Me.lblStatus.Text = "No Records Found."
            Me.txtEnteredDatetime.Text = Format(Now, "d MMM yyyy")
            Me.cboOrderType.SelectedIndex = -1
            '
        End If

    End Sub

    Protected Sub btnSave_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnSave.Click

        Dim intScheduleID As Integer = Constants.DEFAULT_INTEGER_VALUE
        Dim intViewType As Integer = Constants.DEFAULT_INTEGER_VALUE

        If Me.txtViewType.Text <> String.Empty Then
            intViewType = CInt(Me.txtViewType.Text)
        End If
        If Me.txtId.Text <> String.Empty Then
            If CInt(Me.txtId.Text) > 0 Then
                intScheduleID = CInt(Me.txtId.Text)
            End If
        End If

        'If Not Request.QueryString.Count = 0 Then
        '    If Not IsNothing(Request.Params("ScheduleID")) Then
        '        intScheduleID = CInt(Request.Params("ScheduleID"))
        '    End If
        '    If Not IsNothing(Request.Params("ViewType")) Then
        '        intViewType = CInt(Request.Params("ViewType"))
        '    End If
        'End If

        Dim service As New AppService

        Dim bolContinue As Boolean = True
        Dim dbConn As New DBConnection
        Dim cnn As SqlConnection = dbConn.getSQLConnection_To_OzRollPlantationScheduling
        Dim trans As SqlTransaction = Nothing
        dbConn = Nothing
        btnSave.Enabled = False
        btnSave.CssClass = "form-button-disabled"
        lblStatus.Text = String.Empty

        Try

            cnn.Open()

            Dim dtLouvreSpecs As DataTable = service.getLouvreSpecsByProdSchID(intScheduleID)

            trans = cnn.BeginTransaction

            Dim intMaxChangeId As Integer = service.getProductScheduleHistoryNewChgID()

            Dim cProductionScheule As ProductionSchedule = service.getProdScheduleClsByID(intScheduleID, cnn, trans)
            Dim cNewProductionScheule As ProductionSchedule = CType(cProductionScheule.Clone, ProductionSchedule)

            'Dim cJobRegister As OSCJobRegister = service.getJobRegisterByJobRegisterID(intJobRegisterID)
            'Dim cNewJobRegister As OSCJobRegister = CType(cJobRegister.Clone, OSCJobRegister)

            updateProductionScheduleForSave(cNewProductionScheule)

            'True Here
            If bolContinue Then
                If intViewType = 1 Then
                    bolContinue = service.updateProductionScheduleByID(cNewProductionScheule, cnn, trans)
                    'bolContinue = service.updateJobRegisterRecord(cNewJobRegister, cnn, trans)
                Else
                    cNewProductionScheule.ProductTypeID = 2
                    'bolContinue = service.addProductionScheduleRecord(clsNewProdSchedule, cnn, trans)
                    cNewProductionScheule.ID = service.addProductionScheduleRecord(cNewProductionScheule, cnn, trans)
                    If cNewProductionScheule.ID = Constants.DEFAULT_INTEGER_VALUE Then
                        bolContinue = False
                    End If
                End If
            End If

            If bolContinue Then
                bolContinue = updateJobStages(cNewProductionScheule.ID, cnn, trans)
            End If

            If bolContinue Then
                'update louvre specs table
                Dim cLouvreSpecs As New LouvreSpecs
                Dim bolAdd As Boolean = False

                If dtLouvreSpecs.Rows.Count > 0 Then
                    cLouvreSpecs = service.getLouvreSpecsClassFromDatarow(dtLouvreSpecs.Rows(0))
                Else

                    'Dim dtTopValue As DataTable = service.runSQLScheduling("Select max(id) from tblProductionScheduleList")
                    'If dtTopValue.Rows.Count > 0 Then
                    '    Dim tempVal As Integer = dtTopValue.Rows(0).Item("ProductScheduleID")
                    '    cNewProductionScheule.ID = tempVal + 1
                    'End If
                    cLouvreSpecs.ProductScheduleID = cNewProductionScheule.ID
                    bolAdd = True
                End If

                cLouvreSpecs.ColourID = CInt(Me.cboJobColour.SelectedValue)
                cLouvreSpecs.StyleID = CInt(Me.cboJobStyle.SelectedValue)
                cLouvreSpecs.LouvreJobTypeID = CInt(Me.cboJobType.SelectedValue)

                If Me.txtCheckMeasureDate.Text <> String.Empty Then
                    cLouvreSpecs.CheckMeasureDate = CDate(Me.txtCheckMeasureDate.Text)
                Else
                    cLouvreSpecs.CheckMeasureDate = Constants.DEFAULT_DATE_VALUE
                End If
                If Me.cboCheckMeasure.SelectedIndex > 0 Then
                    cLouvreSpecs.CheckMeasureID = CInt(Me.cboCheckMeasure.SelectedValue)
                Else
                    cLouvreSpecs.CheckMeasureID = Constants.DEFAULT_INTEGER_VALUE
                End If
                If Me.txtInstallDate.Text <> String.Empty Then
                    cLouvreSpecs.InstallDate = CDate(Me.txtInstallDate.Text)
                Else
                    cLouvreSpecs.InstallDate = Constants.DEFAULT_DATE_VALUE
                End If
                If Me.cboInstaller.SelectedIndex > 0 Then
                    cLouvreSpecs.InstallID = CInt(Me.cboInstaller.SelectedValue)
                Else
                    cLouvreSpecs.InstallID = Constants.DEFAULT_INTEGER_VALUE
                End If

                'update database
                If bolAdd Then
                    bolContinue = service.AddLouvreSpecs(cLouvreSpecs, cnn, trans)
                Else
                    bolContinue = service.updateLouvreSpecs(cLouvreSpecs, cnn, trans)
                End If

            End If

            dtLouvreSpecs.Dispose()
            dtLouvreSpecs = Nothing

            If intViewType = 1 And bolContinue Then
                '
                bolContinue = service.addProdScheduleHistoryRcd(0, cProductionScheule, cnn, trans)
                '
            End If


            'update details records from temp back to main
            If bolContinue Then

                Dim dtTemp As DataTable = service.getTempLouvreJobDetailsRecordsByTempGUID(Me.txtPSDetailGUID.Text, cnn, trans)
                If dtTemp.Rows.Count > 0 Then
                    For i As Integer = 0 To dtTemp.Rows.Count - 1

                        Dim cLouvreDetails As LouvreDetails = service.setLouvreDetailsObjectFromDataRow(dtTemp.Rows(i))

                        If cLouvreDetails.OriginalLVDetailID = Constants.DEFAULT_INTEGER_VALUE Then
                            'add new
                            cLouvreDetails.ProductionScheduleID = cNewProductionScheule.ID
                            cLouvreDetails.LouvreDetailID = Constants.DEFAULT_INTEGER_VALUE
                            Dim intNewPSDetailsID As Integer = service.addLouvreDetails(cLouvreDetails, cnn, trans)
                            If intNewPSDetailsID = Constants.DEFAULT_INTEGER_VALUE Then
                                bolContinue = False
                            End If
                        Else
                            'update existing
                            cLouvreDetails.LouvreDetailID = cLouvreDetails.OriginalLVDetailID
                            bolContinue = service.updateLouvreDetails(cLouvreDetails, cnn, trans)
                        End If

                        If bolContinue = False Then
                            Exit For
                        End If

                    Next
                End If
                dtTemp.Dispose()
                dtTemp = Nothing

            End If


            'copy any additional requirements back to main from temp (including powdercoating)
            If bolContinue Then

                Dim dtTemp As DataTable = service.runSQLScheduling("select * from dbo.tblTempAddRequirements where TempGUID='" & Me.txtPSDetailGUID.Text & "'", cnn, trans)
                If dtTemp.Rows.Count > 0 Then
                    For i As Integer = 0 To dtTemp.Rows.Count - 1

                        Dim cRequirements As AdditionalRequirements = service.setAdditionalRequirementsObjectFromDataRow(dtTemp.Rows(i))

                        If cRequirements.OriginalAddRequirementsID = Constants.DEFAULT_INTEGER_VALUE Then
                            'add new
                            cRequirements.ProductionScheduleID = cNewProductionScheule.ID
                            cRequirements.AdditionalRequirementsID = Constants.DEFAULT_INTEGER_VALUE
                            Dim intNewPSDetailsID As Integer = service.addAdditionalRequirementsRecord(cRequirements, cnn, trans)
                            If intNewPSDetailsID = Constants.DEFAULT_INTEGER_VALUE Then
                                bolContinue = False
                            End If
                        Else
                            'update existing
                            cRequirements.AdditionalRequirementsID = cRequirements.OriginalAddRequirementsID
                            bolContinue = service.updateAdditionalRequirementsRecord(cRequirements, cnn, trans)
                        End If

                        If bolContinue = False Then
                            Exit For
                        End If

                    Next
                End If
                dtTemp.Dispose()
                dtTemp = Nothing

            End If


            'copy any New notes from tempnotes into mainnotes
            If bolContinue Then
                Dim dtTemp As DataTable = service.runSQLScheduling("select * from dbo.tblTempProdScheduleNotes where TempGUID='" & Me.txtPSDetailGUID.Text & "' and NewNote=1", cnn, trans)
                For i As Integer = 0 To dtTemp.Rows.Count - 1
                    Dim cNote As New ProdScheduleNote
                    cNote.ProdScheduleID = cNewProductionScheule.ID
                    cNote.NoteDetails = dtTemp.Rows(i)("NoteDetails").ToString
                    cNote.NoteTypeID = CInt(dtTemp.Rows(i)("NoteTypeID"))
                    cNote.UserID = CInt(dtTemp.Rows(i)("UserID"))
                    cNote.EntryDate = CDate(dtTemp.Rows(i)("EntryDate"))
                    cNote.VisibleToCustomer = CInt(dtTemp.Rows(i)("VisibleToCustomer"))

                    bolContinue = service.addProdScheduleNoteRcd(cNote, cnn, trans)

                    If bolContinue = False Then
                        Exit For
                    End If
                Next
                dtTemp.Dispose()
                dtTemp = Nothing
            End If


            'check and add job to sybiz job costing
            If bolContinue Then
                'if job is being accepted into production and not already entered into job costing in sybiz, then continue
                If cProductionScheule.OrderStatus = 1 And cNewProductionScheule.OrderStatus <> 1 Then
                    Dim SQlStr As String = "select CustomerOrderNumber from jc.Job where CustomerOrderNumber = '"
                    SQlStr += lblOzrollID.Text + "'"
                    Dim dt1 As DataTable = service.runSQLOzrollSybiz(SQlStr)
                    If dt1.Rows.Count() = 0 Then
                        bolContinue = SyBizAdd(cnn, trans)
                    End If
                    dt1.Dispose()
                    dt1 = Nothing
                End If
            End If


            If bolContinue Then
                trans.Commit()

                clearTempNotesRecords()
                clearTempDetailsRecords()

                If TypeOf (sender) Is Button Then
                    Dim btn As Button = CType(sender, Button)
                    If btn.ID = "btnSave" Then
                        Response.Redirect("ProductionScheduleList.aspx?" & Request.QueryString.ToString, False)
                    ElseIf btn.ID = "btnCancellation" Then
                        Response.Redirect("ConfirmCancelJob.aspx?" & Request.QueryString.ToString, False)
                    Else
                        Response.Redirect("LouvreJobDetails.aspx?" & Request.QueryString.ToString, False)
                    End If
                ElseIf TypeOf (sender) Is TextBox Then
                    Response.Redirect("LouvreJobDetails.aspx?" & Request.QueryString.ToString, False)
                End If

            Else
                'EventLog.addEventLogEmail(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name & ": " & System.Reflection.MethodBase.GetCurrentMethod().Name & " - Transaction Rolled Back" & Environment.NewLine & getPageInfo())
                trans.Rollback()
                If lblStatus.Text = String.Empty Then
                    lblStatus.Text = "Error saving details. Please try again."
                End If
                btnSave.Enabled = True
                btnSave.CssClass = "form-button"
                btnCancel.Enabled = True
                btnCancel.CssClass = "form-button"
            End If

        Catch ex As Exception
            If Not trans Is Nothing Then
                trans.Rollback()
            End If
            If cnn.State = ConnectionState.Open Then
                cnn.Close()
            End If
            EventLog.addEventLogEmail(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name & ": " & System.Reflection.MethodBase.GetCurrentMethod().Name & " - " & ex.Message & Environment.NewLine & getPageInfo())
            bolContinue = False
        Finally
            trans.Dispose()
            trans = Nothing
            If cnn.State = ConnectionState.Open Then
                cnn.Close()
            End If
            cnn.Dispose()
            cnn = Nothing
        End Try
        dbConn = Nothing
        service = Nothing

        If bolContinue = False Then
            If TypeOf (sender) Is Button Then
                Dim btn As Button = CType(sender, Button)
                If btn.ID = "btnSave" Then
                    btnSave.Enabled = True
                    btnSave.CssClass = "form-button"
                    btnCancel.Enabled = True
                    btnCancel.CssClass = "form-button"
                Else
                    Response.Redirect("LouvreJobDetails.aspx?" & Request.QueryString.ToString, False)
                End If
            Else
                Response.Redirect("LouvreJobDetails.aspx?" & Request.QueryString.ToString, False)
            End If
        End If

    End Sub

    Protected Function updateJobStages(intScheduleId As Integer, cnn As SqlConnection, ByRef trans As SqlTransaction) As Boolean
        Dim bolSavedOK As Boolean = True

        Dim service As New AppService

        Dim dt As DataTable = service.runSQLScheduling("select * from dbo.tblJobStages where ScheduleID = " & intScheduleId.ToString, cnn, trans)
        For i As Integer = 1 To 10

            Dim drows() As DataRow = dt.Select("StageID=" & i.ToString)
            Dim txt As TextBox
            Select Case i
                Case 1 'cutting
                    txt = Me.txtCuttingDate
                Case 2 'prep
                    txt = Me.txtPrepDate
                Case 3 'assembly
                    txt = Me.txtAssemblyDate
                Case 4 'framing
                    'txt = Me.txtFramingDate
                Case 5 'qc
                    txt = Me.txtQCDate
                Case 6 'wrapping
                    'txt = Me.txtWrappingDate
                Case 7
                    'despatch is handled below - do nothing here
                Case 8
                    txt = Me.txtPiningDate
                Case 9
                    txt = Me.txtHingingDate
                Case 10
                    txt = Me.txtPackupDate
                Case Else
                    'shouldn't happen
            End Select

            If Not IsNothing(txt) Then
                If drows.Length = 0 Then
                    'add record regardless
                    Dim jStage As JobStages = New JobStages
                    jStage.ScheduleID = intScheduleId
                    jStage.StageID = i
                    If txt.Text = String.Empty Then
                        jStage.StageStatus = 0
                    Else
                        jStage.StageStatus = 3
                        jStage.CompletedDateTime = CDate(txt.Text)
                        jStage.CompletedByID = CInt(Session("sessUserID"))
                    End If

                    Dim intID As Integer = service.addJobStages(jStage, cnn, trans)
                    If intID = Constants.DEFAULT_INTEGER_VALUE Then
                        bolSavedOK = False
                        Exit For
                    End If
                    bolSavedOK = service.addJobStagesHistoryRecord(jStage, CInt(Session("sessUserID")), cnn, trans)
                    If bolSavedOK = False Then
                        Exit For
                    End If
                Else
                    If txt.Enabled = True Then
                        Dim jStage As JobStages = New JobStages
                        jStage.JobStagesID = CInt(drows(0)("JobStagesID"))
                        jStage.ScheduleID = CInt(drows(0)("ScheduleID"))
                        jStage.StageID = CInt(drows(0)("StageID"))
                        jStage.StageStatus = CInt(drows(0)("StageStatus"))
                        If jStage.StageStatus = 3 Then
                            jStage.CompletedDateTime = CDate(drows(0)("CompletedDateTime"))
                            If Not IsDBNull(drows(0)("CompletedByID")) Then
                                jStage.CompletedByID = CInt(drows(0)("CompletedByID"))
                            End If
                        End If

                        If txt.Text <> String.Empty Then
                            jStage.StageStatus = 3
                            jStage.CompletedDateTime = CDate(txt.Text)
                            jStage.CompletedByID = CInt(Session("sessUserID"))
                        Else
                            jStage.StageStatus = 0
                            jStage.CompletedDateTime = Constants.DEFAULT_DATE_VALUE
                            jStage.CompletedByID = Constants.DEFAULT_INTEGER_VALUE
                        End If

                        bolSavedOK = service.updateJobStages(jStage, cnn, trans)
                        If bolSavedOK = False Then
                            Exit For
                        End If
                        bolSavedOK = service.addJobStagesHistoryRecord(jStage, CInt(Session("sessUserID")), cnn, trans)
                        If bolSavedOK = False Then
                            Exit For
                        End If
                    End If
                End If
            End If

            drows = Nothing
            txt = Nothing

        Next

        If bolSavedOK Then
            Dim bolCollectFromFactory As Boolean = False
            Dim dtCustomer As DataTable = service.runSQLScheduling("select * from dbo.tblCustomers where CustomeriD=" & Me.cboCustomer.SelectedValue.ToString, cnn, trans)
            If dtCustomer.Rows.Count > 0 Then
                If Not IsDBNull(dtCustomer.Rows(0)("CollectionFromFactory")) Then
                    If CInt(dtCustomer.Rows(0)("CollectionFromFactory")) = 1 Then
                        bolCollectFromFactory = True
                    End If
                End If
            End If
            dtCustomer.Dispose()
            dtCustomer = Nothing

            If bolCollectFromFactory = False Then

                'update despatch
                Dim drows() As DataRow = dt.Select("StageID=7")
                If drows.Length = 0 Then
                    'add record regardless
                    Dim jStage As JobStages = New JobStages
                    jStage.ScheduleID = intScheduleId
                    jStage.StageID = 7
                    If Me.txtPostProduction1.Text = String.Empty Then
                        jStage.StageStatus = 0
                    Else
                        jStage.StageStatus = 3
                        jStage.CompletedDateTime = CDate(Me.txtPostProduction1.Text)
                        jStage.CompletedByID = CInt(Session("sessUserID"))
                    End If

                    Dim intID As Integer = service.addJobStages(jStage, cnn, trans)
                    If intID = Constants.DEFAULT_INTEGER_VALUE Then
                        bolSavedOK = False
                    End If
                    If bolSavedOK Then
                        bolSavedOK = service.addJobStagesHistoryRecord(jStage, CInt(Session("sessUserID")), cnn, trans)
                    End If
                Else
                    If Me.txtPostProduction1.Enabled = True Then
                        Dim jStage As JobStages = New JobStages
                        jStage.JobStagesID = CInt(drows(0)("JobStagesID"))
                        jStage.ScheduleID = CInt(drows(0)("ScheduleID"))
                        jStage.StageID = CInt(drows(0)("StageID"))
                        jStage.StageStatus = CInt(drows(0)("StageStatus"))
                        If jStage.StageStatus = 3 Then
                            jStage.CompletedDateTime = CDate(drows(0)("CompletedDateTime"))
                            If Not IsDBNull(drows(0)("CompletedByID")) Then
                                jStage.CompletedByID = CInt(drows(0)("CompletedByID"))
                            End If
                        End If

                        If Me.txtPostProduction1.Text <> String.Empty Then
                            jStage.StageStatus = 3
                            jStage.CompletedDateTime = CDate(Me.txtPostProduction1.Text)
                            jStage.CompletedByID = CInt(Session("sessUserID"))
                        Else
                            jStage.StageStatus = 0
                            jStage.CompletedDateTime = Constants.DEFAULT_DATE_VALUE
                            jStage.CompletedByID = Constants.DEFAULT_INTEGER_VALUE
                        End If

                        bolSavedOK = service.updateJobStages(jStage, cnn, trans)
                        If bolSavedOK Then
                            bolSavedOK = service.addJobStagesHistoryRecord(jStage, CInt(Session("sessUserID")), cnn, trans)
                        End If
                    End If
                End If
                drows = Nothing

            End If
        End If
        dt.Dispose()
        dt = Nothing

        service = Nothing

        Return bolSavedOK

    End Function

    Protected Sub btnCancel_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnCancel.Click

        clearTempDetailsRecords()
        clearTempNotesRecords()

        Response.Redirect("ProductionScheduleList.aspx?" & Request.QueryString.ToString, False)

    End Sub

    Protected Sub clearTempDetailsRecords()

        Dim service As New AppService
        Dim TempDir As String = Server.MapPath("~/UpLoadedFiles/") + txtTempFolder.Text
        service.executeSQLScheduling("delete from dbo.tblTempLouvreDetails where TempGUID = '" & Me.txtPSDetailGUID.Text & "'")
        service = Nothing
        ViewState("DTUploadFiles") = Nothing

        If Directory.Exists(TempDir) Then
            For Each _file As String In Directory.GetFiles(TempDir)
                File.Delete(_file)
            Next

            'Dim AllFiles As System.IO.FileInfo = New IO.FileInfo(TempDir)
            'AllFiles.Delete()
            Directory.Delete(TempDir)
        End If


    End Sub

    Protected Sub clearTempNotesRecords()

        Dim service As New AppService
        service.executeSQLScheduling("delete from dbo.tblTempProdScheduleNotes where TempGUID = '" & Me.txtPSDetailGUID.Text & "'")
        service = Nothing

    End Sub

    Protected Sub updateProductionScheduleForSave(ByRef cNewProductionSchedule As ProductionSchedule)

        Dim service As New AppService
        If CInt(Me.txtViewType.Text) = 1 Then
            cNewProductionSchedule.ID = Me.txtId.Text
            cNewProductionSchedule.JobNumber = Me.txtJobNumber.Text
        End If
        cNewProductionSchedule.OrderReference = Me.txtContractNumber.Text
        'dtCustomers = service.runSQLScheduling("Select CustomerID,CustomerName from tblCustomers Order By SortOrder")
        'Dim dwTMPs() As DataRow = dtCustomers.Select("CustomerName='" & Me.cboCustomer.SelectedItem.Text & "'")
        'If dwTMPs.Length > 0 Then
        '    clsNewProdSchedule.CustomerID = dwTMPs(0)("CustomerID")
        'End If
        'clsNewProdSchedule.Customer = Me.cboCustomer.SelectedItem.Text


        If Me.cboCustomer.SelectedIndex > -1 Then
            cNewProductionSchedule.CustomerID = Me.cboCustomer.SelectedValue
        End If

        cNewProductionSchedule.CustomerName = Trim(Me.txtCustomerName.Text)

        cNewProductionSchedule.EnteredDatetime = CDate(Me.txtEnteredDatetime.Text)
        If Me.txtState.Text <> String.Empty Then
            cNewProductionSchedule.State = Me.txtState.Text
        Else
            cNewProductionSchedule.State = String.Empty
        End If

        cNewProductionSchedule.OzrollContractNo = Me.txtOzrollContract.Text

        If (txtOrderDate.Text = String.Empty) Then
            cNewProductionSchedule.OrderDate = Date.Now()
        Else
            cNewProductionSchedule.OrderDate = CDate(Me.txtOrderDate.Text)
        End If


        If Me.txtCostPrice.Text <> String.Empty Then
            cNewProductionSchedule.CostPrice = CDec(Me.txtCostPrice.Text)
        Else
            cNewProductionSchedule.CostPrice = Constants.DEFAULT_DECIMAL_VALUE
        End If

        If txtFreightTotal.Text <> String.Empty Then
            cNewProductionSchedule.FreightAmount = CDec(txtFreightTotal.Text)
        Else
            cNewProductionSchedule.FreightAmount = Constants.DEFAULT_DECIMAL_VALUE
        End If

        If Me.txtTotalSQM.Text <> String.Empty Then
            cNewProductionSchedule.TotalSQM = CDec(Me.txtTotalSQM.Text)
        Else
            cNewProductionSchedule.TotalSQM = Constants.DEFAULT_DECIMAL_VALUE
        End If
        If Me.txtTotalPanels.Text <> String.Empty Then
            cNewProductionSchedule.TotalPanels = CInt(Me.txtTotalPanels.Text)
        Else
            cNewProductionSchedule.TotalPanels = Constants.DEFAULT_INTEGER_VALUE
        End If


        'If Me.txtPlannedShippingDate.Text <> String.Empty Then
        '    clsNewProdSchedule.PlannedShippingDate = CStr(Me.txtPlannedShippingDate.Text)
        'End If
        If Me.txtPromisedDate.Text <> String.Empty Then
            cNewProductionSchedule.PromisedDate = CDate(Me.txtPromisedDate.Text)
        Else
            cNewProductionSchedule.ActualShippingDate = Constants.DEFAULT_DATE_VALUE
        End If

        If Me.txtPlannedShippingDate.Text <> String.Empty Then
            cNewProductionSchedule.ExpectedShippingDate = CDate(Me.txtPlannedShippingDate.Text)
        Else
            cNewProductionSchedule.ExpectedShippingDate = Constants.DEFAULT_DATE_VALUE
        End If

        If Me.txtActualShippingDate.Text <> String.Empty Then
            cNewProductionSchedule.ActualShippingDate = CDate(Me.txtActualShippingDate.Text)
        Else
            cNewProductionSchedule.ActualShippingDate = Constants.DEFAULT_DATE_VALUE
        End If
        ''

        If Me.txtScheduledDate.Text <> String.Empty Then
            cNewProductionSchedule.ScheduledDate = CDate(Me.txtScheduledDate.Text)
        Else
            cNewProductionSchedule.ScheduledDate = Constants.DEFAULT_DATE_VALUE
        End If

        If Me.cboOrderType.SelectedIndex > 0 Then
            cNewProductionSchedule.OrderTypeID = CInt(Me.cboOrderType.SelectedValue)
        End If

        If Me.cboPriority.SelectedIndex > 0 Then
            cNewProductionSchedule.PriorityLevel = CInt(Me.cboPriority.SelectedValue)
        Else
            cNewProductionSchedule.PriorityLevel = Constants.DEFAULT_INTEGER_VALUE
        End If

        Dim bolCollectFromFactory As Boolean = False
        Dim dtCustomer As DataTable = service.runSQLScheduling("select * from dbo.tblCustomers where CustomeriD=" & Me.cboCustomer.SelectedValue.ToString)
        If dtCustomer.Rows.Count > 0 Then
            If Not IsDBNull(dtCustomer.Rows(0)("CollectionFromFactory")) Then
                If CInt(dtCustomer.Rows(0)("CollectionFromFactory")) = 1 Then
                    bolCollectFromFactory = True
                End If
            End If
        End If
        dtCustomer.Dispose()
        dtCustomer = Nothing

        If bolCollectFromFactory Then
            If Me.txtPostProduction1.Text <> String.Empty Then
                cNewProductionSchedule.InvoicedDate = CDate(Me.txtPostProduction1.Text)
            Else
                cNewProductionSchedule.InvoicedDate = Constants.DEFAULT_DATE_VALUE
            End If

            If Me.txtPostProduction2.Text <> String.Empty Then
                cNewProductionSchedule.CollectedFactoryDate = CDate(Me.txtPostProduction2.Text)
                cNewProductionSchedule.CompletedDate = DateTime.Now
            Else
                cNewProductionSchedule.CollectedFactoryDate = Constants.DEFAULT_DATE_VALUE
                cNewProductionSchedule.CompletedDate = Constants.DEFAULT_DATE_VALUE
            End If
        Else
            'despatch is first - handle separately

            If Me.txtPostProduction2.Text <> String.Empty Then
                cNewProductionSchedule.InvoicedDate = CDate(Me.txtPostProduction2.Text)
                cNewProductionSchedule.CompletedDate = DateTime.Now
            Else
                cNewProductionSchedule.InvoicedDate = Constants.DEFAULT_DATE_VALUE
                cNewProductionSchedule.CompletedDate = Constants.DEFAULT_DATE_VALUE
            End If
        End If

        If Me.chkHoldJob.Checked = True Then
            cNewProductionSchedule.OnHold = 1
        Else
            cNewProductionSchedule.OnHold = 0
        End If

        If Me.txtReceived.Text <> String.Empty Then
            cNewProductionSchedule.ReceivedDate = CDate(Me.txtReceived.Text)
        Else
            cNewProductionSchedule.ReceivedDate = Constants.DEFAULT_DATE_VALUE
        End If

        If Me.txtPickingDate.Text <> String.Empty Then
            cNewProductionSchedule.PickingDate = CDate(Me.txtPickingDate.Text)
        Else
            cNewProductionSchedule.PickingDate = Constants.DEFAULT_DATE_VALUE
        End If

        'If Me.txtFreightAmount.Text <> String.Empty Then
        '    clsNewProdSchedule.FreightAmount = CDec(Me.txtFreightAmount.Text)
        'Else
        '    clsNewProdSchedule.FreightAmount = Constants.DEFAULT_DECIMAL_VALUE
        'End If

        cNewProductionSchedule.OrderStatus = calculateStatus()

        cNewProductionSchedule.ProductTypeID = CInt(Me.txtProductTypeID.Text)

        cNewProductionSchedule.DeliveryAddressID = cboDeliveryAddress.SelectedValue

        service = Nothing


    End Sub

    Protected Sub processClearButton(sender As Object, e As System.EventArgs) Handles btnClearReceived.Click, btnClearScheduled.Click,
                              btnClearCutting.Click, btnClearPrep.Click, btnClearAssembly.Click, btnClearQC.Click,
                              btnClearPostProduction1.Click, btnClearPostProduction2.Click, btnClearPicking.Click, btnClearCM.Click, btnClearInstall.Click,
                              btnClearPining.Click, btnClearHinging.Click, btnClearPackup.Click

        Dim btn As Button = CType(sender, Button)
        Select Case btn.ID
            Case "btnClearReceived"
                Me.txtReceived.Text = String.Empty

                Me.txtCheckMeasureDate.Text = String.Empty
                Me.txtPickingDate.Text = String.Empty
                Me.txtScheduledDate.Text = String.Empty
                Me.txtCuttingDate.Text = String.Empty
                Me.txtPiningDate.Text = String.Empty
                Me.txtPrepDate.Text = String.Empty
                Me.txtAssemblyDate.Text = String.Empty
                Me.txtHingingDate.Text = String.Empty
                Me.txtPackupDate.Text = String.Empty
                Me.txtQCDate.Text = String.Empty
                Me.txtInstallDate.Text = String.Empty
                Me.txtPostProduction1.Text = String.Empty
                Me.txtPostProduction2.Text = String.Empty

                Me.txtReceived.Enabled = True

            Case "btnClearCM"
                Me.txtCheckMeasureDate.Text = String.Empty

                Me.txtPickingDate.Text = String.Empty
                Me.txtScheduledDate.Text = String.Empty
                Me.txtCuttingDate.Text = String.Empty
                Me.txtPiningDate.Text = String.Empty
                Me.txtPrepDate.Text = String.Empty
                Me.txtAssemblyDate.Text = String.Empty
                Me.txtHingingDate.Text = String.Empty
                Me.txtPackupDate.Text = String.Empty
                Me.txtQCDate.Text = String.Empty
                Me.txtInstallDate.Text = String.Empty
                Me.txtPostProduction1.Text = String.Empty
                Me.txtPostProduction2.Text = String.Empty

                Me.txtCheckMeasureDate.Enabled = True
            Case "btnClearPicking"
                Me.txtPickingDate.Text = String.Empty

                Me.txtScheduledDate.Text = String.Empty
                Me.txtCuttingDate.Text = String.Empty
                Me.txtPiningDate.Text = String.Empty
                Me.txtPrepDate.Text = String.Empty
                Me.txtAssemblyDate.Text = String.Empty
                Me.txtHingingDate.Text = String.Empty
                Me.txtPackupDate.Text = String.Empty
                Me.txtQCDate.Text = String.Empty
                Me.txtInstallDate.Text = String.Empty
                Me.txtPostProduction1.Text = String.Empty
                Me.txtPostProduction2.Text = String.Empty

                Me.txtPickingDate.Enabled = True
            Case "btnClearScheduled"
                Me.txtScheduledDate.Text = String.Empty

                Me.txtCuttingDate.Text = String.Empty
                Me.txtPiningDate.Text = String.Empty
                Me.txtPrepDate.Text = String.Empty
                Me.txtAssemblyDate.Text = String.Empty
                Me.txtHingingDate.Text = String.Empty
                Me.txtPackupDate.Text = String.Empty
                Me.txtQCDate.Text = String.Empty
                Me.txtInstallDate.Text = String.Empty
                Me.txtPostProduction1.Text = String.Empty
                Me.txtPostProduction2.Text = String.Empty

                Me.txtScheduledDate.Enabled = True
            Case "btnClearCutting"
                Me.txtCuttingDate.Text = String.Empty

                Me.txtPiningDate.Text = String.Empty
                Me.txtPrepDate.Text = String.Empty
                Me.txtAssemblyDate.Text = String.Empty
                Me.txtHingingDate.Text = String.Empty
                Me.txtPackupDate.Text = String.Empty
                Me.txtQCDate.Text = String.Empty
                Me.txtInstallDate.Text = String.Empty
                Me.txtPostProduction1.Text = String.Empty
                Me.txtPostProduction2.Text = String.Empty

                Me.txtCuttingDate.Enabled = True
            Case "btnClearPining"

                Me.txtPiningDate.Text = String.Empty
                Me.txtPrepDate.Text = String.Empty
                Me.txtAssemblyDate.Text = String.Empty
                Me.txtHingingDate.Text = String.Empty
                Me.txtPackupDate.Text = String.Empty
                Me.txtQCDate.Text = String.Empty
                Me.txtInstallDate.Text = String.Empty
                Me.txtPostProduction1.Text = String.Empty
                Me.txtPostProduction2.Text = String.Empty

                Me.txtPiningDate.Enabled = True
            Case "btnClearPrep"
                Me.txtPrepDate.Text = String.Empty

                Me.txtAssemblyDate.Text = String.Empty
                Me.txtHingingDate.Text = String.Empty
                Me.txtPackupDate.Text = String.Empty
                Me.txtQCDate.Text = String.Empty
                Me.txtInstallDate.Text = String.Empty
                Me.txtPostProduction1.Text = String.Empty
                Me.txtPostProduction2.Text = String.Empty

                Me.txtPrepDate.Enabled = True
            Case "btnClearAssembly"
                Me.txtAssemblyDate.Text = String.Empty

                Me.txtHingingDate.Text = String.Empty
                Me.txtPackupDate.Text = String.Empty
                Me.txtQCDate.Text = String.Empty
                Me.txtInstallDate.Text = String.Empty
                Me.txtPostProduction1.Text = String.Empty
                Me.txtPostProduction2.Text = String.Empty

                Me.txtAssemblyDate.Enabled = True
            Case "btnClearHinging"
                Me.txtHingingDate.Text = String.Empty
                Me.txtPackupDate.Text = String.Empty
                Me.txtQCDate.Text = String.Empty
                Me.txtInstallDate.Text = String.Empty
                Me.txtPostProduction1.Text = String.Empty
                Me.txtPostProduction2.Text = String.Empty

                Me.txtHingingDate.Enabled = True
            Case "btnClearPackup"
                Me.txtPackupDate.Text = String.Empty
                Me.txtQCDate.Text = String.Empty
                Me.txtInstallDate.Text = String.Empty
                Me.txtPostProduction1.Text = String.Empty
                Me.txtPostProduction2.Text = String.Empty

                Me.txtPackupDate.Enabled = True
            Case "btnClearQC"
                Me.txtQCDate.Text = String.Empty

                Me.txtInstallDate.Text = String.Empty
                Me.txtPostProduction1.Text = String.Empty
                Me.txtPostProduction2.Text = String.Empty

                Me.txtQCDate.Enabled = True
            Case "btnClearInstall"
                Me.txtInstallDate.Text = String.Empty

                Me.txtPostProduction1.Text = String.Empty
                Me.txtPostProduction2.Text = String.Empty

                Me.txtInstallDate.Enabled = True
            Case "btnClearPostProduction1"
                Me.txtPostProduction1.Text = String.Empty

                Me.txtPostProduction2.Text = String.Empty

                Me.txtPostProduction1.Enabled = True
            Case "btnClearPostProduction2"
                Me.txtPostProduction2.Text = String.Empty
                Me.txtPostProduction2.Enabled = True
            Case Else
                'do nothing
        End Select


        Me.btnSave_Click(sender, Nothing)

    End Sub

    Private Sub btnCancellation_Click(sender As Object, e As EventArgs) Handles btnCancellation.Click

        Me.btnSave_Click(sender, Nothing)

    End Sub

    Protected Sub checkAndSetClearButtonVisibilityForStatusDates()

        If Me.txtReceived.Enabled = False Then
            If Me.pnlCheckMeasureDate.Visible Then
                If Me.txtCheckMeasureDate.Enabled Then
                    Me.btnClearReceived.Visible = True
                End If
            Else
                If Me.txtPickingDate.Enabled Then
                    Me.btnClearReceived.Visible = True
                End If
            End If
        End If

        'check measure
        If Me.txtCheckMeasureDate.Text <> String.Empty And txtCheckMeasureDate.Enabled = True Then
            If Me.txtCheckMeasureDate.Enabled = False Then
                If Me.txtPickingDate.Enabled Then
                    If cboJobType.SelectedItem.Text = "Domestic" Then
                        Me.btnClearCM.Visible = True
                        Me.btnClearReceived.Visible = False
                    Else
                        Me.btnClearCM.Visible = False
                        Me.btnClearCM.Text = String.Empty
                        Me.btnClearReceived.Visible = True
                    End If
                End If
            End If
        End If


        'picking
        If Me.txtPickingDate.Enabled = False Then
            If Me.txtScheduledDate.Enabled Then
                Me.btnClearPicking.Visible = True
            End If
        End If

        If Me.txtScheduledDate.Enabled = False Then
            If Me.txtCuttingDate.Enabled Then
                Me.btnClearScheduled.Visible = True
            End If
        End If

        If Me.txtCuttingDate.Enabled = False Then
            If Me.txtPiningDate.Enabled Then
                Me.btnClearCutting.Visible = True
            End If
        End If

        If Me.txtPiningDate.Enabled = False Then
            If Me.txtPrepDate.Enabled Then
                Me.btnClearPining.Visible = True
            End If
        End If

        If Me.txtPrepDate.Enabled = False Then
            If Me.txtAssemblyDate.Enabled Then
                Me.btnClearPrep.Visible = True
            End If
        End If

        If Me.txtAssemblyDate.Enabled = False Then
            If Me.txtHingingDate.Enabled Then
                Me.btnClearAssembly.Visible = True
            End If
        End If


        If Me.txtHingingDate.Enabled = False Then
            If Me.txtPackupDate.Enabled Then
                Me.btnClearHinging.Visible = True
            End If
        End If

        If Me.txtPackupDate.Enabled = False Then
            If Me.txtQCDate.Enabled Then
                Me.btnClearPackup.Visible = True
            End If
        End If

        If Me.txtQCDate.Enabled = False Then
            If Me.pnlInstallDate.Visible Then
                If Me.txtInstallDate.Enabled Then
                    Me.btnClearQC.Visible = True
                End If
            Else
                If Me.txtPostProduction1.Enabled Then
                    Me.btnClearQC.Visible = True
                End If
            End If
        End If

        'install

        If Me.txtInstallDate.Enabled = False And Me.txtInstallDate.Text <> String.Empty Then
            If Me.txtPostProduction1.Enabled = False And txtPostProduction1.Text = String.Empty Then
                If cboJobType.SelectedItem.Text = "Domestic" Then
                    Me.btnClearInstall.Visible = True
                    Me.btnClearQC.Visible = False
                    Me.btnClearPostProduction1.Visible = False
                    Me.txtPostProduction1.Enabled = True
                Else
                    Me.btnClearInstall.Visible = False
                    Me.btnClearInstall.Text = String.Empty
                    Me.btnClearQC.Visible = True
                End If
            ElseIf (txtQCDate.Text <> String.Empty) Then
                Me.btnClearInstall.Visible = False
                Me.btnClearInstall.Text = String.Empty
                Me.btnClearPostProduction1.Visible = True
            Else
                Me.btnClearInstall.Visible = False
                Me.btnClearInstall.Text = String.Empty
                Me.btnClearQC.Visible = True
            End If
        End If

        If Me.txtPostProduction1.Enabled = False Then
            If Me.txtPostProduction2.Enabled Then
                Me.btnClearPostProduction1.Visible = True
            End If
        End If

        If Me.txtPostProduction2.Enabled = False Then
            Me.btnClearPostProduction2.Visible = True
            Me.btnClearPostProduction1.Visible = False
        End If

    End Sub
    Protected Function calculateStatus() As Integer
        Dim intStatusID As Integer = 0

        If Me.txtReceived.Enabled = False Then
            intStatusID = 2 'order accepted
        Else
            If Me.txtReceived.Text <> String.Empty Then
                intStatusID = 2 'order accepted
            Else
                intStatusID = 1 'new
            End If

        End If

        'check measure
        If Me.pnlCheckMeasureDate.Visible Then
            If Me.txtCheckMeasureDate.Enabled = False Then
                intStatusID = 11 'check measure
            Else
                If Me.txtCheckMeasureDate.Text <> String.Empty Then
                    intStatusID = 11 'check measure
                End If
            End If
        End If

        'picking
        If Me.txtPickingDate.Enabled = False Then
            If Me.txtScheduledDate.Enabled Then
                intStatusID = 9
            End If
        Else
            If Me.txtPickingDate.Text <> String.Empty Then
                intStatusID = 9 'in production
            Else
                If Me.txtCheckMeasureDate.Text = String.Empty Then
                    If Me.txtReceived.Text <> String.Empty Then
                        intStatusID = 2 'order accepted
                    Else
                        intStatusID = 1 'awaiting acceptance/new
                    End If
                Else
                    intStatusID = 11 'check measure
                End If
            End If
        End If

        If Me.txtScheduledDate.Enabled = False Then
            If Me.txtCuttingDate.Enabled Then
                intStatusID = 3
            End If
        Else
            If Me.txtScheduledDate.Text <> String.Empty Then
                intStatusID = 3 'in production
            End If
        End If

        If Me.txtCuttingDate.Enabled = False Then
            If Me.txtPiningDate.Enabled Then
                intStatusID = 3
            End If
        End If

        If Me.txtPiningDate.Enabled = False Then
            If Me.txtPrepDate.Enabled Then
                intStatusID = 3
            End If
        End If

        If Me.txtPrepDate.Enabled = False Then
            If Me.txtAssemblyDate.Enabled Then
                intStatusID = 3
            End If
        End If

        If Me.txtAssemblyDate.Enabled = False Then
            If Me.txtHingingDate.Enabled Then
                intStatusID = 3
            End If
        End If

        If Me.txtHingingDate.Enabled = False Then
            If Me.txtPackupDate.Enabled Then
                intStatusID = 3
            End If
        End If

        If Me.txtPackupDate.Enabled = False Then
            If Me.txtQCDate.Enabled Then
                intStatusID = 3
            End If
        End If

        If Me.txtQCDate.Enabled = False Then
            If Me.txtPostProduction1.Enabled Then
                intStatusID = 3
            End If
        End If

        If Me.pnlInstallDate.Visible Then
            If Me.txtInstallDate.Enabled = False Then
                intStatusID = 12 'installed
            Else
                If Me.txtInstallDate.Text <> String.Empty Then
                    intStatusID = 12 'installed
                End If
            End If
        End If

        If Me.lblPostProduction1.Text = "Invoice Date" Then
            If Me.txtPostProduction1.Enabled = False Then
                If Me.txtPostProduction2.Enabled Then
                    intStatusID = 5
                End If
            Else
                If Me.txtPostProduction1.Text <> String.Empty Then
                    intStatusID = 5
                End If
            End If
        Else
            If Me.txtPostProduction1.Enabled = False Then
                If Me.txtPostProduction2.Enabled Then
                    intStatusID = 4
                End If
            Else
                If Me.txtPostProduction1.Text <> String.Empty Then
                    intStatusID = 4
                End If
            End If
        End If

        If Me.lblPostProduction2.Text = "Invoice Date" Then
            If Me.txtPostProduction2.Enabled = False Then
                intStatusID = 5
            Else
                If Me.txtPostProduction2.Text <> String.Empty Then
                    intStatusID = 5
                End If
            End If
        Else
            If Me.txtPostProduction2.Enabled = False Then
                intStatusID = 7
            Else
                If Me.txtPostProduction2.Text <> String.Empty Then
                    intStatusID = 7
                End If
            End If
        End If


        Return intStatusID

    End Function

    Protected Sub setDateBoxDisabledOverrideBasedOnStatus(intStatusID As Integer)

        Select Case intStatusID
            Case 1 'awaiting acceptance
                Me.txtOrderDate.Enabled = False
            Case 2 'order accepted
                Me.txtOrderDate.Enabled = False
                Me.txtReceived.Enabled = False
            Case 3 'scheduled/in production
                Me.txtOrderDate.Enabled = False
                Me.txtReceived.Enabled = False
                Me.txtScheduledDate.Enabled = False

                Me.txtCheckMeasureDate.Enabled = False
                Me.txtPickingDate.Enabled = False
            Case 4 'despatch
                If Me.lblPostProduction2.Text = "Invoice Date" Then
                    Me.txtOrderDate.Enabled = False
                    Me.txtReceived.Enabled = False
                    Me.txtScheduledDate.Enabled = False
                    Me.txtCuttingDate.Enabled = False
                    Me.txtPiningDate.Enabled = False
                    Me.txtPrepDate.Enabled = False
                    Me.txtAssemblyDate.Enabled = False
                    Me.txtHingingDate.Enabled = False
                    Me.txtPackupDate.Enabled = False
                    Me.txtQCDate.Enabled = False
                    Me.txtPostProduction1.Enabled = False

                    Me.txtCheckMeasureDate.Enabled = False
                    Me.txtPickingDate.Enabled = False
                    Me.txtInstallDate.Enabled = False
                End If
            Case 5 'invoiced
                If Me.lblPostProduction1.Text = "Invoice Date" Then
                    Me.txtOrderDate.Enabled = False
                    Me.txtReceived.Enabled = False
                    Me.txtScheduledDate.Enabled = False
                    Me.txtCuttingDate.Enabled = False
                    Me.txtPiningDate.Enabled = False
                    Me.txtPrepDate.Enabled = False
                    Me.txtAssemblyDate.Enabled = False
                    Me.txtHingingDate.Enabled = False
                    Me.txtPackupDate.Enabled = False
                    Me.txtQCDate.Enabled = False
                    Me.txtPostProduction1.Enabled = False

                    Me.txtCheckMeasureDate.Enabled = False
                    Me.txtPickingDate.Enabled = False
                    Me.txtInstallDate.Enabled = False
                Else
                    Me.txtOrderDate.Enabled = False
                    Me.txtReceived.Enabled = False
                    Me.txtScheduledDate.Enabled = False
                    Me.txtCuttingDate.Enabled = False
                    Me.txtPiningDate.Enabled = False
                    Me.txtPrepDate.Enabled = False
                    Me.txtAssemblyDate.Enabled = False
                    Me.txtHingingDate.Enabled = False
                    Me.txtPackupDate.Enabled = False
                    Me.txtQCDate.Enabled = False
                    Me.txtPostProduction1.Enabled = False
                    Me.txtPostProduction2.Enabled = False

                    Me.txtCheckMeasureDate.Enabled = False
                    Me.txtPickingDate.Enabled = False
                    Me.txtInstallDate.Enabled = False
                End If
            Case 7 'collected from factory
                Me.txtOrderDate.Enabled = False
                Me.txtReceived.Enabled = False
                Me.txtScheduledDate.Enabled = False
                Me.txtCuttingDate.Enabled = False
                Me.txtPiningDate.Enabled = False
                Me.txtPrepDate.Enabled = False
                Me.txtAssemblyDate.Enabled = False
                Me.txtHingingDate.Enabled = False
                Me.txtPackupDate.Enabled = False
                Me.txtQCDate.Enabled = False
                Me.txtPostProduction1.Enabled = False
                Me.txtPostProduction2.Enabled = False

                Me.txtCheckMeasureDate.Enabled = False
                Me.txtPickingDate.Enabled = False
                Me.txtInstallDate.Enabled = False
            Case 8 'cancelled
                Me.txtOrderDate.Enabled = False
                Me.txtReceived.Enabled = False
                Me.txtScheduledDate.Enabled = False
                Me.txtCuttingDate.Enabled = False
                Me.txtPiningDate.Enabled = False
                Me.txtPrepDate.Enabled = False
                Me.txtAssemblyDate.Enabled = False
                Me.txtHingingDate.Enabled = False
                Me.txtPackupDate.Enabled = False
                Me.txtQCDate.Enabled = False
                Me.txtPostProduction1.Enabled = False
                Me.txtPostProduction2.Enabled = False

                Me.txtCheckMeasureDate.Enabled = False
                Me.txtPickingDate.Enabled = False
                Me.txtInstallDate.Enabled = False

            Case 9 'picking
                Me.txtOrderDate.Enabled = False
                Me.txtReceived.Enabled = False

                Me.txtCheckMeasureDate.Enabled = False
                Me.txtPickingDate.Enabled = False
            'Case 10 'preproduction
            '    Me.txtOrderDate.Enabled = False
            '    Me.txtReceived.Enabled = False
            '    Me.txtScheduledDate.Enabled = False

            '    Me.txtCheckMeasureDate.Enabled = False
            Case 11 'check measure
                Me.txtOrderDate.Enabled = False
                Me.txtReceived.Enabled = False

                Me.txtCheckMeasureDate.Enabled = False
            Case 12 'install
                Me.txtOrderDate.Enabled = False
                Me.txtReceived.Enabled = False
                Me.txtScheduledDate.Enabled = False
                Me.txtCuttingDate.Enabled = False
                Me.txtPiningDate.Enabled = False
                Me.txtPrepDate.Enabled = False
                Me.txtAssemblyDate.Enabled = False
                Me.txtHingingDate.Enabled = False
                Me.txtPackupDate.Enabled = False
                Me.txtQCDate.Enabled = False
                Me.txtPostProduction1.Enabled = False

                Me.txtCheckMeasureDate.Enabled = False
                Me.txtPickingDate.Enabled = False
                Me.txtInstallDate.Enabled = False
        End Select

    End Sub

    Protected Sub cboOrderType_SelectedIndexChanged(sender As Object, e As System.EventArgs) Handles cboOrderType.SelectedIndexChanged

        'Me.lblOrderCharge.Text = String.Empty

        'If Me.cboOrderType.SelectedIndex > 0 Then
        '    Select Case CInt(Me.cboOrderType.SelectedValue)
        '        Case 1 'regular order to be built
        '            Me.lblOrderCharge.Text = String.Empty
        '            Me.pnlRemakeDescription.Visible = False
        '            Me.pnlRemakeType.Visible = False
        '            Me.pnlOriginalOrder.Visible = False

        '            If dgvDetails.Rows.Count > 0 Then
        '                Me.pnlOpeningDetails.Visible = True
        '            Else
        '                Me.pnlOpeningDetails.Visible = False
        '            End If

        '        Case 2 'remake - charge ozroll
        '            Me.lblOrderCharge.Text = " - Charge To Ozroll"
        '            Me.pnlRemakeDescription.Visible = True
        '            Me.pnlRemakeType.Visible = True
        '            Me.pnlOpeningDetails.Visible = True
        '            Me.pnlOriginalOrder.Visible = True
        '        Case 3 'reorder - charge modern
        '            Me.lblOrderCharge.Text = " - Charge To Customer"
        '            Me.pnlRemakeDescription.Visible = True
        '            Me.pnlRemakeType.Visible = True
        '            Me.pnlOpeningDetails.Visible = True
        '            Me.pnlOriginalOrder.Visible = True
        '        Case Else
        '            Me.lblOrderCharge.Text = String.Empty
        '            Me.pnlRemakeDescription.Visible = False
        '            Me.pnlRemakeType.Visible = False
        '            Me.pnlOpeningDetails.Visible = False
        '            Me.pnlOriginalOrder.Visible = False
        '    End Select
        'End If

    End Sub

    Protected Sub compareDates(sender As Object, e As EventArgs) Handles txtOrderDate.TextChanged, txtScheduledDate.TextChanged, txtHingingDate.TextChanged,
                              txtCuttingDate.TextChanged, txtPrepDate.TextChanged, txtAssemblyDate.TextChanged, txtQCDate.TextChanged,
                              txtPostProduction1.TextChanged, txtPostProduction2.TextChanged, txtReceived.TextChanged, txtCheckMeasureDate.TextChanged,
                              txtPickingDate.TextChanged, txtInstallDate.TextChanged, txtPiningDate.TextChanged, txtPackupDate.TextChanged, txtQCDate.TextChanged

        Dim txt As TextBox = CType(sender, TextBox)

        If txt.Text <> String.Empty Then
            Select Case txt.ID
                Case "txtReceived"
                    If Me.txtOrderDate.Text <> String.Empty Then
                        If DateDiff(DateInterval.Day, CDate(Me.txtOrderDate.Text), CDate(txt.Text)) < 0 Then
                            txt.Text = String.Empty
                        End If
                    Else
                        txt.Text = String.Empty
                    End If

                Case "txtCheckMeasureDate"
                    If Me.txtReceived.Text <> String.Empty Then
                        If DateDiff(DateInterval.Day, CDate(Me.txtReceived.Text), CDate(txt.Text)) < 0 Then
                            txt.Text = String.Empty
                        End If
                    Else
                        txt.Text = String.Empty
                    End If

                Case "txtPickingDate"
                    If Me.pnlCheckMeasureDate.Visible Then
                        If Me.txtCheckMeasureDate.Text <> String.Empty Then
                            If DateDiff(DateInterval.Day, CDate(Me.txtCheckMeasureDate.Text), CDate(txt.Text)) < 0 Then
                                txt.Text = String.Empty
                            End If
                        Else
                            txt.Text = String.Empty
                        End If
                    Else
                        If Me.txtReceived.Text <> String.Empty Then
                            If DateDiff(DateInterval.Day, CDate(Me.txtReceived.Text), CDate(txt.Text)) < 0 Then
                                txt.Text = String.Empty
                            End If
                        Else
                            txt.Text = String.Empty
                        End If
                    End If

                Case "txtScheduledDate"
                    If Me.txtPickingDate.Text <> String.Empty Then
                        If DateDiff(DateInterval.Day, CDate(Me.txtPickingDate.Text), CDate(txt.Text)) < 0 Then
                            txt.Text = String.Empty
                        End If
                    Else
                        txt.Text = String.Empty
                    End If

                Case "txtCuttingDate"
                    If Me.txtScheduledDate.Text <> String.Empty Then
                        If DateDiff(DateInterval.Day, CDate(Me.txtScheduledDate.Text), CDate(txt.Text)) < 0 Then
                            txt.Text = String.Empty
                        End If
                    Else
                        txt.Text = String.Empty
                    End If

                Case "txtPiningDate"
                    If Me.txtCuttingDate.Text <> String.Empty Then
                        If DateDiff(DateInterval.Day, CDate(Me.txtCuttingDate.Text), CDate(txt.Text)) < 0 Then
                            txt.Text = String.Empty
                        End If
                    Else
                        txt.Text = String.Empty
                    End If

                Case "txtPrepDate"
                    If Me.txtPiningDate.Text <> String.Empty Then
                        If DateDiff(DateInterval.Day, CDate(Me.txtPiningDate.Text), CDate(txt.Text)) < 0 Then
                            txt.Text = String.Empty
                        End If
                    Else
                        txt.Text = String.Empty
                    End If

                Case "txtAssemblyDate"
                    If Me.txtPrepDate.Text <> String.Empty Then
                        If DateDiff(DateInterval.Day, CDate(Me.txtPrepDate.Text), CDate(txt.Text)) < 0 Then
                            txt.Text = String.Empty
                        End If
                    Else
                        txt.Text = String.Empty
                    End If

                Case "txtHingingDate"
                    If Me.txtAssemblyDate.Text <> String.Empty Then
                        If DateDiff(DateInterval.Day, CDate(Me.txtAssemblyDate.Text), CDate(txt.Text)) < 0 Then
                            txt.Text = String.Empty
                        End If
                    Else
                        txt.Text = String.Empty
                    End If

                Case "txtPackupDate"
                    If Me.txtHingingDate.Text <> String.Empty Then
                        If DateDiff(DateInterval.Day, CDate(Me.txtHingingDate.Text), CDate(txt.Text)) < 0 Then
                            txt.Text = String.Empty
                        End If
                    Else
                        txt.Text = String.Empty
                    End If

                Case "txtQCDate"
                    If Me.txtPackupDate.Text <> String.Empty Then
                        If DateDiff(DateInterval.Day, CDate(Me.txtPackupDate.Text), CDate(txt.Text)) < 0 Then
                            txt.Text = String.Empty
                        End If
                    Else
                        txt.Text = String.Empty
                    End If

                Case "txtInstallDate"
                    If Me.txtQCDate.Text <> String.Empty Then
                        If DateDiff(DateInterval.Day, CDate(Me.txtQCDate.Text), CDate(txt.Text)) < 0 Then
                            txt.Text = String.Empty
                        End If
                    Else
                        txt.Text = String.Empty
                    End If


                Case "txtPostProduction1"
                    If Me.pnlInstallDate.Visible Then
                        If Me.txtInstallDate.Text <> String.Empty Then
                            If DateDiff(DateInterval.Day, CDate(Me.txtInstallDate.Text), CDate(txt.Text)) < 0 Then
                                txt.Text = String.Empty
                            End If
                        Else
                            txt.Text = String.Empty
                        End If
                    Else
                        If Me.txtQCDate.Text <> String.Empty Then
                            If DateDiff(DateInterval.Day, CDate(Me.txtQCDate.Text), CDate(txt.Text)) < 0 Then
                                txt.Text = String.Empty
                            End If
                        Else
                            txt.Text = String.Empty
                        End If
                    End If

                Case "txtPostProduction2"
                    If Me.txtPostProduction1.Text <> String.Empty Then
                        If DateDiff(DateInterval.Day, CDate(Me.txtPostProduction1.Text), CDate(txt.Text)) < 0 Then
                            txt.Text = String.Empty
                        End If
                    Else
                        txt.Text = String.Empty
                    End If

                Case Else

            End Select


        End If

        txt = Nothing

        checkAllDatesValid(sender)


        If Me.txtViewType.Text = "1" Then
            btnSave_Click(sender, e)
        End If


    End Sub

    Protected Sub checkPermissions()

        Dim service As New AppService
        Dim dtPerm As DataTable = service.getUserPermsisionsByUserID(CInt(Session("sessUserID")))
        If dtPerm.Rows.Count > 0 Then

            'clear date status buttons
            Dim drows() As DataRow = dtPerm.Select("PermissionID=10")
            If drows.Length = 0 Then

                makeAllClearButtonsHidden()

            End If
            drows = Nothing

            'set date textbox permission disabling

            'daily schhedule update
            drows = dtPerm.Select("PermissionID=2")
            If drows.Length = 0 Then
                Me.txtCuttingDate.Enabled = False
                Me.txtPrepDate.Enabled = False
                Me.txtAssemblyDate.Enabled = False
                Me.txtQCDate.Enabled = False
            End If
            drows = Nothing

            'schedule date update
            drows = dtPerm.Select("PermissionID=3")
            If drows.Length = 0 Then
                Me.txtScheduledDate.Enabled = False
            End If
            drows = Nothing

            'awaiting acceptance
            drows = dtPerm.Select("PermissionID=5")
            If drows.Length = 0 Then
                Me.txtReceived.Enabled = False
            End If
            drows = Nothing

            'to be despatched
            drows = dtPerm.Select("PermissionID=7")
            If drows.Length = 0 Then
                If Me.lblPostProduction2.Text = "Invoice Date" Then
                    Me.txtPostProduction1.Enabled = False
                End If
            End If
            drows = Nothing

            'to be collected
            drows = dtPerm.Select("PermissionID=8")
            If drows.Length = 0 Then
                If Me.lblPostProduction1.Text = "Invoice Date" Then
                    Me.txtPostProduction2.Enabled = False
                End If
            End If
            drows = Nothing

            'to be invoiced
            drows = dtPerm.Select("PermissionID=9")
            If drows.Length = 0 Then
                If Me.lblPostProduction2.Text = "Invoice Date" Then
                    Me.txtPostProduction2.Enabled = False
                Else
                    Me.txtPostProduction1.Enabled = False
                End If
            End If
            drows = Nothing

        End If
        dtPerm.Dispose()
        dtPerm = Nothing

        service = Nothing

    End Sub

    Protected Sub makeAllClearButtonsHidden()

        Me.btnClearReceived.Visible = False
        Me.btnClearScheduled.Visible = False

        Me.btnClearCutting.Visible = False
        Me.btnClearPrep.Visible = False
        Me.btnClearAssembly.Visible = False
        Me.btnClearQC.Visible = False

        Me.btnClearPining.Visible = False
        Me.btnClearHinging.Visible = False
        Me.btnClearPackup.Visible = False

        Me.btnClearPostProduction1.Visible = False
        Me.btnClearPostProduction2.Visible = False

    End Sub

    Protected Sub makeAllStatusActionButtonsHidden()

        Me.btnConfirmOutstanding.Visible = False
        Me.btnCreditApprove.Visible = False

        Me.btnAcceptOrder.Visible = False
        Me.btnPickingList.Visible = False
        Me.btnPackUp.Visible = False
        Me.btnDispatchDate.Visible = False

    End Sub

    Protected Sub checkAllDatesValid(sender As Object)

        Dim txt As TextBox = CType(sender, TextBox)

        Select Case txt.ID
            Case "txtReceived"
                If txt.Text = String.Empty Then
                    Me.txtScheduledDate.Text = String.Empty
                    Me.txtCuttingDate.Text = String.Empty
                    Me.txtPiningDate.Text = String.Empty
                    Me.txtPrepDate.Text = String.Empty
                    Me.txtAssemblyDate.Text = String.Empty
                    Me.txtHingingDate.Text = String.Empty
                    Me.txtPackupDate.Text = String.Empty
                    Me.txtQCDate.Text = String.Empty
                    Me.txtPostProduction1.Text = String.Empty
                    Me.txtPostProduction2.Text = String.Empty
                Else
                    If Me.txtScheduledDate.Text <> String.Empty Then
                        If DateDiff(DateInterval.Day, CDate(Me.txtScheduledDate.Text), CDate(txt.Text)) > 0 Then
                            txt.Text = String.Empty
                            Me.txtScheduledDate.Text = String.Empty
                            Me.txtPiningDate.Text = String.Empty
                            Me.txtPrepDate.Text = String.Empty
                            Me.txtAssemblyDate.Text = String.Empty
                            Me.txtHingingDate.Text = String.Empty
                            Me.txtPackupDate.Text = String.Empty
                            Me.txtQCDate.Text = String.Empty
                            Me.txtPostProduction1.Text = String.Empty
                            Me.txtPostProduction2.Text = String.Empty
                        End If
                    End If
                End If

            Case "txtScheduledDate"
                If txt.Text = String.Empty Then
                    Me.txtCuttingDate.Text = String.Empty
                    Me.txtPiningDate.Text = String.Empty
                    Me.txtPrepDate.Text = String.Empty
                    Me.txtAssemblyDate.Text = String.Empty
                    Me.txtHingingDate.Text = String.Empty
                    Me.txtPackupDate.Text = String.Empty
                    Me.txtQCDate.Text = String.Empty
                    Me.txtPostProduction1.Text = String.Empty
                    Me.txtPostProduction2.Text = String.Empty
                Else
                    If Me.txtCuttingDate.Text <> String.Empty Then
                        If DateDiff(DateInterval.Day, CDate(Me.txtCuttingDate.Text), CDate(txt.Text)) > 0 Then
                            txt.Text = String.Empty
                            Me.txtCuttingDate.Text = String.Empty
                            Me.txtPiningDate.Text = String.Empty
                            Me.txtPrepDate.Text = String.Empty
                            Me.txtAssemblyDate.Text = String.Empty
                            Me.txtHingingDate.Text = String.Empty
                            Me.txtPackupDate.Text = String.Empty
                            Me.txtQCDate.Text = String.Empty
                            Me.txtPostProduction1.Text = String.Empty
                            Me.txtPostProduction2.Text = String.Empty
                        End If
                    End If
                End If

            Case "txtCuttingDate"
                If txt.Text = String.Empty Then
                    Me.txtPiningDate.Text = String.Empty
                    Me.txtAssemblyDate.Text = String.Empty
                    Me.txtHingingDate.Text = String.Empty
                    Me.txtPackupDate.Text = String.Empty
                    Me.txtQCDate.Text = String.Empty
                    Me.txtPostProduction1.Text = String.Empty
                    Me.txtPostProduction2.Text = String.Empty
                Else
                    If Me.txtPrepDate.Text <> String.Empty Then
                        If DateDiff(DateInterval.Day, CDate(Me.txtPrepDate.Text), CDate(txt.Text)) > 0 Then
                            txt.Text = String.Empty
                            Me.txtPiningDate.Text = String.Empty
                            Me.txtPrepDate.Text = String.Empty
                            Me.txtAssemblyDate.Text = String.Empty
                            Me.txtHingingDate.Text = String.Empty
                            Me.txtPackupDate.Text = String.Empty
                            Me.txtQCDate.Text = String.Empty
                            Me.txtPostProduction1.Text = String.Empty
                            Me.txtPostProduction2.Text = String.Empty
                        End If
                    End If
                End If

            Case "txtPiningDate"
                If txt.Text = String.Empty Then
                    Me.txtPrepDate.Text = String.Empty
                    Me.txtAssemblyDate.Text = String.Empty
                    Me.txtHingingDate.Text = String.Empty
                    Me.txtPackupDate.Text = String.Empty
                    Me.txtQCDate.Text = String.Empty
                    Me.txtPostProduction1.Text = String.Empty
                    Me.txtPostProduction2.Text = String.Empty
                Else
                    If Me.txtPrepDate.Text <> String.Empty Then
                        If DateDiff(DateInterval.Day, CDate(Me.txtPrepDate.Text), CDate(txt.Text)) > 0 Then
                            txt.Text = String.Empty
                            Me.txtPrepDate.Text = String.Empty
                            Me.txtAssemblyDate.Text = String.Empty
                            Me.txtHingingDate.Text = String.Empty
                            Me.txtPackupDate.Text = String.Empty
                            Me.txtQCDate.Text = String.Empty
                            Me.txtPostProduction1.Text = String.Empty
                            Me.txtPostProduction2.Text = String.Empty
                        End If
                    End If
                End If

            Case "txtPrepDate"
                If txt.Text = String.Empty Then
                    Me.txtAssemblyDate.Text = String.Empty
                    Me.txtHingingDate.Text = String.Empty
                    Me.txtPackupDate.Text = String.Empty
                    Me.txtQCDate.Text = String.Empty
                    Me.txtPostProduction1.Text = String.Empty
                    Me.txtPostProduction2.Text = String.Empty
                Else
                    If Me.txtAssemblyDate.Text <> String.Empty Then
                        If DateDiff(DateInterval.Day, CDate(Me.txtAssemblyDate.Text), CDate(txt.Text)) > 0 Then
                            txt.Text = String.Empty
                            Me.txtAssemblyDate.Text = String.Empty
                            Me.txtHingingDate.Text = String.Empty
                            Me.txtPackupDate.Text = String.Empty
                            Me.txtQCDate.Text = String.Empty
                            Me.txtPostProduction1.Text = String.Empty
                            Me.txtPostProduction2.Text = String.Empty
                        End If
                    End If
                End If

            Case "txtAssemblyDate"
                If txt.Text = String.Empty Then
                    Me.txtHingingDate.Text = String.Empty
                    Me.txtPackupDate.Text = String.Empty
                    Me.txtQCDate.Text = String.Empty
                    Me.txtPostProduction1.Text = String.Empty
                    Me.txtPostProduction2.Text = String.Empty
                Else
                    If Me.txtQCDate.Text <> String.Empty Then
                        If DateDiff(DateInterval.Day, CDate(Me.txtQCDate.Text), CDate(txt.Text)) > 0 Then
                            txt.Text = String.Empty
                            Me.txtHingingDate.Text = String.Empty
                            Me.txtPackupDate.Text = String.Empty
                            Me.txtQCDate.Text = String.Empty
                            Me.txtPostProduction1.Text = String.Empty
                            Me.txtPostProduction2.Text = String.Empty
                        End If
                    End If
                End If

            Case "txtHingingDate"
                If txt.Text = String.Empty Then
                    Me.txtPackupDate.Text = String.Empty
                    Me.txtQCDate.Text = String.Empty
                    Me.txtPostProduction1.Text = String.Empty
                    Me.txtPostProduction2.Text = String.Empty
                Else
                    If Me.txtQCDate.Text <> String.Empty Then
                        If DateDiff(DateInterval.Day, CDate(Me.txtQCDate.Text), CDate(txt.Text)) > 0 Then
                            txt.Text = String.Empty
                            Me.txtPackupDate.Text = String.Empty
                            Me.txtQCDate.Text = String.Empty
                            Me.txtPostProduction1.Text = String.Empty
                            Me.txtPostProduction2.Text = String.Empty
                        End If
                    End If
                End If

            Case "txtPackupDate"
                If txt.Text = String.Empty Then
                    Me.txtQCDate.Text = String.Empty
                    Me.txtPostProduction1.Text = String.Empty
                    Me.txtPostProduction2.Text = String.Empty
                Else
                    If Me.txtQCDate.Text <> String.Empty Then
                        If DateDiff(DateInterval.Day, CDate(Me.txtQCDate.Text), CDate(txt.Text)) > 0 Then
                            txt.Text = String.Empty
                            Me.txtQCDate.Text = String.Empty
                            Me.txtPostProduction1.Text = String.Empty
                            Me.txtPostProduction2.Text = String.Empty
                        End If
                    End If
                End If

            Case "txtQCDate"
                If txt.Text = String.Empty Then
                    Me.txtPostProduction1.Text = String.Empty
                    Me.txtPostProduction2.Text = String.Empty
                Else
                    If Me.txtPostProduction1.Text <> String.Empty Then
                        If DateDiff(DateInterval.Day, CDate(Me.txtPostProduction1.Text), CDate(txt.Text)) > 0 Then
                            txt.Text = String.Empty
                            Me.txtPostProduction1.Text = String.Empty
                            Me.txtPostProduction2.Text = String.Empty
                        End If
                    End If
                End If

            Case "txtPostProduction1"
                If txt.Text = String.Empty Then
                    Me.txtPostProduction2.Text = String.Empty
                Else
                    If Me.txtPostProduction2.Text <> String.Empty Then
                        If DateDiff(DateInterval.Day, CDate(Me.txtPostProduction2.Text), CDate(txt.Text)) > 0 Then
                            txt.Text = String.Empty
                            Me.txtPostProduction2.Text = String.Empty
                        End If
                    End If
                End If

            Case "txtPostProduction2"

            Case Else

        End Select

        txt = Nothing

    End Sub

    Protected Sub loadNotesToAccordian()

        Dim service As New AppService
        Dim dt As DataTable = service.runSQLScheduling("select * from dbo.tblTempProdScheduleNotes where TempGUID='" & Me.txtPSDetailGUID.Text & "' order by EntryDate DESC")

        Dim col As DataColumn = New DataColumn
        col.ColumnName = "DisplayHeaderText"
        col.DataType = System.Type.GetType("System.String")
        dt.Columns.Add(col)
        col = Nothing

        'set text of notes button to show number of notes
        Me.btnViewNotes.Text = "Notes (" & dt.Rows.Count & ")"

        Dim dtUsers As DataTable = service.getUsers

        For i As Integer = 0 To dt.Rows.Count - 1
            Dim strText As String = String.Empty

            Dim drows() As DataRow = dtUsers.Select("UserID=" & dt.Rows(i)("UserID").ToString)
            If drows.Length > 0 Then
                strText = "Entered on " & Format(CDate(dt.Rows(i)("EntryDate")), "d MMM yyyy h:mm tt") & " by " & drows(0)("UserFirstName").ToString & " " & drows(0)("UserLastName").ToString
            Else
                strText = "Entered on " & Format(CDate(dt.Rows(i)("EntryDate")), "d MMM yyyy h:mm tt")
            End If
            drows = Nothing

            If Not IsDBNull(dt.Rows(i)("VisibleToCustomer")) Then
                If CInt(dt.Rows(i)("VisibleToCustomer")) = 1 Then
                    strText &= " - Visible To Customer"
                End If
            End If

            dt.Rows(i)("DisplayHeaderText") = strText

        Next

        Me.acc1.DataSource = New DataTableReader(dt)
        Me.acc1.DataBind()

        service = Nothing

    End Sub

    Private Sub btnCancelNote_Click(sender As Object, e As EventArgs) Handles btnCancelNote.Click

        Me.txtNewNoteText.Text = String.Empty
        Me.chkNoteVisible.Checked = False
        Me.pnlAddNote.Visible = False

    End Sub

    Private Sub btnAddNewNote_Click(sender As Object, e As EventArgs) Handles btnAddNewNote.Click

        Me.txtNewNoteText.Text = String.Empty
        Me.chkNoteVisible.Checked = False
        Me.pnlAddNote.Visible = True

    End Sub

    Private Sub btnSaveNote_Click(sender As Object, e As EventArgs) Handles btnSaveNote.Click

        If Trim(Me.txtNewNoteText.Text) <> String.Empty Then

            Dim service As New AppService

            Dim dbConn As New DBConnection
            Dim cnn As SqlClient.SqlConnection = dbConn.getSQLConnection_To_OzRollPlantationScheduling
            Dim trans As SqlClient.SqlTransaction

            Dim bolSavedOK As Boolean = True

            Try
                cnn.Open()
                trans = cnn.BeginTransaction

                Dim cNote As New ProdScheduleNote

                'Pass intScheduleID - Else Pass 0 If Empty
                Dim intScheduleID As Integer = CInt(IIf(Int32.TryParse(txtIntScheduleID.Text, Nothing), txtIntScheduleID.Text, "0"))

                'Check if it is Greater than 0 or less than or equal to 0
                If intScheduleID > 0 Then
                    cNote.ProdScheduleID = intScheduleID
                Else
                    cNote.ProdScheduleID = Constants.DEFAULT_INTEGER_VALUE
                End If

                cNote.NoteDetails = Me.txtNewNoteText.Text
                cNote.NoteTypeID = 1
                cNote.UserID = CInt(Session("sessUserID"))
                cNote.EntryDate = DateTime.Now
                If Me.chkNoteVisible.Checked Then
                    cNote.VisibleToCustomer = 1
                Else
                    cNote.VisibleToCustomer = 0
                End If


                bolSavedOK = service.addTempProdScheduleNotes(cNote, Me.txtPSDetailGUID.Text, True, cnn, trans)

                If bolSavedOK Then
                    trans.Commit()
                Else
                    trans.Rollback()
                End If

            Catch ex As Exception
                If Not trans Is Nothing Then
                    trans.Rollback()
                End If
                If cnn.State = ConnectionState.Open Then
                    cnn.Close()
                End If
                EventLog.addEventLogEmail(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name & ": " & System.Reflection.MethodBase.GetCurrentMethod().Name & " - " & ex.Message & Environment.NewLine & getPageInfo())
            Finally
                If Not IsNothing(trans) Then
                    trans.Dispose()
                End If
                trans = Nothing
                If cnn.State = ConnectionState.Open Then
                    cnn.Close()
                End If
                cnn.Dispose()
                cnn = Nothing
            End Try

            If bolSavedOK Then
                Me.txtNewNoteText.Text = String.Empty
                Me.chkNoteVisible.Checked = False
                Me.pnlAddNote.Visible = False

                loadNotesToAccordian()
            End If

        End If

    End Sub

    Private Sub btnOrderForm_Click(sender As Object, e As EventArgs) Handles btnOrderForm.Click

        'Dim strRptsPath As String = Server.MapPath("") & "\ExcelRpts"
        'Dim objBuffer As Byte() = Nothing
        ''ExcelReport.createReport(strRptsPath, objBuffer, dtScheduleList)
        'Dim rptFileName As String = PlantationOrderForm.generatePlantationOrderForm(strRptsPath, objBuffer, CInt(Me.txtId.Text), 1)
        'Dim strRPTFileName As String = IO.Path.Combine(strRptsPath, rptFileName)
        'If objBuffer IsNot Nothing Then
        '    '----
        '    Response.BinaryWrite(objBuffer)
        '    Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        '    Response.AddHeader("content-disposition", "attachment;  filename=" & rptFileName)
        '    Response.End()
        '    '
        'End If
        'objBuffer = Nothing

    End Sub

    Protected Sub loadOrderFormLinks()

        Dim service As New AppService

        'check if order form should be diplayed - records for job in ozrolls details table
        Dim dtDetails As DataTable = service.getPlantationJobDetailsRecordsByPlantationScheduleID(CInt(Me.txtId.Text))
        If dtDetails.Rows.Count > 0 Then

            'get details to search modern tables from
            Dim dtOrder As DataTable = service.runSQLScheduling("select dbo.tblProductionScheduleList.*, dbo.tblCustomers.SiteID from dbo.tblProductionScheduleList inner join dbo.tblCustomers on dbo.tblProductionScheduleList.CustomeriD = dbo.tblCustomers.CustomeriD where dbo.tblProductionScheduleList.ID = " & Me.txtId.Text)
            If dtOrder.Rows.Count > 0 Then

                If Not IsDBNull(dtOrder.Rows(0)("SiteID")) And Not IsDBNull(dtOrder.Rows(0)("JobNumber")) Then

                    Dim strSQL As String = "select * from dbo.tblEOrderSubmission where [Type] = 1 and JobNumber = " & dtOrder.Rows(0)("JobNumber").ToString
                    Dim dtOrderForms As DataTable = service.runSQLHive(CInt(dtOrder.Rows(0)("SiteID")), strSQL)

                    If dtOrderForms.Rows.Count > 0 Then
                        For i As Integer = 0 To dtOrderForms.Rows.Count - 1
                            '\\HIVEAUTO11\c$\My Documents\Plantation Shutters Order\Plantation Shutters Order PIL532525 for Modern NSW (17 May 2017) - 001.xls                            
                            Dim strFileName As String = Right(dtOrderForms.Rows(i)("FileName").ToString, Len(dtOrderForms.Rows(i)("FileName").ToString) - 55)
                            strFileName = Left(strFileName, Len(strFileName) - 3) & "pdf"
                            If IO.File.Exists(Server.MapPath("~") & "orderforms\" & strFileName) Then
                                Dim strOrderForm As String = "orderforms/" & strFileName
                                Me.lblOrderForm.Text &= "<a target=""_blank"" href=""" & ResolveUrl(strOrderForm) & """>Display Order Form</a><br />"
                                Me.pnlOrderForms.Visible = True
                            End If
                        Next
                    Else
                        Me.pnlOrderForms.Visible = False
                    End If
                    dtOrderForms.Dispose()
                    dtOrderForms = Nothing
                Else
                    Me.pnlOrderForms.Visible = False
                End If

            Else
                Me.pnlOrderForms.Visible = False
            End If
            dtOrder.Dispose()
            dtOrder = Nothing
        Else
            Me.pnlOrderForms.Visible = False
        End If

        dtDetails.Dispose()
        dtDetails = Nothing

        service = Nothing

    End Sub


#Region "Shutter Details Function"

    Protected Sub dgvDetails_RowCommand(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.GridViewCommandEventArgs) Handles dgvDetails.RowCommand

        If (e.CommandName = "LouvreDetail") Then
            Dim index As Integer = Convert.ToInt32(e.CommandArgument)
            Dim row As GridViewRow = dgvDetails.Rows(index)

            Dim intPSDetailsID As Integer = CInt(dgvDetails.DataKeys(row.RowIndex).Values("LouvreDetailID"))
            loadShutterDetailsToPopup(intPSDetailsID)

            Me.txtHiddenPSDetailID.Text = intPSDetailsID.ToString

            DisableDetails()
            ModalPopupExtender.Show()

        End If

    End Sub

    Protected Sub loadShutterDetailsForDataGrid()

        Dim service As New AppService
        Dim dt As DataTable = service.getTempLouvreJobDetailsRecordsByTempGUID(Me.txtPSDetailGUID.Text)

        service = Nothing

        dt = SharedFunctions.performDatatableSelect(dt, "Deleted=0")

        Me.dgvDetails.DataSource = dt
        Me.dgvDetails.DataBind()

        If dt.Rows.Count > 0 Then
            Me.pnlOpeningDetails.Visible = True
        End If

    End Sub

    Protected Sub btnSaveDetails_Click(sender As Object, e As System.EventArgs) Handles btnSaveDetails.Click
        'modal popup save button
        Dim service As New AppService

        Dim dbConn As New DBConnection
        Dim cnn As SqlClient.SqlConnection = dbConn.getSQLConnection_To_OzRollPlantationScheduling
        Dim trans As SqlClient.SqlTransaction

        Dim bolSavedOK As Boolean = True

        Try
            Dim cLouvreJobDetails As New LouvreDetails
            If CInt(Me.txtHiddenPSDetailID.Text) > 0 Then
                cLouvreJobDetails = service.getTempLouvreDetailsRecord(CInt(Me.txtHiddenPSDetailID.Text))
            End If

            cLouvreJobDetails = prepareShutterDetailForSave(cLouvreJobDetails)
            cLouvreJobDetails.TempGUID = Me.txtPSDetailGUID.Text

            cnn.Open()
            trans = cnn.BeginTransaction

            If hiddenMidRail.Value <> String.Empty Then
                cLouvreJobDetails.MidRailHeight = hiddenMidRail.Value
            End If
            If cboShutterType.SelectedValue = 7 Or cboShutterType.SelectedValue = 8 Or cboShutterType.SelectedValue = 9 Then
                cLouvreJobDetails.BottomTrackType = ""
                cLouvreJobDetails.BottomTrackTypeId = 0
            End If

            If cboBiFoldHingedDoor.SelectedItem.Text = "In" Then
                txtHiddenFlyScreen.Text = "0"
            End If

            Dim intFlyScreenCount As Integer = cboFlyScreen.Items.Count
            If (txtHiddenFlyScreen.Text = "No" Or txtHiddenFlyScreen.Text = "2") Then
                cLouvreJobDetails.FlyScreen = 2
                'Yes
            ElseIf (txtHiddenFlyScreen.Text = "Yes" Or txtHiddenFlyScreen.Text = "1") Then
                cLouvreJobDetails.FlyScreen = 1
            Else
                cLouvreJobDetails.FlyScreen = 0
            End If


            If cLouvreJobDetails.LouvreDetailID = Constants.DEFAULT_INTEGER_VALUE Then

                'Fix Gridview Missing Opening And ShutterID Save

                If dgvDetails.Rows.Count = 0 Then
                    hiddenShutterID.Value = 1
                    cLouvreJobDetails.ShutterID = hiddenShutterID.Value
                Else
                    If dgvDetails.Rows.Count > 0 Then
                        cLouvreJobDetails.ShutterID = dgvDetails.Rows.Count + 1
                        hiddenShutterID.Value = cLouvreJobDetails.ShutterID
                    End If
                End If

                'Integer PSDetailID is being return    - Noticed By Kartar on 14/06/2017
                bolSavedOK = service.addTempLouvreDetails(cLouvreJobDetails, cnn, trans)
                'Details are being wiped out here in the addTempLouvreDetails

            Else
                bolSavedOK = service.updateTempLouvreDetails(cLouvreJobDetails, cnn, trans)
            End If

            If bolSavedOK Then
                trans.Commit()
            Else
                trans.Rollback()
            End If

        Catch ex As Exception
            If Not trans Is Nothing Then
                trans.Rollback()
            End If
            If cnn.State = ConnectionState.Open Then
                cnn.Close()
            End If
            EventLog.addEventLogEmail(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name & ": " & System.Reflection.MethodBase.GetCurrentMethod().Name & " - " & ex.Message & Environment.NewLine & getPageInfo())
        Finally
            If Not IsNothing(trans) Then
                trans.Dispose()
            End If
            trans = Nothing
            If cnn.State = ConnectionState.Open Then
                cnn.Close()
            End If
            cnn.Dispose()
            cnn = Nothing
        End Try

        If bolSavedOK Then
            resetPopupControlsToDefault()
            Me.txtPSDetailID.Text = "0"
            loadShutterDetailsForDataGrid()
        End If


    End Sub

    Protected Sub btnCancelDetails_Click(sender As Object, e As System.EventArgs) Handles btnCancelDetails.Click

        resetPopupControlsToDefault()
        Me.txtPSDetailID.Text = "0"

    End Sub

    Protected Sub loadShutterDetailsToPopup(intPSDetailID As Integer)

        Dim service As New AppService

        Dim cQuoteDetail As LouvreDetails = service.getTempLouvreDetailsRecord(intPSDetailID)

        If Not cQuoteDetail.LouvreDetailID = Constants.DEFAULT_INTEGER_VALUE Then
            Me.txtHiddenPSDetailID.Text = intPSDetailID.ToString

            If Not cQuoteDetail.RemakeTypeID = Constants.DEFAULT_INTEGER_VALUE Then
                Me.cboRemakeType.SelectedValue = cQuoteDetail.RemakeTypeID
            End If

            If Not cQuoteDetail.Location = String.Empty Then
                txtLocation.Text = cQuoteDetail.Location
            Else
                txtLocation.Text = String.Empty
            End If

            If Not cQuoteDetail.Width = Constants.DEFAULT_INTEGER_VALUE Then
                txtWidth.Text = CInt(cQuoteDetail.Width)
            Else
                txtWidth.Text = String.Empty
            End If
            If Not cQuoteDetail.Height = Constants.DEFAULT_INTEGER_VALUE Then
                txtHeight.Text = CInt(cQuoteDetail.Height)
            Else
                txtHeight.Text = String.Empty
            End If
            If cQuoteDetail.MidRailHeight <> Constants.DEFAULT_INTEGER_VALUE Then
                txtMidRailHeight.Text = cQuoteDetail.MidRailHeight
                'txtMidRailHeight_TextChanged(Me, Nothing)
            Else
                txtMidRailHeight.Text = String.Empty
            End If

            If Not cQuoteDetail.InsertTopId = Constants.DEFAULT_INTEGER_VALUE Then
                cboInsertTop.SelectedValue = cQuoteDetail.InsertTopId
            Else
                cboInsertTop.SelectedIndex = 0
            End If

            If Not cQuoteDetail.BladeOperationId = Constants.DEFAULT_INTEGER_VALUE Then
                cboBladeOperation.SelectedValue = cQuoteDetail.BladeOperationId
            Else
                cboBladeOperation.SelectedIndex = 0
            End If

            If Not cQuoteDetail.InsertBottomId = Constants.DEFAULT_INTEGER_VALUE Then
                cboInsertBottom.SelectedValue = cQuoteDetail.InsertBottomId
            Else
                cboInsertBottom.SelectedIndex = 0
            End If

            If Not cQuoteDetail.BladeOperationBottomId = Constants.DEFAULT_INTEGER_VALUE Then
                cboBladeOperationBottom.SelectedValue = cQuoteDetail.BladeOperationBottomId
            Else
                cboBladeOperationBottom.SelectedIndex = 0
            End If

            'If Not cQuoteDetail.MakeOrOpenSizesId = Constants.MODERN_DEFAULT_INT_VALUE Then
            '    cboMakeOpenSize.SelectedValue = cQuoteDetail.MakeOrOpenSizesId
            'Else
            '    cboMakeOpenSize.SelectedIndex = 0
            'End If
            If Not cQuoteDetail.ProductId = Constants.DEFAULT_INTEGER_VALUE Then
                cboLouvreProd.SelectedValue = cQuoteDetail.ProductId
            Else
                cboLouvreProd.SelectedIndex = 0
            End If
            If Not cQuoteDetail.ShutterTypeId = Constants.DEFAULT_INTEGER_VALUE Then
                cboShutterType.SelectedValue = cQuoteDetail.ShutterTypeId
            Else
                cboShutterType.SelectedIndex = 0
            End If

            If Not cQuoteDetail.SlideId = Constants.DEFAULT_INTEGER_VALUE Then
                cboSlide.SelectedValue = cQuoteDetail.SlideId
            Else
                cboSlide.SelectedIndex = 0
            End If

            If Not cQuoteDetail.BiFoldHingedDoorInOutId = Constants.DEFAULT_INTEGER_VALUE Then
                cboBiFoldHingedDoor.SelectedValue = cQuoteDetail.BiFoldHingedDoorInOutId
            Else
                cboBiFoldHingedDoor.SelectedIndex = 0
            End If

            'Added by Michael 20/06/2017
            If Not cQuoteDetail.NoOfOpenings = Constants.DEFAULT_INTEGER_VALUE Then
                cboNoOfOpenings.SelectedValue = cQuoteDetail.NoOfOpenings
                txtNoPanel.Text = cQuoteDetail.NoOfOpenings
            Else
                cboNoOfPanels.SelectedIndex = 0
                txtNoPanel.Text = 0
            End If

            'Added by Michael 20/06/2017
            If Not cQuoteDetail.BladeSizeId = Constants.DEFAULT_INTEGER_VALUE Then
                cboBladeSize.SelectedValue = cQuoteDetail.BladeSizeId
            Else
                cboBladeSize.SelectedIndex = 0
            End If
            'Added by Michael 20/06/2017
            If Not cQuoteDetail.FlushBoltsTopId = Constants.DEFAULT_INTEGER_VALUE Then
                cboFlushBoltsTop.SelectedValue = cQuoteDetail.FlushBoltsTopId
            Else
                cboFlushBoltsTop.SelectedIndex = 0
            End If
            'Added by Michael 20/06/2017
            If Not cQuoteDetail.FlushBoltsBottomId = Constants.DEFAULT_INTEGER_VALUE Then
                cboFlushBoltsBottom.SelectedValue = cQuoteDetail.FlushBoltsBottomId
            Else
                cboFlushBoltsBottom.SelectedIndex = 0
            End If
            'Added by Michael 20/06/2017
            If Not cQuoteDetail.CChannel = Constants.DEFAULT_INTEGER_VALUE Then
                cboCChannel.SelectedValue = cQuoteDetail.CChannel
            Else
                cboCChannel.SelectedIndex = 0
            End If
            'Added by Michael 20/06/2017
            If Not cQuoteDetail.HChannel = Constants.DEFAULT_INTEGER_VALUE Then
                cboHChannel.SelectedValue = cQuoteDetail.HChannel
            Else
                cboHChannel.SelectedIndex = 0
            End If
            'Added by Michael 20/06/2017
            'If Not cQuoteDetail.FinishTypeId = Constants.DEFAULT_INTEGER_VALUE Then
            '    cboFinishType.SelectedValue = cQuoteDetail.FinishTypeId
            'Else
            '    cboFinishType.SelectedIndex = 0
            'End If
            'Added by Michael 20/06/2017
            If Not cQuoteDetail.LChannel = Constants.DEFAULT_INTEGER_VALUE Then
                cboLReveal.SelectedValue = cQuoteDetail.LChannel
            Else
                cboLReveal.SelectedIndex = 0
            End If
            'Added by Michael 20/06/2017
            If Not cQuoteDetail.ZChannel = Constants.DEFAULT_INTEGER_VALUE Then
                cboZReveal.SelectedValue = cQuoteDetail.ZChannel
            Else
                cboZReveal.SelectedIndex = 0
            End If

            'Added by Michael 20/06/2017
            If Not cQuoteDetail.SpecialRequirements = String.Empty Then
                txtSpecialRequirements.Text = cQuoteDetail.SpecialRequirements
            Else
                txtSpecialRequirements.Text = String.Empty
            End If

            'Added by Michael 20/06/2017
            If Not cQuoteDetail.Location = String.Empty Then
                txtLocation.Text = cQuoteDetail.Location
            Else
                txtLocation.Text = String.Empty
            End If

            'Added by Michael 20/06/2017
            If Not cQuoteDetail.MakeOrOpenSizesId = Constants.DEFAULT_INTEGER_VALUE Then
                cboMakeOpenSize.SelectedValue = cQuoteDetail.MakeOrOpenSizesId
            Else
                cboMakeOpenSize.SelectedIndex = 0
            End If




            If Not cQuoteDetail.EndCapColourId = Constants.DEFAULT_INTEGER_VALUE Then
                cboEndCapColour.SelectedValue = cQuoteDetail.EndCapColourId
            Else
                cboEndCapColour.SelectedIndex = 0
            End If

            If Not cQuoteDetail.BladeClipColourId = Constants.DEFAULT_INTEGER_VALUE Then
                cboBladeClipColour.SelectedValue = cQuoteDetail.BladeClipColourId
            Else
                cboBladeClipColour.SelectedIndex = 0
            End If

            If Not cQuoteDetail.PileColourId = Constants.DEFAULT_INTEGER_VALUE Then
                cboPileColour.SelectedValue = cQuoteDetail.PileColourId
            Else
                cboPileColour.SelectedIndex = 0
            End If
            'If Not cQuoteDetail.PivotTypeId = Constants.DEFAULT_INTEGER_VALUE Then
            '    cboPivotType.SelectedValue = cQuoteDetail.PivotTypeId
            'Else
            '    cboPivotType.SelectedIndex = 0
            'End If

            'If Not cQuoteDetail.FlushBoltsTopId = Constants.MODERN_DEFAULT_INT_VALUE Then
            '    cboFlushBoltsTop.SelectedValue = cQuoteDetail.FlushBoltsTopId
            'Else
            '    cboFlushBoltsTop.SelectedIndex = 0
            'End If

            'If Not cQuoteDetail.FlushBoltsBottomId = Constants.MODERN_DEFAULT_INT_VALUE Then
            '    cboFlushBoltsBottom.SelectedValue = cQuoteDetail.FlushBoltsBottomId
            'Else
            '    cboFlushBoltsBottom.SelectedIndex = 0
            'End If

            If Not cQuoteDetail.LockOptionsId = Constants.DEFAULT_INTEGER_VALUE Then
                cboLockOptions.SelectedValue = cQuoteDetail.LockOptionsId
            Else
                cboLockOptions.SelectedIndex = 0
            End If

            If Not cQuoteDetail.BottomTrackTypeId = Constants.DEFAULT_INTEGER_VALUE Then
                cboBottomTrackType.SelectedValue = cQuoteDetail.BottomTrackTypeId
            Else
                cboBottomTrackType.SelectedIndex = 0
            End If

            If Not cQuoteDetail.BladeLocks = Constants.DEFAULT_INTEGER_VALUE Then
                cboBladeLocks.SelectedValue = cQuoteDetail.BladeLocks
            Else
                cboBladeLocks.SelectedIndex = 0
            End If

            'If cQuoteDetail.LChannel = 1 Then
            '    cboChannel.SelectedValue = 1
            'ElseIf cQuoteDetail.ZChannel = 1 Then
            '    cboChannel.SelectedValue = 2
            'Else
            '    cboChannel.SelectedIndex = 3
            'End If


            If Not cQuoteDetail.ColourId = Constants.DEFAULT_INTEGER_VALUE Then
                cboColour.SelectedValue = cQuoteDetail.ColourId
            Else
                cboColour.SelectedIndex = 0
            End If

            'If Not cQuoteDetail.OtherColourCode = String.Empty Then
            '    txtOtherColourCode.Text = cQuoteDetail.OtherColourCode
            'Else
            '    txtOtherColourCode.Text = String.Empty
            'End If

            'If Not cQuoteDetail.OtherColour = String.Empty Then
            '    txtOtherColour.Text = cQuoteDetail.OtherColour
            'Else
            '    txtOtherColour.Text = String.Empty
            'End If

            'If Not cQuoteDetail.FinishTypeId = Constants.DEFAULT_INTEGER_VALUE Then
            '    cboFinishType.SelectedValue = cQuoteDetail.FinishTypeId
            'Else
            '    cboFinishType.SelectedIndex = 0
            'End If



            If Not cQuoteDetail.StackerLocationId = Constants.DEFAULT_INTEGER_VALUE Then
                cboStacker.SelectedValue = cQuoteDetail.StackerLocationId
            Else
                cboStacker.SelectedIndex = 0
            End If

            'If Not cQuoteDetail.HighsetAllowance = Constants.DEFAULT_INTEGER_VALUE Then
            '    cboHighsetAllowance.SelectedValue = cQuoteDetail.HighsetAllowance
            'Else
            '    cboHighsetAllowance.SelectedIndex = 0
            'End If

            If Not cQuoteDetail.CurvedTrack = Constants.DEFAULT_INTEGER_VALUE Then
                cboCurvedTrack.SelectedValue = cQuoteDetail.CurvedTrack
            Else
                cboCurvedTrack.SelectedIndex = 0
            End If

            If Not cQuoteDetail.ExtraTrack = Constants.DEFAULT_INTEGER_VALUE Then
                txtExtraTrack.Text = CInt(cQuoteDetail.ExtraTrack)
            Else
                txtExtraTrack.Text = String.Empty
            End If

            If Not cQuoteDetail.FlyScreen = Constants.DEFAULT_INTEGER_VALUE Then
                If cQuoteDetail.FlyScreen = "0" Then
                    cboFlyScreen.SelectedIndex = 0
                Else
                    cboFlyScreen.SelectedValue = cQuoteDetail.FlyScreen
                End If
            Else
                cboFlyScreen.SelectedIndex = 0
            End If

            If Not cQuoteDetail.Winder = Constants.DEFAULT_INTEGER_VALUE Then
                cboWinder.SelectedValue = cQuoteDetail.Winder
            Else
                cboWinder.SelectedIndex = 0
            End If

            If Not cQuoteDetail.SpecialRequirements = String.Empty Then
                txtSpecialRequirements.Text = CStr(cQuoteDetail.SpecialRequirements)
            End If

            'Added by Michael Behar 23/06/2017
            If Not cQuoteDetail.TopTrack = String.Empty Then
                cboTopTrackType.SelectedItem.Text = CStr(cQuoteDetail.TopTrack)
            End If

            'Added by Michael Behar 23/06/2017
            If Not cQuoteDetail.TopTrackID = Constants.DEFAULT_INTEGER_VALUE Then
                cboTopTrackType.SelectedValue = cQuoteDetail.TopTrackID
            Else
                cboTopTrackType.SelectedIndex = 0
            End If

            'Added by Michael Behar 23/06/2017
            If Not cQuoteDetail.FixedPanelChannel = String.Empty Then
                cboFixedPanelSides.SelectedItem.Text = CStr(cQuoteDetail.FixedPanelChannel)
            End If

            'Added by Michael Behar 23/06/2017
            If Not cQuoteDetail.FixedPanelChannelID = Constants.DEFAULT_INTEGER_VALUE Then
                cboFixedPanelSides.SelectedValue = cQuoteDetail.FixedPanelChannelID
            Else
                cboTopTrackType.SelectedIndex = 0
            End If

            'Added by Michael Behar 23/06/2017
            If Not cQuoteDetail.OpenVertical = Constants.DEFAULT_INTEGER_VALUE Then
                If (cQuoteDetail.OpenVertical = 1) Then
                    rdoOpenLeft.Checked = cQuoteDetail.OpenVertical
                ElseIf (cQuoteDetail.OpenVertical = 2) Then
                    rdoOpenRight.Checked = cQuoteDetail.OpenVertical
                Else
                    rdoOpenLeft.Checked = 0
                    rdoOpenRight.Checked = 0
                End If

            End If

            If Not cQuoteDetail.NoOfPanels = Constants.DEFAULT_INTEGER_VALUE Then
                cboNoOfPanels.SelectedValue = cQuoteDetail.NoOfPanels
                txtNoPanel.Text = cQuoteDetail.NoOfPanels
            Else
                cboNoOfPanels.SelectedIndex = 0
                txtNoPanel.Text = 0
            End If

        End If

        service = Nothing

    End Sub

    Protected Function prepareShutterDetailForSave(cQuoteDetail As LouvreDetails) As LouvreDetails

        Try
            If CInt(Me.txtHiddenPSDetailID.Text) > 0 Then
                cQuoteDetail.LouvreDetailID = CInt(Me.txtHiddenPSDetailID.Text)
            End If

            'cPlantationJobDetails.ShutterID = CInt(txtSelectedShutter.Text)

            If Me.cboRemakeType.SelectedIndex > 0 Then
                cQuoteDetail.RemakeTypeID = CInt(Me.cboRemakeType.SelectedValue)
            End If


            If txtLocation.Text = String.Empty Then
                cQuoteDetail.Location = txtLocation.Text
            End If

            If IsNumeric(txtWidth.Text) Then
                cQuoteDetail.Width = CInt(txtWidth.Text)
            End If

            If IsNumeric(txtHeight.Text) Then
                cQuoteDetail.Height = CInt(txtHeight.Text)
            End If

            If IsNumeric(cboLouvreProd.SelectedValue) Then
                cQuoteDetail.ProductId = CInt(cboLouvreProd.SelectedValue)
                cQuoteDetail.Product = cboLouvreProd.SelectedItem.Text
            End If

            If IsNumeric(cboShutterType.SelectedValue) Then
                cQuoteDetail.ShutterTypeId = CInt(cboShutterType.SelectedValue)
                cQuoteDetail.ShutterType = cboShutterType.SelectedItem.Text
            End If

            If cboSlide.SelectedIndex > 0 Then
                If IsNumeric(cboSlide.SelectedValue) Then
                    cQuoteDetail.SlideId = CInt(cboSlide.SelectedValue)
                    cQuoteDetail.Slide = cboSlide.SelectedItem.Text
                End If
            End If

            'If IsNumeric(cboMakeOpenSize.SelectedValue) Then
            '    cQuoteDetail.MakeOrOpenSizesId = CInt(cboMakeOpenSize.SelectedValue)
            '    cQuoteDetail.MakeOrOpenSizes = cboMakeOpenSize.SelectedItem.Text
            'End If

            If txtOpen.Text = "0" Then
                If IsNumeric(cboBiFoldHingedDoor.SelectedValue) Then
                    cQuoteDetail.BiFoldHingedDoorInOutId = CInt(cboBiFoldHingedDoor.SelectedValue)
                    cQuoteDetail.BiFoldHingedDoorInOut = cboBiFoldHingedDoor.SelectedItem.Text
                End If
            End If

            'Added by Michael 20/06/2017
            If IsNumeric(cboNoOfPanels.SelectedValue) Then
                cQuoteDetail.NoOfPanels = CInt(cboNoOfPanels.SelectedValue)
            End If

            'Added by Michael 20/06/2017
            If IsNumeric(cboNoOfOpenings.SelectedValue) Then
                cQuoteDetail.NoOfOpenings = CInt(cboNoOfOpenings.SelectedValue)
            End If

            'Added by Michael 20/06/2017
            If IsNumeric(cboBladeSize.SelectedValue) Then
                cQuoteDetail.BladeSizeId = CInt(cboBladeSize.SelectedValue)
                cQuoteDetail.BladeSize = cboBladeSize.SelectedItem.Text
            End If

            'Added by Michael 20/06/2017
            If IsNumeric(cboFlushBoltsTop.SelectedValue) Then
                cQuoteDetail.FlushBoltsTopId = CInt(cboFlushBoltsTop.SelectedValue)
                cQuoteDetail.FlushBoltsTop = cboFlushBoltsTop.SelectedItem.Text
            End If

            'Added by Michael 20/06/2017
            If IsNumeric(cboFlushBoltsBottom.SelectedValue) Then
                cQuoteDetail.FlushBoltsBottomId = CInt(cboFlushBoltsBottom.SelectedValue)
                cQuoteDetail.FlushBoltsBottom = cboFlushBoltsBottom.SelectedItem.Text
            End If

            'Added by Michael 20/06/2017
            If IsNumeric(cboCChannel.SelectedValue) Then
                cQuoteDetail.CChannel = CInt(cboCChannel.SelectedValue)
            End If

            'Added by Michael 20/06/2017
            If IsNumeric(cboHChannel.SelectedValue) Then
                cQuoteDetail.HChannel = CInt(cboHChannel.SelectedValue)
            End If

            'Added by Michael 20/06/2017
            'If IsNumeric(cboFinishType.SelectedValue) Then
            '    cQuoteDetail.FinishTypeId = CInt(cboFinishType.SelectedValue)
            '    cQuoteDetail.FinishType = cboFinishType.SelectedItem.Text
            'End If

            'Added by Michael 20/06/2017
            If IsNumeric(cboLReveal.SelectedValue) Then
                cQuoteDetail.LChannel = CInt(cboLReveal.SelectedValue)
            End If

            'Added by Michael 20/06/2017
            If IsNumeric(cboZReveal.SelectedValue) Then
                cQuoteDetail.ZChannel = CInt(cboZReveal.SelectedValue)
            End If

            'Added by Michael 20/06/2017
            If txtSpecialRequirements.Text = String.Empty Then
                cQuoteDetail.SpecialRequirements = String.Empty
            Else
                cQuoteDetail.SpecialRequirements = txtSpecialRequirements.Text
            End If

            'Added by Michael 20/06/2017
            If (txtLocation.Text = String.Empty) Then
                cQuoteDetail.Location = String.Empty
            Else
                cQuoteDetail.Location = txtLocation.Text
            End If

            'Added by Michael 20/06/2017
            If IsNumeric(cboMakeOpenSize.SelectedValue) Then
                cQuoteDetail.MakeOrOpenSizesId = CInt(cboMakeOpenSize.SelectedValue)
            End If





            ''just sells 90 so hard coded
            'cQuoteDetail.BladeSizeId = 1
            'cQuoteDetail.BladeSize = 90

            If IsNumeric(cboEndCapColour.SelectedValue) Then
                cQuoteDetail.EndCapColourId = CInt(cboEndCapColour.SelectedValue)
                cQuoteDetail.EndCapColour = cboEndCapColour.SelectedItem.Text
            End If

            If IsNumeric(cboBladeClipColour.SelectedValue) Then
                cQuoteDetail.BladeClipColourId = CInt(cboBladeClipColour.SelectedValue)
                cQuoteDetail.BladeClipColour = cboBladeClipColour.SelectedItem.Text
            End If

            If IsNumeric(cboPileColour.SelectedValue) Then
                cQuoteDetail.PileColourId = CInt(cboPileColour.SelectedValue)
                cQuoteDetail.PileColour = cboPileColour.SelectedItem.Text
            End If

            If txtMR.Text = "0" Then
                If IsNumeric(txtMidRailHeight.Text) Then
                    cQuoteDetail.MidRailHeight = CInt(txtMidRailHeight.Text)
                End If

                If IsNumeric(cboInsertBottom.SelectedValue) Then
                    cQuoteDetail.InsertBottomId = CInt(cboInsertBottom.SelectedValue)
                    cQuoteDetail.InsertBottom = cboInsertBottom.SelectedItem.Text
                End If


            End If

            If IsNumeric(cboInsertTop.SelectedValue) Then
                cQuoteDetail.InsertTopId = CInt(cboInsertTop.SelectedValue)
                cQuoteDetail.InsertTop = cboInsertTop.SelectedItem.Text
            End If


            If txtBladeOperation.Text = "0" Then
                If IsNumeric(cboBladeOperation.SelectedValue) Then
                    cQuoteDetail.BladeOperationId = CInt(cboBladeOperation.SelectedValue)
                    cQuoteDetail.BladeOperation = cboBladeOperation.SelectedItem.Text
                End If
            End If


            If txtBladeOperationBottom.Text = "0" Then
                If IsNumeric(cboBladeOperationBottom.SelectedValue) Then
                    cQuoteDetail.BladeOperationBottomId = CInt(cboBladeOperationBottom.SelectedValue)
                    cQuoteDetail.BladeOperationBottom = cboBladeOperationBottom.SelectedItem.Text
                End If
            End If

            If IsNumeric(cboBladeLocks.SelectedValue) Then
                cQuoteDetail.BladeLocks = CInt(cboBladeLocks.SelectedValue)
            End If

            'If txtPivot.Text = "0" Then
            '    If IsNumeric(cboPivotType.SelectedValue) Then
            '        cQuoteDetail.PivotTypeId = CInt(cboPivotType.SelectedValue)
            '        cQuoteDetail.PivotType = cboPivotType.SelectedItem.Text
            '    End If
            'End If

            If IsNumeric(cboLockOptions.SelectedValue) Then
                cQuoteDetail.LockOptionsId = CInt(cboLockOptions.SelectedValue)
                cQuoteDetail.LockOptions = cboLockOptions.SelectedItem.Text
            End If

            'If IsNumeric(cboFlushBoltsTop.SelectedValue) Then
            '    cQuoteDetail.FlushBoltsTopId = CInt(cboFlushBoltsTop.SelectedValue)
            '    cQuoteDetail.FlushBoltsTop = cboFlushBoltsTop.SelectedItem.Text
            'End If

            'If IsNumeric(cboFlushBoltsBottom.SelectedValue) Then
            '    cQuoteDetail.FlushBoltsBottomId = CInt(cboFlushBoltsBottom.SelectedValue)
            '    cQuoteDetail.FlushBoltsBottom = cboFlushBoltsBottom.SelectedItem.Text
            'End If
            If txtBottomTrack.Text = "0" Then
                If IsNumeric(cboBottomTrackType.SelectedValue) Then
                    cQuoteDetail.BottomTrackTypeId = CInt(cboBottomTrackType.SelectedValue)
                    cQuoteDetail.BottomTrackType = cboBottomTrackType.SelectedItem.Text
                End If
            End If

            If IsNumeric(cboColour.SelectedValue) Then
                cQuoteDetail.ColourId = CInt(cboColour.SelectedValue)
                cQuoteDetail.Colour = cboColour.SelectedItem.Text
            End If

            'If txtOthColour.Text = "0" Then
            '    cQuoteDetail.OtherColourCode = CStr(txtOtherColourCode.Text)
            '    cQuoteDetail.OtherColour = CStr(txtOtherColour.Text)

            '    If IsNumeric(cboFinishType.SelectedValue) Then
            '        cQuoteDetail.FinishTypeId = CInt(cboFinishType.SelectedValue)
            '        cQuoteDetail.FinishType = cboFinishType.SelectedItem.Text
            '    End If
            'End If

            If cboStacker.SelectedIndex > 0 Then
                If IsNumeric(cboStacker.SelectedValue) Then
                    cQuoteDetail.StackerLocationId = CInt(cboStacker.SelectedValue)
                    cQuoteDetail.StackerLocation = cboStacker.SelectedItem.Text
                End If
            End If

            'If IsNumeric(cboHighsetAllowance.SelectedValue) Then
            '    cQuoteDetail.HighsetAllowance = CInt(cboHighsetAllowance.SelectedValue)
            'End If

            If txtCurvedTrack.Text = "0" Then
                If IsNumeric(cboCurvedTrack.SelectedValue) Then
                    cQuoteDetail.CurvedTrack = CInt(cboCurvedTrack.SelectedValue)
                End If

                If IsNumeric(txtExtraTrack.Text) Then
                    cQuoteDetail.ExtraTrack = CInt(txtExtraTrack.Text)
                End If
            End If

            If IsNumeric(cboFlyScreen.SelectedValue) Then
                cQuoteDetail.FlyScreen = CInt(cboFlyScreen.SelectedValue)
            End If

            If txtWinder.Text = "0" Then
                If IsNumeric(cboWinder.SelectedValue) Then
                    cQuoteDetail.Winder = CInt(cboWinder.SelectedValue)
                End If
            End If

            'Added by Michael Behar 22/06/2017
            If IsNumeric(cboTopTrackType.SelectedIndex) Then
                cQuoteDetail.TopTrackID = CInt(cboTopTrackType.SelectedValue)
                cQuoteDetail.TopTrack = cboTopTrackType.SelectedItem.Text
            End If

            'Added by Michael Behar 22/06/2017
            If IsNumeric(cboFixedPanelSides.SelectedValue) Then
                cQuoteDetail.FixedPanelChannelID = CInt(cboFixedPanelSides.SelectedValue)
                cQuoteDetail.FixedPanelChannel = cboFixedPanelSides.SelectedItem.Text
            End If

            'Added by Michael Behar 22/06/2017
            If (rdoOpenLeft.Checked = True) Then
                cQuoteDetail.OpenVertical = 1
            ElseIf (rdoOpenRight.Checked = True) Then
                cQuoteDetail.OpenVertical = 2
            Else
                cQuoteDetail.OpenVertical = 0
            End If


            'Added by Michael Behar 30/10/2017
            'cQuoteDetail.Accepted = 1
            'cQuoteDetail.AcceptedBy = 1
            'cQuoteDetail.AcceptedTime = DateTime.Now


            'Added by Michael Behar 26/06/2017



            'If txtChannel.Text = "0" Then 'Ask John where we are going to store no frame

            '    If IsNumeric(cboChannel.SelectedValue) Then
            '        If cboChannel.SelectedValue = 1 Then
            '            cQuoteDetail.LChannel = 1
            '            cQuoteDetail.ZChannel = 2
            '        ElseIf cboChannel.SelectedValue = 2 Then
            '            cQuoteDetail.ZChannel = 1
            '            cQuoteDetail.LChannel = 2
            '        Else
            '            cQuoteDetail.LChannel = 2
            '            cQuoteDetail.ZChannel = 2
            '        End If
            '    End If



        Catch ex As Exception
            EventLog.addEventLogEmail(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name & ": " & System.Reflection.MethodBase.GetCurrentMethod().Name & " - " & ex.Message)
        End Try

        Return cQuoteDetail


    End Function



    Protected Sub resetPopupControlsToDefault()

        Me.txtHiddenPSDetailID.Text = "0"

        Me.cboRemakeType.SelectedIndex = 0

        'Left Hand Side Of Modal
        txtLocation.Text = String.Empty
        cboColour.SelectedIndex = 0
        txtHeight.Text = String.Empty
        txtWidth.Text = String.Empty
        cboMakeOpenSize.SelectedIndex = 2
        cboLouvreProd.SelectedIndex = 1
        cboNoOfPanels.SelectedIndex = 0
        cboNoOfOpenings.SelectedIndex = 0
        cboBladeSize.SelectedIndex = 0
        cboEndCapColour.SelectedIndex = 0
        cboBladeClipColour.SelectedIndex = 0
        cboPileColour.SelectedIndex = 0
        txtMidRailHeight.Text = String.Empty
        'cboPivotType.SelectedIndex = 0
        cboFlushBoltsTop.SelectedIndex = 0
        cboFlushBoltsBottom.SelectedIndex = 0
        cboLockOptions.SelectedIndex = 0
        cboBottomTrackType.SelectedIndex = 1
        cboBladeLocks.SelectedIndex = 0
        cboCChannel.SelectedIndex = 0

        'Right Hand Side Of Modal
        cboHChannel.SelectedIndex = 0
        cboLReveal.SelectedIndex = 0
        cboZReveal.SelectedIndex = 0
        cboBladeOperation.SelectedIndex = 1
        ' cboFinishType.SelectedIndex = 0
        cboWinder.SelectedIndex = 0
        'cboHighsetAllowance.SelectedIndex = 0
        cboFlyScreen.SelectedIndex = 0
        cboBladeOperationBottom.SelectedIndex = 0
        cboInsertTop.SelectedIndex = 1
        cboCurvedTrack.SelectedIndex = 0
        txtExtraTrack.Text = String.Empty
        cboInsertBottom.SelectedIndex = 0
        cboSlide.SelectedIndex = 0
        cboStacker.SelectedIndex = 0

        'Added by Michael Behar 22/02/2016
        cboTopTrackType.SelectedIndex = 0
        cboFixedPanelSides.SelectedIndex = 0
        cboShutterType.SelectedIndex = 0

        'Bottom of Modal
        txtSpecialRequirements.Text = String.Empty
        rdoOpenLeft.Checked = False
        rdoOpenRight.Checked = False

    End Sub

    'Private Sub LoadControls()
    '    Dim intLocation As Integer
    '    Try
    '        Me.cboRemakeType.SelectedIndex = 0

    '        txtLocation.Text = String.Empty
    '        txtWidth.Text = String.Empty
    '        txtHeight.Text = String.Empty
    '        txtMidRailHeight.Text = String.Empty
    '        cboInsertBottom.SelectedIndex = 0
    '        cboBladeOperationBottom.SelectedIndex = 0
    '        cboInsertTop.SelectedIndex = 0
    '        'cboMakeOpenSize.SelectedIndex = 0

    '        cboLouvreProd.SelectedIndex = 0
    '        cboShutterType.SelectedIndex = 0
    '        cboSlide.SelectedIndex = 0
    '        cboBiFoldHingedDoor.SelectedIndex = 0
    '        cboNoOfPanels.SelectedIndex = 1
    '        cboEndCapColour.SelectedIndex = 0
    '        cboBladeClipColour.SelectedIndex = 0
    '        cboPileColour.SelectedIndex = 0

    '        'cboFlushBoltsTop.SelectedIndex = 0
    '        'cboFlushBoltsBottom.SelectedIndex = 0
    '        cboLockOptions.SelectedIndex = 0
    '        cboBottomTrackType.SelectedIndex = 0
    '        cboBladeLocks.SelectedIndex = 0

    '        'cboChannel.SelectedIndex = 0
    '        cboColour.SelectedIndex = 0

    '        'txtOtherColourCode.Text = String.Empty
    '        'txtOtherColour.Text = String.Empty
    '        'cboFinishType.SelectedIndex = 0
    '        cboBladeOperation.SelectedIndex = 0
    '        cboStacker.SelectedIndex = 0
    '        '
    '        'cboHighsetAllowance.SelectedIndex = 0
    '        cboCurvedTrack.SelectedIndex = 0
    '        txtExtraTrack.Text = String.Empty
    '        cboFlyScreen.SelectedIndex = 0
    '        cboWinder.SelectedIndex = 0
    '        'cboPivotType.SelectedIndex = 2 'Default Floating

    '        txtSpecialRequirements.Text = String.Empty

    '        'Added by Michael Behar 22/06/2017
    '        cboTopTrackType.SelectedIndex = 0
    '        cboCChannel.SelectedIndex = 0


    '    Catch ex As Exception
    '        EventLog.addEventLogEmail(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name & ": " & System.Reflection.MethodBase.GetCurrentMethod().Name & " - " & ex.Message & "; Location:  -  " & CStr(intLocation))
    '    End Try
    'End Sub

    Protected Sub setAllControlsToViewModeOnly()

        Try
            'Handles the shutter details section
            Me.cboRemakeType.Enabled = False
            Me.cboRemakeType.CssClass = "form-select-disable"

            txtLocation.Enabled = False
            txtWidth.Enabled = False
            txtHeight.Enabled = False
            cboLouvreProd.Enabled = False
            cboLouvreProd.CssClass = "form-select-disable"
            cboShutterType.Enabled = False
            cboShutterType.CssClass = "form-select-disable"
            cboSlide.Enabled = False
            cboSlide.CssClass = "form-select-disable"

            cboBiFoldHingedDoor.Enabled = False
            cboBiFoldHingedDoor.CssClass = "form-select-disable"
            cboNoOfPanels.Enabled = False
            cboNoOfPanels.CssClass = "form-select-disable"

            cboEndCapColour.Enabled = False
            cboEndCapColour.CssClass = "form-select-disable"
            cboBladeClipColour.Enabled = False
            cboBladeClipColour.CssClass = "form-select-disable"
            cboPileColour.Enabled = False
            cboPileColour.CssClass = "form-select-disable"
            txtMidRailHeight.Enabled = False
            cboInsertTop.Enabled = False
            cboInsertTop.CssClass = "form-select-disable"
            cboInsertBottom.Enabled = False
            cboInsertBottom.CssClass = "form-select-disable"
            cboBladeOperationBottom.Enabled = False
            cboBladeOperationBottom.CssClass = "form-select-disable"

            'cboPivotType.Enabled = False
            'cboPivotType.CssClass = "form-select-disable"
            'cboFlushBoltsTop.Enabled = False
            'cboFlushBoltsTop.CssClass = "form-select-disable"
            'cboFlushBoltsBottom.Enabled = False
            'cboFlushBoltsBottom.CssClass = "form-select-disable"
            cboLockOptions.Enabled = False
            cboLockOptions.CssClass = "form-select-disable"
            cboBottomTrackType.Enabled = False
            cboBottomTrackType.CssClass = "form-select-disable"
            cboBladeLocks.Enabled = False
            cboBladeLocks.CssClass = "form-select-disable"
            'cboChannel.Enabled = False
            'cboChannel.CssClass = "form-select-disable"


            cboColour.Enabled = False
            cboColour.CssClass = "form-select-disable"

            'txtOtherColourCode.Enabled = False
            'txtOtherColour.Enabled = False

            'cboFinishType.Enabled = False
            'cboFinishType.CssClass = "form-select-disable"

            cboBladeOperation.Enabled = False
            cboBladeOperation.CssClass = "form-select-disable"

            cboStacker.Enabled = False
            cboStacker.CssClass = "form-select-disable"

            'cboHighsetAllowance.Enabled = False
            'cboHighsetAllowance.CssClass = "form-select-disable"

            cboCurvedTrack.Enabled = False
            cboCurvedTrack.CssClass = "form-select-disable"

            txtExtraTrack.Enabled = False

            cboFlyScreen.Enabled = False
            cboFlyScreen.CssClass = "form-select-disable"

            cboWinder.Enabled = False
            cboWinder.CssClass = "form-select-disable"


        Catch ex As Exception
            EventLog.addEventLogEmail(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name & ": " & System.Reflection.MethodBase.GetCurrentMethod().Name & " - " & ex.Message)
        End Try
    End Sub

    Protected Function AllShutterDetailsValid() As Boolean
        'If CInt(Me.cboRemakeType.SelectedValue) <> 2 Then
        'This means that it will only check if a regular order or if a whole opening remake/rorder

        Dim bolContinue As Boolean = True
        lblShutterStatus.Text = String.Empty

        If bolContinue Then
            If txtLocation.Text = String.Empty Then
                bolContinue = False
                lblShutterStatus.Text = "Please select a Location."
            End If
        End If

        'If bolContinue Then
        '    If cboHighsetAllowance.SelectedIndex <= 0 Then
        '        bolContinue = False
        '        lblShutterStatus.Text = "Please select a Highset Allowance."
        '    End If
        'End If

        If bolContinue Then
            If txtWidth.Text = String.Empty Then
                bolContinue = False
                lblShutterStatus.Text = "Please enter a Width."
            Else
                If Not IsNumeric(txtWidth.Text) Then
                    bolContinue = False
                    lblShutterStatus.Text = "Please enter a valid Width."
                End If
            End If
        End If

        If bolContinue Then
            If txtHeight.Text = String.Empty Then
                bolContinue = False
                lblShutterStatus.Text = "Please enter a Height."
            Else
                If Not IsNumeric(txtHeight.Text) Then
                    bolContinue = False
                    lblShutterStatus.Text = "Please enter a valid Height."
                End If
            End If
        End If

        If bolContinue Then
            If cboLouvreProd.SelectedIndex <= 0 Then
                bolContinue = False
                lblShutterStatus.Text = "Please select a Product."
            End If
        End If
        If bolContinue Then
            If cboShutterType.SelectedIndex <= 0 Then
                bolContinue = False
                lblShutterStatus.Text = "Please select a Shutter Type."
            End If
        End If

        If txtCurvedTrack.Text = "0" Then
            If bolContinue = True Then
                If cboCurvedTrack.SelectedIndex <= 0 Then
                    bolContinue = False
                    lblShutterStatus.Text = "Please select a Curved Track."
                End If
            End If

            If bolContinue = True Then
                If txtExtraTrack.Text = String.Empty Then
                    bolContinue = False
                    lblShutterStatus.Text = "Please select a Extra Track."
                End If
            End If
        End If

        If bolContinue Then
            If txtSlide.Text = 0 Then
                If cboSlide.SelectedIndex <= 0 Then
                    bolContinue = False
                    lblShutterStatus.Text = "Please select a Slide."
                End If
            End If
        End If

        If txtStack.Text = "0" Then
            If bolContinue = True Then
                If cboStacker.SelectedIndex <= 0 Then
                    bolContinue = False
                    lblShutterStatus.Text = "Please select a Stacker Location."
                End If
            End If
        End If

        'If bolContinue Then
        '    If cboMakeOpenSize.SelectedIndex <= 0 Then
        '        bolContinue = False
        '        lblShutterStatus.Text = "Please select a Make / Open sizes."
        '    End If
        'End If
        If txtOpen.Text = "0" Then
            If bolContinue Then
                If cboBiFoldHingedDoor.SelectedIndex <= 0 Then
                    bolContinue = False
                    lblShutterStatus.Text = "Please select a Open In /Out"
                End If
            End If
        End If

        If bolContinue Then
            If txtNoPanel.Text = 0 Then
                bolContinue = False
                lblShutterStatus.Text = "Please select a No of Panels."
            End If
        End If

        If bolContinue Then
            If cboEndCapColour.SelectedIndex <= 0 Then
                bolContinue = False
                lblShutterStatus.Text = "Please select a End Cap Colour."
            End If
        End If
        If bolContinue Then
            If cboBladeClipColour.SelectedIndex <= 0 Then
                bolContinue = False
                lblShutterStatus.Text = "Please select a Blade Clip Colour."
            End If
        End If
        If bolContinue Then
            If cboPileColour.SelectedIndex <= 0 Then
                bolContinue = False
                lblShutterStatus.Text = "Please select a Pile Colour."
            End If
        End If

        If bolContinue Then
            If txtMR.Text = 0 Then

                If Not txtMidRailHeight.Text = String.Empty Then
                    If Not IsNumeric(txtMidRailHeight.Text) Then
                        bolContinue = False
                        lblShutterStatus.Text = "Please enter a valid Mid Rail Height."
                    ElseIf CInt(txtHeight.Text) > 1600 Then
                        If CInt(txtMidRailHeight.Text) < 100 Or CInt(txtMidRailHeight.Text) > 2300 Then
                            bolContinue = False
                            lblShutterStatus.Text = "Mid Rail Height should be between 100mm to 2300mm"
                        End If
                    End If
                ElseIf CInt(txtHeight.Text) > 1600 Then
                    bolContinue = False
                    lblShutterStatus.Text = "Please enter a Mid Rail Height."
                End If
            End If
        End If

        If bolContinue = True Then
            If cboInsertTop.SelectedIndex <= 0 Then
                bolContinue = False
                lblShutterStatus.Text = "Please select a Insert Top."
            End If
        End If

        If bolContinue = True Then
            If txtBladeOperation.Text = 0 Then
                If cboBladeOperation.SelectedIndex <= 0 Then
                    bolContinue = False
                    lblShutterStatus.Text = "Please select a Blade Operation."
                End If
            End If
        End If

        If bolContinue = True Then
            If txtMR.Text = 0 Then
                If cboInsertBottom.SelectedIndex <= 0 Then
                    bolContinue = False
                    lblShutterStatus.Text = "Please select a Insert Bottom."
                End If
            End If
        End If

        If bolContinue = True Then
            If txtBladeOperationBottom.Text = 0 Then
                If cboBladeOperationBottom.SelectedIndex <= 0 Then
                    bolContinue = False
                    lblShutterStatus.Text = "Please select a Blade Operation Bottom."
                End If
            End If
        End If

        If bolContinue Then
            If cboBladeLocks.SelectedIndex <= 0 Then
                bolContinue = False
                lblShutterStatus.Text = "Please select a Blade Locks."
            End If
        End If
        'If bolContinue Then
        '    If txtPivot.Text = "0" Then
        '        If cboPivotType.SelectedIndex <= 0 Then
        '            bolContinue = False
        '            lblShutterStatus.Text = "Please select a Pivot Type."
        '        End If
        '    End If
        'End If
        If bolContinue Then
            If cboLockOptions.SelectedIndex <= 0 Then
                bolContinue = False
                lblShutterStatus.Text = "Please select a Lock Options."
            End If
        End If

        'If bolContinue Then
        '    If cboFlushBoltsTop.SelectedIndex <= 0 Then
        '        bolContinue = False
        '        lblShutterStatus.Text = "Please select a Flush Bolts Top."
        '    End If
        'End If

        'If bolContinue Then
        '    If cboFlushBoltsBottom.SelectedIndex <= 0 Then
        '        bolContinue = False
        '        lblShutterStatus.Text = "Please select a Flush Bolts Bottom."
        '    End If
        'End If

        If bolContinue Then
            If txtBottomTrack.Text = "0" Then
                If cboBottomTrackType.SelectedIndex <= 0 Then
                    bolContinue = False
                    lblShutterStatus.Text = "Please select a Bottom Track Type."
                End If
            End If
        End If

        If bolContinue Then
            If cboColour.SelectedIndex <= 0 Then
                bolContinue = False
                lblShutterStatus.Text = "Please select a Colour."
            End If
        End If

        'If bolContinue = True Then
        '    If txtOthColour.Text = "0" Then
        '        If txtOtherColourCode.Text = String.Empty Then
        '            bolContinue = False
        '            lblShutterStatus.Text = "Please enter a Other Colour Code."
        '        End If

        '        If bolContinue = True Then
        '            If txtOtherColour.Text = String.Empty Then
        '                bolContinue = False
        '                lblShutterStatus.Text = "Please enter a Other Colour."
        '            End If
        '        End If

        'If bolContinue = True Then
        '    If cboFinishType.SelectedIndex <= 0 Then
        '        bolContinue = False
        '        lblShutterStatus.Text = "Please select a Finish Type."
        '    End If
        'End If

        '    End If
        'End If

        If bolContinue = True Then
            If cboFlyScreen.SelectedIndex <= 0 Then
                bolContinue = False
                lblShutterStatus.Text = "Please select a Fly Screen."
            End If
        End If

        'If txtChannel.Text = "0" Then
        '    If bolContinue Then
        '        If cboChannel.SelectedIndex <= 0 Then
        '            bolContinue = False
        '            lblShutterStatus.Text = "Please select a Frame Type."
        '        End If
        '    End If
        'End If

        If bolContinue Then
            If txtWinder.Text = "0" Then
                If cboWinder.SelectedIndex <= 0 Then
                    bolContinue = False
                    lblShutterStatus.Text = "Please select a Winder."
                End If
            End If
        End If

        Return bolContinue
    End Function



#End Region

    Protected Sub disableAllControls()

        Me.txtOrderDate.Enabled = False
        Me.txtReceived.Enabled = False
        Me.txtPickingDate.Enabled = False
        Me.txtScheduledDate.Enabled = False
        Me.txtCuttingDate.Enabled = False
        Me.txtPiningDate.Enabled = False
        Me.txtPrepDate.Enabled = False
        Me.txtAssemblyDate.Enabled = False
        Me.txtHingingDate.Enabled = False
        Me.txtPackupDate.Enabled = False
        Me.txtQCDate.Enabled = False
        Me.txtPostProduction1.Enabled = False
        Me.txtPostProduction2.Enabled = False

        Me.cboOrderType.Enabled = False
        Me.txtActualShippingDate.Enabled = False
        Me.txtPromisedDate.Enabled = False
        Me.txtContractNumber.Enabled = False
        Me.txtCostPrice.Enabled = False
        txtFreightTotal.Enabled = False
        Me.txtCustomerName.Enabled = False
        Me.cboCustomer.Enabled = False
        Me.txtState.Enabled = False
        Me.txtTotalPanels.Enabled = False
        Me.txtTotalSQM.Enabled = False
        Me.cboPriority.Enabled = False


        'disable powdercoat popup controls
        Me.txtPickDate.Enabled = False
        Me.txtPCStartDate.Enabled = False
        Me.txtPCETADate.Enabled = False
        Me.txtPCCompleteDate.Enabled = False
        Me.txtPCDescription.Enabled = False
        Me.txtPCPurchaseOrder.Enabled = False
        Me.txtPCCostPrice.Enabled = False
        Me.cboPowdercoater.Enabled = False
        Me.btnSavePowdercoat.Enabled = False

        'disable additional requirements popup controls
        Me.txtRequirementPickDate.Enabled = False
        Me.txtRequirementStartDate.Enabled = False
        Me.txtRequirementETADate.Enabled = False
        Me.txtRequirementCompleteDate.Enabled = False
        Me.txtRequirementDescription.Enabled = False
        Me.txtRequirementPurchaseOrder.Enabled = False
        Me.txtRequirementCostPrice.Enabled = False
        Me.cboRequirementType.Enabled = False
        Me.btnSaveRequirement.Enabled = False

        Me.btnAddDetails.Enabled = False
        Me.btnAddPowdercoat.Enabled = False
        Me.btnAddRequirement.Enabled = False

        Me.btnSaveDetails.Enabled = False 'opening details popup
        Me.btnAddNewNote.Enabled = False

        Me.btnCancellation.Enabled = False

        Me.btnSave.Enabled = False

        makeAllClearButtonsHidden()

        makeAllStatusActionButtonsHidden()


    End Sub

    Protected Sub loadPowdercoating()

        Me.txtHidPCRequirementsID.Text = String.Empty
        Me.cboPowdercoater.SelectedIndex = 0
        Me.txtPCDescription.Text = String.Empty
        Me.txtPickDate.Text = String.Empty
        Me.txtPCETADate.Text = String.Empty
        Me.txtPCStartDate.Text = String.Empty

        Dim service As New AppService
        Dim dt As DataTable = service.runSQLScheduling("select * from dbo.tblTempAddRequirements inner join dbo.tblPowdercoater on dbo.tblTempAddRequirements.PowdercoaterID = dbo.tblPowdercoater.PowdercoaterID where dbo.tblTempAddRequirements.TempGUID = '" & Me.txtPSDetailGUID.Text & "'  and AdditionalRequirementTypeID=1")

        Me.dgvPowdercoat.DataSource = dt
        Me.dgvPowdercoat.DataBind()

        service = Nothing

    End Sub

    Protected Sub loadAdditionalRequirements()

        Me.txtHidRequirementsID.Text = String.Empty
        Me.cboRequirementType.SelectedIndex = 0
        Me.txtRequirementDescription.Text = String.Empty
        Me.txtRequirementPickDate.Text = String.Empty
        Me.txtRequirementETADate.Text = String.Empty
        Me.txtRequirementCompleteDate.Text = String.Empty

        Dim service As New AppService
        Dim dt As DataTable = service.runSQLScheduling("select dbo.tblTempAddRequirements.*, dbo.tblAdditionalRequirementTypes.RequirementTypeName from dbo.tblTempAddRequirements inner join dbo.tblAdditionalRequirementTypes on dbo.tblTempAddRequirements.AdditionalRequirementTypeID = " &
                                                        "dbo.tblAdditionalRequirementTypes.AdditionalRequirementTypeID where dbo.tblTempAddRequirements.TempGUID = '" & Me.txtPSDetailGUID.Text & "'  and dbo.tblTempAddRequirements.AdditionalRequirementTypeID<>1")

        Me.dgvAdditionalRequirements.DataSource = dt
        Me.dgvAdditionalRequirements.DataBind()

        service = Nothing

    End Sub

    Private Sub cboJobType_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cboJobType.SelectedIndexChanged

        If Me.cboJobType.SelectedIndex > -1 Then
            Select Case CInt(Me.cboJobType.SelectedValue)
                Case 1 'domestic
                    Me.pnlCheckMeasureDate.Visible = True
                    Me.pnlInstallDate.Visible = True
                    Me.pnlRetailInstallDetails.Visible = True
                Case 2 'wholesale
                    Me.pnlCheckMeasureDate.Visible = False
                    Me.pnlInstallDate.Visible = False
                    Me.pnlRetailInstallDetails.Visible = False
                Case Else
                    Me.pnlCheckMeasureDate.Visible = False
                    Me.pnlInstallDate.Visible = False
                    Me.pnlRetailInstallDetails.Visible = False
            End Select
        Else
            Me.pnlCheckMeasureDate.Visible = False
            Me.pnlInstallDate.Visible = False
            Me.pnlRetailInstallDetails.Visible = False
        End If

    End Sub

    Private Sub btnSavePowdercoat_Click(sender As Object, e As EventArgs) Handles btnSavePowdercoat.Click

        Dim service As New AppService
        Dim cRequirement As New AdditionalRequirements


        If Me.txtHidPCRequirementsID.Text <> String.Empty Then
            Dim dt As DataTable = service.getTempAddRequirementsRecord(Me.txtHidPCRequirementsID.Text)
            If dt.Rows.Count > 0 Then
                cRequirement = service.setAdditionalRequirementsObjectFromDataRow(dt.Rows(0))
            End If
        End If

        cRequirement.TempGUID = Me.txtPSDetailGUID.Text

        'If Me.txtId.Text <> String.Empty Then
        '    cRequirement.ProductionScheduleID = CInt(Me.txtId.Text)
        'End If

        cRequirement.PowdercoaterID = CInt(Me.cboPowdercoater.SelectedValue)
        cRequirement.AdditionalRequirementTypeID = 1
        cRequirement.DescriptionText = Me.txtPCDescription.Text
        If Me.txtPickDate.Text <> String.Empty Then
            cRequirement.StartDate = CDate(Me.txtPickDate.Text)
        Else
            cRequirement.StartDate = Constants.DEFAULT_DATE_VALUE
        End If
        If Me.txtPCETADate.Text <> String.Empty Then
            cRequirement.ETADate = CDate(Me.txtPCETADate.Text)
        Else
            cRequirement.ETADate = Constants.DEFAULT_DATE_VALUE
        End If
        If Me.txtPCStartDate.Text <> String.Empty Then
            cRequirement.CompleteDate = CDate(Me.txtPCStartDate.Text)
        Else
            cRequirement.CompleteDate = Constants.DEFAULT_DATE_VALUE
        End If

        'Added by Michael Behar 02/11/2017
        If Me.txtPCCostPrice.Text <> String.Empty Then
            cRequirement.CostPrice = CInt(Me.txtPCCostPrice.Text)
        Else
            cRequirement.CostPrice = Constants.DEFAULT_INTEGER_VALUE
        End If

        If Me.txtPCPurchaseOrder.Text <> String.Empty Then
            cRequirement.PurchaseOrderNo = Me.txtPCPurchaseOrder.Text
        Else
            cRequirement.PurchaseOrderNo = String.Empty
        End If

        Dim dbConn As New DBConnection
        Dim cnn As SqlConnection = dbConn.getSQLConnection_To_OzRollPlantationScheduling
        Dim trans As SqlTransaction = Nothing
        Dim bolSaveOK As Boolean = True

        Try
            cnn.Open()
            trans = cnn.BeginTransaction

            If cRequirement.AdditionalRequirementsID = Constants.DEFAULT_INTEGER_VALUE Then

                Dim intID As Integer = Constants.DEFAULT_INTEGER_VALUE
                intID = service.addTempAddRequirementsRecord(cRequirement, cnn, trans)
                If intID = Constants.DEFAULT_INTEGER_VALUE Then
                    bolSaveOK = False
                End If
            Else
                bolSaveOK = service.updateTempAddRequirementsRecord(cRequirement, cnn, trans)
            End If

            If bolSaveOK Then
                trans.Commit()
            Else
                trans.Rollback()
            End If

        Catch ex As Exception
            If Not trans Is Nothing Then
                trans.Rollback()
            End If
            If cnn.State = ConnectionState.Open Then
                cnn.Close()
            End If
            EventLog.addEventLogEmail(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name & ": " & System.Reflection.MethodBase.GetCurrentMethod().Name & " - " & ex.Message & Environment.NewLine & getPageInfo())
        Finally
            If Not IsNothing(trans) Then
                trans.Dispose()
            End If
            trans = Nothing
            If cnn.State = ConnectionState.Open Then
                cnn.Close()
            End If
            cnn.Dispose()
            cnn = Nothing
        End Try

        service = Nothing

        If bolSaveOK Then
            loadPowdercoating()
        End If

    End Sub

    Private Sub btnSaveRequirement_Click(sender As Object, e As EventArgs) Handles btnSaveRequirement.Click

        Dim service As New AppService
        Dim cRequirement As New AdditionalRequirements

        If Me.txtHidRequirementsID.Text <> String.Empty Then
            Dim dt As DataTable = service.getTempAddRequirementsRecord(Me.txtHidRequirementsID.Text)
            If dt.Rows.Count > 0 Then
                cRequirement = service.setAdditionalRequirementsObjectFromDataRow(dt.Rows(0))
            End If
        End If

        cRequirement.TempGUID = Me.txtPSDetailGUID.Text

        'If Me.txtId.Text <> String.Empty Then
        '    cRequirement.ProductionScheduleID = CInt(Me.txtId.Text)
        'End If

        cRequirement.AdditionalRequirementTypeID = CInt(Me.cboRequirementType.SelectedValue)
        cRequirement.DescriptionText = Me.txtRequirementDescription.Text
        If Me.txtRequirementPickDate.Text <> String.Empty Then
            cRequirement.StartDate = CDate(Me.txtRequirementPickDate.Text)
        Else
            cRequirement.StartDate = Constants.DEFAULT_DATE_VALUE
        End If
        If Me.txtRequirementETADate.Text <> String.Empty Then
            cRequirement.ETADate = CDate(Me.txtRequirementETADate.Text)
        Else
            cRequirement.ETADate = Constants.DEFAULT_DATE_VALUE
        End If
        If Me.txtRequirementCompleteDate.Text <> String.Empty Then
            cRequirement.CompleteDate = CDate(Me.txtRequirementCompleteDate.Text)
        Else
            cRequirement.CompleteDate = Constants.DEFAULT_DATE_VALUE
        End If

        'Added by Michael Behar 02/11/2017
        If Me.txtRequirementCostPrice.Text <> String.Empty Then
            cRequirement.CostPrice = CInt(Me.txtRequirementCostPrice.Text)
        Else
            cRequirement.CostPrice = Constants.DEFAULT_INTEGER_VALUE
        End If

        If Me.txtRequirementPurchaseOrder.Text <> String.Empty Then
            cRequirement.PurchaseOrderNo = Me.txtRequirementPurchaseOrder.Text
        Else
            cRequirement.PurchaseOrderNo = String.Empty
        End If


        Dim dbConn As New DBConnection
        Dim cnn As SqlConnection = dbConn.getSQLConnection_To_OzRollPlantationScheduling
        Dim trans As SqlTransaction = Nothing
        Dim bolSaveOK As Boolean = True

        Try
            cnn.Open()
            trans = cnn.BeginTransaction

            If cRequirement.AdditionalRequirementsID = Constants.DEFAULT_INTEGER_VALUE Then
                Dim intID As Integer = Constants.DEFAULT_INTEGER_VALUE
                intID = service.addTempAddRequirementsRecord(cRequirement, cnn, trans)
                If intID = Constants.DEFAULT_INTEGER_VALUE Then
                    bolSaveOK = False
                End If
            Else
                bolSaveOK = service.updateTempAddRequirementsRecord(cRequirement, cnn, trans)
            End If

            If bolSaveOK Then
                trans.Commit()
            Else
                trans.Rollback()
            End If

        Catch ex As Exception
            If Not trans Is Nothing Then
                trans.Rollback()
            End If
            If cnn.State = ConnectionState.Open Then
                cnn.Close()
            End If
            EventLog.addEventLogEmail(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name & ": " & System.Reflection.MethodBase.GetCurrentMethod().Name & " - " & ex.Message & Environment.NewLine & getPageInfo())
        Finally
            If Not IsNothing(trans) Then
                trans.Dispose()
            End If
            trans = Nothing
            If cnn.State = ConnectionState.Open Then
                cnn.Close()
            End If
            cnn.Dispose()
            cnn = Nothing
        End Try

        service = Nothing

        If bolSaveOK Then
            loadAdditionalRequirements()
        End If

    End Sub

    Private Sub cboCustomer_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cboCustomer.SelectedIndexChanged

        If cboCustomer.SelectedIndex > 0 Then
            Dim service As New AppService
            Dim dt As DataTable = service.runSQLScheduling("select * from dbo.tblCustomers where CustomeriD = " & cboCustomer.SelectedValue.ToString)

            If dt.Rows.Count > 0 Then
                lblCustomerDetails.Text = String.Empty

                If Not IsDBNull(dt.Rows(0)("TradingName")) Then
                    lblCustomerDetails.Text &= dt.Rows(0)("TradingName").ToString & Constants.STR_BREAK
                End If

                If Not IsDBNull(dt.Rows(0)("CustomerAbbreviation")) Then
                    lblCustomerDetails.Text &= dt.Rows(0)("CustomerAbbreviation").ToString & Constants.STR_BREAK
                End If

                ' Populate physical address details.
                Dim dtAddresses As DataTable = service.getAddressesByCustomerID(CInt(cboCustomer.SelectedValue))

                For Each r As DataRow In dtAddresses.Rows
                    If Not IsDBNull(r("AddressType")) AndAlso Not IsDBNull(r("IsPrimary")) Then
                        If r("AddressType") = SharedEnums.AddressType.Physical AndAlso CBool(r("IsPrimary")) Then

                            lblCustomerDetails.Text &= service.convertAddressDataRowToString(dtAddresses.Rows(0), Constants.STR_BREAK) & Constants.STR_BREAK
                            Exit For
                        End If
                    End If
                Next r

                If Not IsDBNull(dt.Rows(0)("CustomerPhone1")) Then
                    lblCustomerDetails.Text &= dt.Rows(0)("CustomerPhone1").ToString & Constants.STR_BREAK
                End If

                If Not IsDBNull(dt.Rows(0)("CustomerPhone2")) Then
                    lblCustomerDetails.Text &= dt.Rows(0)("CustomerPhone1").ToString & Constants.STR_BREAK
                End If

                If Not IsDBNull(dt.Rows(0)("CustomerPhone3")) Then
                    lblCustomerDetails.Text &= dt.Rows(0)("CustomerPhone1").ToString & Constants.STR_BREAK
                End If

                ' Populate all delivery addresses into ddl for customer.
                cboDeliveryAddress.Items.Clear()
                cboDeliveryAddress.Items.Add(New ListItem(String.Empty, 0))

                ' Remember the previously selected address ID from the production schedule.
                Dim cProdSchedule As ProductionSchedule = service.getProdScheduleClsByID(CInt(txtId.Text))

                cProdSchedule.DeliveryAddressID = cProdSchedule.DeliveryAddressID

                For Each r As DataRow In dtAddresses.Rows
                    If Not IsDBNull(r("AddressType")) AndAlso Not IsDBNull(r("Discontinued")) Then
                        If r("AddressType") = SharedEnums.AddressType.Delivery AndAlso Not CBool(r("Discontinued")) Then
                            Dim cListItem As New ListItem(service.convertAddressDataRowToString(r, ", "), CInt(r("ID")))

                            cboDeliveryAddress.Items.Add(cListItem)

                            If Not IsDBNull(r("IsPrimary")) Then
                                If CBool(r("IsPrimary")) Then
                                    cListItem.Attributes.CssStyle.Add(HtmlTextWriterStyle.FontWeight, "bold")
                                End If
                            End If
                        End If
                    End If
                Next r

                ' Select the delivery address
                If cProdSchedule.DeliveryAddressID >= 0 Then
                    If cboDeliveryAddress.Items.FindByValue(cProdSchedule.DeliveryAddressID) IsNot Nothing Then
                        cboDeliveryAddress.SelectedValue = cProdSchedule.DeliveryAddressID
                    End If
                End If

                If Not IsDBNull(dt.Rows(0)("SyBizCustomerID")) Then
                    txtSybizCustomerID.Text &= dt.Rows(0)("SyBizCustomerID").ToString & Constants.STR_BREAK
                End If

                If Not IsDBNull(dt.Rows(0)("CollectionFromFactory")) Then
                    If CInt(dt.Rows(0)("CollectionFromFactory")) = 1 Then
                        lblPostProduction1.Text = "Invoice Date"
                        lblPostProduction2.Text = "Collect Date"
                    Else
                        lblPostProduction1.Text = "Despatch Date"
                        lblPostProduction2.Text = "Invoice Date"
                    End If
                Else
                    lblPostProduction1.Text = "Despatch Date"
                    lblPostProduction2.Text = "Invoice Date"
                End If
            Else
                lblPostProduction1.Text = "Despatch Date"
                lblPostProduction2.Text = "Invoice Date"
                lblCustomerDetails.Text = String.Empty
            End If
            dt.Dispose()
            dt = Nothing
            service = Nothing
        Else
            lblPostProduction1.Text = "Despatch Date"
            lblPostProduction2.Text = "Invoice Date"
            lblCustomerDetails.Text = String.Empty
        End If

    End Sub

    Private Sub btnAddRequirement_Click(sender As Object, e As EventArgs) Handles btnAddRequirement.Click

        ModalPopupExtender4.Show()

    End Sub

    Private Sub dgvPowdercoat_RowCommand(sender As Object, e As GridViewCommandEventArgs) Handles dgvPowdercoat.RowCommand

        If (e.CommandName = "PowdercoatDetail") Then
            Dim index As Integer = Convert.ToInt32(e.CommandArgument)
            Dim row As GridViewRow = dgvPowdercoat.Rows(index)

            Dim intAdditionalRequirementsID As Integer = CInt(dgvPowdercoat.DataKeys(row.RowIndex).Values("AdditionalRequirementsID"))
            loadPowdercoatingToPopup(intAdditionalRequirementsID)

            Me.txtHidPCRequirementsID.Text = intAdditionalRequirementsID.ToString

            Me.txtHiddenFlyScreen.Text = ""

            ModalPopupExtender3.Show()

        End If

    End Sub

    Private Sub dgvAdditionalRequirements_RowCommand(sender As Object, e As GridViewCommandEventArgs) Handles dgvAdditionalRequirements.RowCommand

        If (e.CommandName = "RequirementDetail") Then
            Dim index As Integer = Convert.ToInt32(e.CommandArgument)
            Dim row As GridViewRow = dgvAdditionalRequirements.Rows(index)

            Dim intAdditionalRequirementsID As Integer = CInt(dgvAdditionalRequirements.DataKeys(row.RowIndex).Values("AdditionalRequirementsID"))
            loadRequirementsToPopup(intAdditionalRequirementsID)

            Me.txtHidRequirementsID.Text = intAdditionalRequirementsID.ToString

            ModalPopupExtender4.Show()

        End If

    End Sub

    Protected Sub loadPowdercoatingToPopup(intAdditionalRequirementsID As Integer)

        Dim service As New AppService
        Dim dt As DataTable = service.getTempAddRequirementsRecord(intAdditionalRequirementsID)
        If dt.Rows.Count > 0 Then
            Me.cboPowdercoater.SelectedValue = CInt(dt.Rows(0)("PowdercoaterID"))
            If Not IsDBNull(dt.Rows(0)("PickDate")) Then
                Me.txtPickDate.Text = Format(CDate(dt.Rows(0)("PickDate")), "d MMM yyyy")
            End If
            If Not IsDBNull(dt.Rows(0)("StartDate")) Then
                Me.txtPCStartDate.Text = Format(CDate(dt.Rows(0)("StartDate")), "d MMM yyyy")
            End If
            If Not IsDBNull(dt.Rows(0)("ETADate")) Then
                Me.txtPCETADate.Text = Format(CDate(dt.Rows(0)("ETADate")), "d MMM yyyy")
            End If
            If Not IsDBNull(dt.Rows(0)("CompleteDate")) Then
                Me.txtPCStartDate.Text = Format(CDate(dt.Rows(0)("CompleteDate")), "d MMM yyyy")
            End If
            Me.txtPCDescription.Text = dt.Rows(0)("DescriptionText").ToString

            'puchase order no
            Me.txtPCPurchaseOrder.Text = dt.Rows(0)("PurchaseOrderNo").ToString

            'cost price
            If Not IsDBNull(dt.Rows(0)("CostPrice")) Then
                Me.txtPCCostPrice.Text = Format(CDate(dt.Rows(0)("CostPrice")), "d MMM yyyy")
            End If
        End If
        dt.Dispose()
        dt = Nothing

        dt = service.getJobStockUsageByReqID(intAdditionalRequirementsID)
        Me.dgvStockList2.DataSource = dt
        Me.dgvStockList2.DataBind()

        service = Nothing

    End Sub

    Protected Sub loadRequirementsToPopup(intAdditionalRequirementsID As Integer)

        Dim service As New AppService
        Dim dt As DataTable = service.getTempAddRequirementsRecord(intAdditionalRequirementsID)
        If dt.Rows.Count > 0 Then
            Me.cboRequirementType.SelectedValue = CInt(dt.Rows(0)("AdditionalRequirementsID"))
            If Not IsDBNull(dt.Rows(0)("PickDate")) Then
                Me.txtRequirementPickDate.Text = Format(CDate(dt.Rows(0)("PickDate")), "d MMM yyyy")
            End If
            If Not IsDBNull(dt.Rows(0)("StartDate")) Then
                Me.txtRequirementStartDate.Text = Format(CDate(dt.Rows(0)("StartDate")), "d MMM yyyy")
            End If
            If Not IsDBNull(dt.Rows(0)("ETADate")) Then
                Me.txtRequirementETADate.Text = Format(CDate(dt.Rows(0)("ETADate")), "d MMM yyyy")
            End If
            If Not IsDBNull(dt.Rows(0)("CompleteDate")) Then
                Me.txtRequirementCompleteDate.Text = Format(CDate(dt.Rows(0)("CompleteDate")), "d MMM yyyy")
            End If
            Me.txtRequirementDescription.Text = dt.Rows(0)("DescriptionText").ToString

            'puchase order no
            Me.txtRequirementPurchaseOrder.Text = dt.Rows(0)("PurchaseOrderNo").ToString

            'cost price
            If Not IsDBNull(dt.Rows(0)("CostPrice")) Then
                Me.txtRequirementCostPrice.Text = Format(CDate(dt.Rows(0)("CostPrice")), "d MMM yyyy")
            End If
        End If
        dt.Dispose()
        dt = Nothing

        dt = service.getJobStockUsageByReqID(intAdditionalRequirementsID)
        Me.dgvStockList.DataSource = dt
        Me.dgvStockList.DataBind()

        service = Nothing

    End Sub

    Private Sub btnCancelPowdercoat_Click(sender As Object, e As EventArgs) Handles btnCancelPowdercoat.Click

        Me.txtHidPCRequirementsID.Text = String.Empty
        Me.cboPowdercoater.SelectedIndex = 0
        Me.txtPCDescription.Text = String.Empty
        Me.txtPickDate.Text = String.Empty
        Me.txtPCETADate.Text = String.Empty
        Me.txtPCStartDate.Text = String.Empty
        Me.txtPCPurchaseOrder.Text = String.Empty
        Me.txtPCCostPrice.Text = String.Empty

    End Sub

    Private Sub btnCancelRequirement_Click(sender As Object, e As EventArgs) Handles btnCancelRequirement.Click

        Me.txtHidRequirementsID.Text = String.Empty
        Me.cboRequirementType.SelectedIndex = 0
        Me.txtRequirementDescription.Text = String.Empty
        Me.txtRequirementPickDate.Text = String.Empty
        Me.txtRequirementETADate.Text = String.Empty
        Me.txtRequirementCompleteDate.Text = String.Empty
        Me.txtRequirementPurchaseOrder.Text = String.Empty
        Me.txtRequirementCostPrice.Text = String.Empty

    End Sub

    Protected Sub checkOutstandingItemsForAcceptance()

        Me.lblAcceptance.Text = String.Empty

        Dim service As New AppService
        Dim dtShutters As DataTable = service.getLouvreDetailsByProductionScheduleID(Me.txtId.Text)
        If dtShutters.Rows.Count > 0 Then

            'check for standoff shutters
            Dim drows() As DataRow = dtShutters.Select("ShutterTypeID=13")
            If drows.Length > 0 Then
                'standoff shutters exists - prompt for action
                Me.lblAcceptance.Text = "- Standoff shutters have been requested. Please confirm all details are correct for these. <br/><br/>"
            End If
            drows = Nothing

            'check for curved track
            drows = dtShutters.Select("CurvedTrack=1")
            If drows.Length > 0 Then
                'curved track required
                'prompt for bender order to be done

                Me.lblAcceptance.Text &= "- Curved track is required. Please ensure the order is entered for the bender.<br/><br/>"
                Me.lblAcceptance.Text &= "- A separate powdercoat order is also required.<br/><br/>"

                Me.lblAcceptance.Text &= "- A CAD drawing is required for this job.<br/><br/>"
                Me.lblAcceptance.Text &= "- Please ensure a copy of this is uploaded to the job once completed.<br/>"
            End If
            drows = Nothing

        End If
        dtShutters.Dispose()
        dtShutters = Nothing

        service = Nothing

    End Sub

    'Protected Sub btnJobCosting_Click(sender As Object, e As EventArgs) Handles btnJobCosting.Click
    '    Dim service As New AppService
    '    Dim SQlStr As String = "select CustomerOrderNumber from jc.Job where CustomerOrderNumber = '"
    '    SQlStr += lblOzrollID.Text + "'"
    '    Dim dt1 As DataTable = service.runSQLOzrollSybiz(SQlStr)
    '    If dt1.Rows.Count() = 0 Then
    '        SyBizAdd()
    '    End If
    'End Sub

    Protected Function SyBizAdd(cnn As SqlConnection, ByRef trans As SqlTransaction) As Boolean
        SyBizShared.LogoutSybiz()
        SyBizShared.PingSybiz()
        lstErrors.Visible = True

        Dim Job As Vision.Platform.JobCosting.Job
        Job = Vision.Platform.JobCosting.Job.GetObject(0)
        Job.Description = lblOzrollID.Text + " " + txtCustomerName.Text
        Job.JobTemplate = 20
        Job.Group = 17
        Job.SortCode = 158
        Job.JobInvoicingMethod = Vision.Platform.Core.Enumerations.JobInvoicingMethod.Fixed
        Job.Customer = IIf(txtSybizCustomerID.Text = "0", 0, txtSybizCustomerID.Text)
        Job.CustomerOrderNumber = Me.txtContractNumber.Text & " " & Me.txtCustomerName.Text
        Job.ContractValue = CDec(Me.txtCostPrice.Text)
        Job.TaxCode = 6      'TaxXCodeID=6, TaxCode= 103 - GST Applies


        Job.StartDate = DateTime.Now()
        Job.TargetCompletionDate = DateTime.Now().AddDays(14)


        Job.ExtendedDescription = txtContractNumber.Text + " " + txtCustomerName.Text

        Dim intTotalPanels As Integer = 0
        Dim intCLPanels As Integer = 0
        Dim intDLPanels As Integer = 0
        Dim intDLiPanels As Integer = 0
        Dim decTotalSQM As Decimal = 0

        Dim service As New AppService
        Dim dtShutters As DataTable = service.getTempLouvreJobDetailsRecordsByTempGUID(Me.txtPSDetailGUID.Text, cnn, trans)
        If dtShutters.Rows.Count > 0 Then
            For i As Integer = 0 To dtShutters.Rows.Count - 1
                If dtShutters.Rows(i)("Deleted") = 0 Then

                    Select Case dtShutters.Rows(i)("ProductID").ToString
                        Case "1"
                            intDLPanels = CInt(dtShutters.Rows(i)("NoOfPanels"))
                        Case "2"
                            intDLiPanels = CInt(dtShutters.Rows(i)("NoOfPanels"))
                        Case "3"
                            intCLPanels = CInt(dtShutters.Rows(i)("NoOfPanels"))
                        Case Else

                    End Select

                    intTotalPanels = CInt(dtShutters.Rows(i)("NoOfPanels"))

                    Dim intHeight As Integer = CInt(dtShutters.Rows(i)("Height"))
                    Dim intWidth As Integer = CInt(dtShutters.Rows(i)("Width"))

                    decTotalSQM += (intHeight / 1000) * (intWidth / 1000)

                End If
            Next
        End If
        dtShutters.Dispose()
        dtShutters = Nothing

        service = Nothing

        'add values for the jc.JobExtendedProperty table
        Job.ExtendedProperties.Item(1).ObjectValue = intTotalPanels 'No of Panels
        Job.ExtendedProperties.Item(2).ObjectValue = intCLPanels 'Qty CL Panels
        Job.ExtendedProperties.Item(3).ObjectValue = intDLPanels 'Qty DL Panels
        Job.ExtendedProperties.Item(4).ObjectValue = intDLiPanels 'Qty DLi Panels
        Job.ExtendedProperties.Item(5).ObjectValue = decTotalSQM 'Square Metres
        'Job.ExtendedProperties.Item(6).ObjectValue = DateTime.Now 'Date Despatched


        If Job.BrokenRulesCollection.Count > 0 Then
            'MessageBox.Show("Incomple Information. Could not Save the Invoice")
            For i = 0 To Job.BrokenRulesCollection.Count - 1
                lstErrors.Items.Add("Rule No:" + (i + 1).ToString + "--> " + Job.GetAllBrokenRules(i).RuleName)
                lstErrors.Items.Add("Description : " + Job.GetAllBrokenRules(i).Description)
                lstErrors.Items.Add("    ")
            Next
            Return False
        Else
            Job.Save()
            'lblStatus.Text = " The New Job has been Saved in SyBiz Database "
        End If
        Return True
    End Function
    Protected Sub Attachments(ScheduleID As Integer)
        Dim service As New AppService
        Dim intRecCount As Integer = 0
        Dim RetArray As String() = {"", "", "", "", "", "", ""}
        Dim dtsave As DataTable = ViewState("DTUploadFiles")

        Dim TempDir1 As String = Server.MapPath("~/UpLoadedFiles/") + txtTempFolder.Text
        Dim TempDir2 As String = Server.MapPath("~/UpLoadedFiles/") + ScheduleID.ToString()
        'Dim AllFiles As System.IO.FileInfo = New IO.FileInfo(TempDir)
        'AllFiles.Delete()
        Dim CharPos As Integer
        Dim datePrefix As String = "_" + DateTime.Now.ToString("yyyyMMdd_HHmmss")
        RetArray(0) = Server.MapPath("~/UpLoadedFiles/")
        RetArray(3) = ScheduleID  'ScheduleID ID 
        RetArray(4) = "3"   'Reference Type =3 for Contact ID
        RetArray(5) = txtCustomerId.Text
        For Each _file As String In Directory.GetFiles(TempDir1)
            If Not Directory.Exists(TempDir2) Then
                Directory.CreateDirectory(TempDir2)
            End If
            CharPos = _file.LastIndexOf("\")
            RetArray(1) = _file.Substring(CharPos + 1, _file.Length - CharPos - 1)
            RetArray(6) = TempDir2 + "\" + RetArray(1)

            If dtsave.Rows(intRecCount).Item("deleted") = "2" Then
                File.Copy(_file, RetArray(6))
                service.addUploadedFiles(RetArray)
            End If
            intRecCount += 1
        Next
    End Sub
    Private Sub AddToDT(ByVal DataArray As String())
        Dim dtNew As New DataTable
        dtNew = ViewState("DTUploadFiles")
        Dim dtRowNo As Integer = dtNew.Rows.Count() + 1
        Dim drow As DataRow = dtNew.NewRow
        drow("ID") = dtRowNo
        drow.Item("referenceID") = IIf(DataArray(3).Trim.Length = 0, 0, DataArray(3))
        drow.Item("referenceType") = DataArray(4)
        drow.Item("uploadBy") = DataArray(5)
        drow.Item("deleted") = IIf(DataArray(0).Trim.Length = 0, "2", DataArray(0))
        drow.Item("filename") = DataArray(6)
        dtNew.Rows.Add(drow)
        drow = Nothing
        If DataArray(0).Trim.Length = 0 Then
            btnSave.Enabled = True
            AddButton(dtNew.Rows.Count - 1, True)
        End If
    End Sub
    Protected Sub UploadButton_Click(sender As Object, e As EventArgs) Handles UploadButton.Click
        Dim service As New AppService
        Dim RetArray As String() = {"", "", "", "", "", "", ""}, ResolvedURL As String
        Dim datePrefix As String = "_" + DateTime.Now.ToString("yyyyMMdd_HHmmss")
        RetArray(4) = "3"   'Reference Type =3 for Contact ID
        RetArray(5) = txtCustomerId.Text
        If FileUploads.HasFile And txtIntScheduleID.Text <> "-99" Then
            Dim Filesplit As String()
            RetArray(1) = IO.Path.GetFileName(FileUploads.FileName).ToString()
            RetArray(3) = txtIntScheduleID.Text  'ScheduleID ID 
            Filesplit = RetArray(1).Split(".")
            RetArray(1) = IIf(Filesplit.Length = 0, RetArray(1) + datePrefix, Filesplit(0) + datePrefix + "." + Filesplit(1))
            RetArray(0) = Server.MapPath("~/UpLoadedFiles/")
            RetArray(6) = RetArray(0) + txtTempFolder.Text + "\"
            RetArray = SharedFunctions.UploadFiles(FileUploads, RetArray)
            If RetArray(2).ToLower.IndexOf("uploaded") = -1 Then
                lblStatus.Text = RetArray(2)
                Exit Sub
            End If
            'Added For Label Functionality
            ResolvedURL = "~/UpLoadedFiles/" & txtTempFolder.Text & "/" & RetArray(1)
            Me.lblAttachments.Text &= "<a target=""_blank"" href=""" & ResolveUrl(ResolvedURL) & """>" & RetArray(1) & "</a><br />"
            '------------------------
            lblStatus.Text = RetArray(2)
            RetArray(0) = ""                       ' To Check if Files Uploaded are New
            RetArray(6) = RetArray(6) + RetArray(1)
            AddToDT(RetArray)
        Else
            lblStatus.Text = "Upload status: Please select the a file to Upload."
        End If
        If txtIntScheduleID.Text = "-99" Then
            lblStatus.Text = "Upload status: Please select the Customer Contact before proceeding."
        End If

    End Sub

    Private Sub CreateUpLoadDataTable()
        Dim DTUploadFiles As New DataTable

        Dim col As DataColumn = New DataColumn
        col.ColumnName = "ID"
        col.DataType = System.Type.GetType("System.Int32")
        DTUploadFiles.Columns.Add(col)
        col = Nothing

        col = New DataColumn
        col.ColumnName = "referenceID"
        col.DataType = System.Type.GetType("System.Int32")
        DTUploadFiles.Columns.Add(col)
        col = Nothing

        col = New DataColumn
        col.ColumnName = "referenceType"
        col.DataType = System.Type.GetType("System.Int32")
        DTUploadFiles.Columns.Add(col)
        col = Nothing

        col = New DataColumn
        col.ColumnName = "uploadBy"
        col.DataType = System.Type.GetType("System.Int32")
        DTUploadFiles.Columns.Add(col)
        col = Nothing

        col = New DataColumn
        col.ColumnName = "deleted"
        col.DataType = System.Type.GetType("System.Int32")
        DTUploadFiles.Columns.Add(col)
        col = Nothing

        col = New DataColumn
        col.ColumnName = "delby"
        col.DataType = System.Type.GetType("System.Int32")
        DTUploadFiles.Columns.Add(col)
        col = Nothing

        col = New DataColumn
        col.ColumnName = "filename"
        col.DataType = System.Type.GetType("System.String")
        DTUploadFiles.Columns.Add(col)
        col = Nothing

        col = New DataColumn
        col.ColumnName = "delDate"
        col.DataType = System.Type.GetType("System.DateTime")
        DTUploadFiles.Columns.Add(col)
        col = Nothing
        ViewState("DTUploadFiles") = DTUploadFiles

    End Sub
    Protected Sub LoadAttchments(fromLoad As Boolean)
        Dim service As New AppService
        Dim RetArray As String() = {"", "", "", "", "", "", ""}
        Dim TempDir1 As String = Server.MapPath("~/UpLoadedFiles/") + txtTempFolder.Text
        Dim TempDir2 As String = Server.MapPath("~/UpLoadedFiles/") + txtIntScheduleID.Text
        Dim SQLStr As String = "Select * from dbo.tblUpLoadFiles where referenceID=" + txtIntScheduleID.Text
        Dim FileName As String, FileName2 As String, ResolvedURL As String, CharPos As Integer
        Dim dt1 As DataTable
        lblAttachments.Text = ""
        If fromLoad Then
            dt1 = service.runSQLScheduling(SQLStr)
        Else
            dt1 = ViewState("DTUploadFiles")
            TempDir2 = TempDir1
        End If


        For i = 0 To dt1.Rows.Count - 1
            If Not Directory.Exists(TempDir2) Then
                Exit For
            End If
            If Not Directory.Exists(TempDir1) Then
                Directory.CreateDirectory(TempDir1)
            End If

            FileName = dt1.Rows(i).Item("filename")
            CharPos = FileName.LastIndexOf("\")
            FileName2 = FileName.Substring(CharPos + 1, FileName.Length - CharPos - 1)
            ResolvedURL = "~/UpLoadedFiles/" & txtTempFolder.Text & "/" & FileName2

            If IO.File.Exists(FileName) Then
                Me.lblAttachments.Text &= "<a target=""_blank"" href=""" & ResolveUrl(ResolvedURL) & """>" & FileName2 & "</a><br />"
                AddButton(i, IIf(dt1.Rows(i).Item("deleted").ToString = "2", True, False))
            End If

            If fromLoad Then
                FileName2 = TempDir1 + "\" + FileName2
                File.Copy(FileName, FileName2)
                RetArray(0) = dt1.Rows(i).Item("deleted")
                RetArray(1) = FileName2
                RetArray(2) = FileName.Substring(CharPos + 1, FileName.Length - CharPos - 1)
                RetArray(3) = dt1.Rows(i).Item("referenceID")
                RetArray(4) = dt1.Rows(i).Item("referenceType")
                RetArray(5) = dt1.Rows(i).Item("uploadby")
                RetArray(6) = FileName2
                AddToDT(RetArray)
            End If

        Next
    End Sub

    Private Sub AddButton(RowNo As Integer, btnEnable As Boolean)
        Dim tbl1 As New Table
        Dim tblRows As New TableRow
        Dim b15 As New Button
        b15.Text = "Delete"
        b15.ID = "btnDelete" & RowNo
        b15.CssClass = "form-button"
        b15.Enabled = btnEnable
        b15.Attributes.Add("OnClick", "PostDelete(this.id)")
        Me.pnlButtons.Controls.Add(b15)
    End Sub
    Protected Sub UploadButton2_Click(sender As Object, e As EventArgs) Handles UploadButton2.Click
        Dim currButton As Button = CType(sender, Button)
        Dim btnName As String = txtbuttonName.Text
        btnName = btnName.Substring(9, btnName.Length - 9)
        Dim rowNo As Integer = CInt(btnName)
        DeleteFromDT(rowNo, currButton)
    End Sub
    Private Sub DeleteFromDT(ByVal RowNo As Integer, btnDel As Button)
        Dim dtNew As New DataTable
        dtNew = ViewState("DTUploadFiles")
        dtNew.Rows(RowNo).Delete()
        ViewState("DTUploadFiles") = dtNew
        '   RemoveHandler btnDel.Click, AddressOf btnDeleteAll_Click
        Me.pnlButtons.Controls.Remove(btnDel)
    End Sub
    Protected Sub btnDeleteAll_Click(ByVal sender As Object, ByVal e As System.EventArgs)

    End Sub

    Protected Sub populateGRADetailsGrid()

        Dim service As New AppService
        Dim SQLstr As String
        SQLstr = "Select GRAID, ScheduleID, OpeningNumber, PanelNumber, IssueDescription, CauseOfIssue, SuggestedAction from tblGRADetails where ScheduleID = " & Me.txtId.Text
        Dim dtGridDetails As DataTable = service.runSQLScheduling(SQLstr)
        Me.dgvGRADetails.DataSource = dtGridDetails
        Me.dgvGRADetails.DataBind()

    End Sub

    Protected Function generateProductionSheetData(dtLouvreDetails As DataTable, cnn As SqlConnection, ByRef trans As SqlTransaction) As Boolean
        Dim service As New AppService
        Dim bolOK As Boolean = True

        'check for template existence
        Dim dtProductionSheetTemplate As DataTable = New DataTable
        If dtProductionSheetTemplate.Rows.Count > 0 Then


        Else
            'none found for this combination yet
            Return False
        End If
        dtProductionSheetTemplate.Dispose()
        dtProductionSheetTemplate = Nothing

        Dim dtProductionSheetControlValues As DataTable = New DataTable
        If dtProductionSheetControlValues.Rows.Count > 0 Then

            Dim cLouvreDetails As LouvreDetails = service.setLouvreDetailsObjectFromDataRow(dtLouvreDetails.Rows(0))
            bolOK = runCalculations(cLouvreDetails, cnn, trans)

        Else
            'none found for this combination yet
            Return False
        End If
        dtProductionSheetControlValues.Dispose()
        dtProductionSheetControlValues = Nothing

        service = Nothing

        Return bolOK

    End Function

    Protected Function runCalculations(cLouvreDetails As LouvreDetails, cnn As SqlConnection, ByRef trans As SqlTransaction) As Boolean
        Dim cLouvreSpec As New LouvreSpecDesign

        Dim intOpeningHeight As Integer = 0
        Dim intOpeningWidth As Integer = 0
        Dim intNoOfPanels As Integer = 0

        Dim intPanelHeight As Integer = 0
        Dim intPanelWidth As Integer = 0
        Dim intGrossTransomHeight As Integer = 0
        Dim intPanelTransomHeight As Integer = 0
        Dim intStileLength As Integer = 0
        Dim intRailsLength As Integer = 0
        Dim intNoOfProfiles As Integer = 0
        Dim intProfileCutLength As Integer = 0
        Dim intBladeInfillTop As Integer = 0
        Dim intBladeInfillBottom As Integer = 0
        Dim intTransom1Cut As Integer = 0
        Dim intTransom2Cut As Integer = 0
        Dim intDummyBladeTop As Integer = 0
        Dim intDummyBladeBottom As Integer = 0

        Dim service As New AppService

        'below calculations are for a DLi bifold with transom - taken from the production sheet

        intOpeningHeight = cLouvreDetails.Height
        intOpeningWidth = cLouvreDetails.Width
        intNoOfPanels = cLouvreDetails.NoOfPanels

        intPanelHeight = intOpeningHeight - (40 - 10 - 13 - 12)
        intPanelWidth = intOpeningWidth - (8 - ((intNoOfPanels - 1) * 5) - 8)
        intGrossTransomHeight = cLouvreDetails.MidRailHeight

        intPanelTransomHeight = 0

        intStileLength = intPanelHeight - (2 * 3)
        intRailsLength = intPanelWidth - 89

        intProfileCutLength = intPanelWidth - 114
        intNoOfProfiles = (intPanelHeight - 95) / 80

        intBladeInfillTop = intPanelHeight - intPanelTransomHeight - 45
        intBladeInfillBottom = intPanelTransomHeight - 135
        intTransom1Cut = intPanelWidth - 89
        intTransom2Cut = intPanelWidth - 89
        intDummyBladeTop = intPanelWidth - 100
        intDummyBladeBottom = intPanelWidth - 100





        Dim intCornerPlugs As Integer = 0
        Dim intHoleCaps As Integer = 0

        intCornerPlugs = intNoOfPanels * 4
        intHoleCaps = intNoOfPanels * 12








        cLouvreSpec.LouvreDetailsID = cLouvreDetails.LouvreDetailID

        cLouvreSpec.OpeningHeight = intOpeningHeight
        cLouvreSpec.OpeningWidth = intOpeningWidth
        cLouvreSpec.NoOfPanels = intNoOfPanels

        cLouvreSpec.PanelHeight = intPanelHeight
        cLouvreSpec.PanelWidth = intPanelWidth
        cLouvreSpec.PanelTransomHeight = intPanelTransomHeight

        cLouvreSpec.StileLength = intStileLength
        cLouvreSpec.BottomRailsLength = intRailsLength
        cLouvreSpec.TopRailsLength = intRailsLength

        cLouvreSpec.ProfileCutLength = intProfileCutLength
        cLouvreSpec.ProfileSize = CInt(cLouvreDetails.BladeSize)
        cLouvreSpec.NoOfProfileSlats = intNoOfProfiles

        cLouvreSpec.TopInfillTopLength = intBladeInfillTop
        cLouvreSpec.BottomInfillTopLength = intBladeInfillBottom

        cLouvreSpec.TransomWidth = intTransom1Cut
        cLouvreSpec.Transom2Width = intTransom2Cut

        cLouvreSpec.DummyBladeTopWidth = intDummyBladeTop
        cLouvreSpec.DummyBladeBottomWidth = intDummyBladeBottom

        cLouvreSpec.NoOfCornerPlugs = intCornerPlugs
        cLouvreSpec.NoOfHoleCaps = intHoleCaps


        Dim intID As Integer = Constants.DEFAULT_INTEGER_VALUE

        Dim dt As DataTable = service.GetLouvreSpecDesignRecordByLouvreDetailsID(cLouvreDetails.LouvreDetailID, cnn, trans)
        If dt.Rows.Count > 0 Then
            Dim bolOK As Boolean = service.updateLouvreSpecDesign(cLouvreSpec, cnn, trans)
            If bolOK Then
                intID = cLouvreSpec.LouvreDetailsID
            End If
        Else
            intID = service.addLouvreSpecDesign(cLouvreSpec, cnn, trans)
        End If
        dt.Dispose()
        dt = Nothing

        service = Nothing

        If intID = Constants.DEFAULT_INTEGER_VALUE Then
            Return False
        Else
            Return True
        End If

    End Function

    Protected Function checkSybizCustomerDetails() As Boolean
        Dim bolStopCustomer As Boolean = False

        Dim service As New AppService
        Dim dt As DataTable = service.runSQLOzrollSybiz("select * from dr.Customer where CustomerId=" & Me.txtSybizCustomerID.Text)
        If dt.Rows.Count > 0 Then
            If CInt(dt.Rows(0)("TradingTermId")) = 1 Then
                'cod
                Me.lblStopCustomerLabel.Text = "Cash on Delivery customer - approval is required"
                bolStopCustomer = True
            End If

            If CBool(dt.Rows(0)("StopJobs")) = True Then
                'stop jobs - there is also a "stop orders" field
                Me.lblStopCustomerLabel.Text = "This customer is currently under a stop."
                bolStopCustomer = True
            End If

            'check credit limit here also?
            Me.lblStopCustomerLabel.Text = ""


        End If
        dt.Dispose()
        dt = Nothing

        service = Nothing

        Return bolStopCustomer

    End Function

    Protected Sub getCustomerCreditDetails()

        Dim service As New AppService
        Dim dt As DataTable = service.runSQLOzrollSybiz("select * from dr.Customer where CustomerId=" & Me.txtSybizCustomerID.Text)
        If dt.Rows.Count > 0 Then

            Me.lblCreditDetails.Text = "Credit Limit: " & Format(dt.Rows(0)("CreditLimit"), "currency") & "<br/><br/>"

            Me.lblCreditDetails.Text &= "Outstanding Invoice Amount: " & Format(dt.Rows(0)("CreditLimit"), "currency") & "<br/><br/>"

            Me.lblCreditDetails.Text &= "Credit Currently Avalable: " & Format(dt.Rows(0)("CreditLimit"), "currency") & "<br/><br/>"

            Me.lblCreditDetails.Text &= "Current Job Amount: " & Format(dt.Rows(0)("CreditLimit"), "currency") & "<br/><br/>"
        End If
        dt.Dispose()
        dt = Nothing

        service = Nothing

    End Sub

    Private Sub btnCreditApprove_Click(sender As Object, e As EventArgs) Handles btnCreditApprove.Click

        Me.pnlStopCustomer.Visible = False

        'update table with who allowed approval

        Dim service As New AppService
        service.executeSQLScheduling("update dbo.tblProductionScheduleList set CreditOverrideUserID=" & Session("sessUserID").ToString & ",CreditOverrideDateTime=getdate() where ID=" & Me.txtId.Text)
        service = Nothing

    End Sub

    Private Sub btnCreditCancel_Click(sender As Object, e As EventArgs) Handles btnCreditCancel.Click

        Me.ModalPopupExtender1.Hide()

    End Sub

    Private Sub btnViewCreditDetails_Click(sender As Object, e As EventArgs) Handles btnViewCreditDetails.Click

        Me.ModalPopupExtender1.Show()

    End Sub

    Private Sub btnOutstanding_Click(sender As Object, e As EventArgs) Handles btnOutstanding.Click

        Me.ModalPopupExtender5.Show()

    End Sub

    Private Sub btnCancelOutstanding_Click(sender As Object, e As EventArgs) Handles btnCancelOutstanding.Click

        Me.ModalPopupExtender5.Hide()

    End Sub

    Private Sub btnConfirmOutstanding_Click(sender As Object, e As EventArgs) Handles btnConfirmOutstanding.Click

        Me.pnlOutstandingItems.Visible = False

        'update table with who confirmed the action
        Dim service As New AppService
        service.executeSQLScheduling("update dbo.tblProductionScheduleList set OutstandingItemsConfirmID=" & Session("sessUserID").ToString & ",OutstandingItemsConfirmDateTime=getdate() where ID=" & Me.txtId.Text)
        service = Nothing

    End Sub

    Protected Sub loadJobPaperwork()







    End Sub

    Protected Sub txtPlannedShippingDate_TextChanged(sender As Object, e As EventArgs) Handles txtPlannedShippingDate.TextChanged
        If txtPlannedShippingDate.Text.Trim.Length > 0 And txtRequirementETADate.Text.Trim.Length > 0 Then
            If CDate(txtPlannedShippingDate.Text) < CDate(txtRequirementETADate.Text) Then
                txtPlannedShippingDate.ForeColor = Color.Red
            Else
                txtPlannedShippingDate.ForeColor = Color.Black
            End If
        Else
            txtPlannedShippingDate.ForeColor = Color.Black
        End If
    End Sub

    Protected Sub txtRequirementETADate_TextChanged(sender As Object, e As EventArgs) Handles txtRequirementETADate.TextChanged
        If txtPlannedShippingDate.Text.Trim.Length > 0 And txtRequirementETADate.Text.Trim.Length > 0 Then
            If CDate(txtPlannedShippingDate.Text) < CDate(txtRequirementETADate.Text) Then
                txtPlannedShippingDate.ForeColor = Color.Red
            Else
                txtPlannedShippingDate.ForeColor = Color.Black
            End If
        Else
            txtPlannedShippingDate.ForeColor = Color.Black
        End If
    End Sub
    Protected Sub btnAcceptOrder_Click(sender As Object, e As EventArgs) Handles btnAcceptOrder.Click

        Response.Redirect("AcceptOrder.aspx?ScheduleId=" & Me.txtId.Text, False)

    End Sub
    Protected Sub btnPickingList_Click(sender As Object, e As EventArgs) Handles btnPickingList.Click

        Response.Redirect("UpdateStockPicking.aspx", False)

    End Sub
    Protected Sub btnAddPowdercoat_Click(sender As Object, e As EventArgs) Handles btnAddPowdercoat.Click

        Me.ModalPopupExtender3.Show()

    End Sub

    Protected Function calculateStatusDisplayText(intScheduleID As Integer, intOrderStatusID As Integer) As String

        Dim strStatus As String = String.Empty

        Dim service As New AppService

        'get orderstatus list from backend table
        Dim dtStatus As DataTable = service.runSQLScheduling("select * from dbo.tblStatus")
        If dtStatus.Rows.Count = 0 Then
            Return String.Empty
        End If

        Dim drows() As DataRow = dtStatus.Select("StatusID=" & intOrderStatusID.ToString)
        If drows.Length > 0 Then
            strStatus = drows(0)("OrderStatusName").ToString
        Else
            Return String.Empty
        End If
        drows = Nothing

        Dim bolCheckAddReq As Boolean = False

        'check current statusid
        Select Case intOrderStatusID
            Case 2, 3, 9, 10, 11, 12
                bolCheckAddReq = True
            Case Else

        End Select

        If bolCheckAddReq Then
            'if between accepted and despatch (or invoicing if for collection) then check for additional requirements outstanding
            Dim dtAddReq As DataTable = service.runSQLScheduling("select * from dbo.tblAdditionalRequirements where ProductionScheduleID=" & intScheduleID.ToString & " and AdditionalRequirementTypeID=1 and CompleteDate is null")
            If dtAddReq.Rows.Count > 0 Then
                If IsDBNull(dtAddReq.Rows(0)("PickDate")) Then
                    strStatus = "Powdercoat - Awaiting Picking"
                End If

                If strStatus = String.Empty Then
                    If IsDBNull(dtAddReq.Rows(0)("StartDate")) Then
                        strStatus = "Powdercoat - Awaiting Despatch"
                    End If
                End If

                If strStatus = String.Empty Then
                    If IsDBNull(dtAddReq.Rows(0)("CompleteDate")) Then
                        strStatus = "Powdercoat - Awaiting Return"
                    End If
                End If
            End If
            dtAddReq.Dispose()
            dtAddReq = Nothing
        End If

        service = Nothing

        Return strStatus

    End Function

    Protected Function checkOutstandingAddtionalRequirements(intScheduleID As Integer) As Boolean
        Dim service As New AppService

        Dim bolOutstanding As Boolean = False

        'if between accepted and despatch (or invoicing if for collection) then check for additional requirements outstanding
        Dim dtAddReq As DataTable = service.runSQLScheduling("select * from dbo.tblAdditionalRequirements where ProductionScheduleID=" & intScheduleID.ToString & " and CompleteDate is null")
        If dtAddReq.Rows.Count > 0 Then
            bolOutstanding = True
        End If
        dtAddReq.Dispose()
        dtAddReq = Nothing

        service = Nothing

        Return bolOutstanding

    End Function

    Private Sub btnAddDetails_Click(sender As Object, e As EventArgs) Handles btnAddDetails.Click
        resetPopupControlsToDefault()
        ModalPopupExtender.Show()
    End Sub


    Sub txtHeight_OnTextChanged(sender As Object, e As EventArgs)

        If Me.txtHeight.Text <> String.Empty Then
            If Me.txtHeight.Text >= 1600 Then
                If Me.txtMidRailHeight.Text = String.Empty Then
                    setDefaultMidrailHeight()
                End If
            End If
        End If

    End Sub

    Protected Sub setDefaultMidrailHeight()

        Dim intHeight As Integer = 0

        If Me.txtHeight.Text <> String.Empty And Me.cboShutterType.SelectedValue > 0 Then
            intHeight = CInt(Me.txtHeight.Text)

            Dim intTempMidrailHeight As Integer = intHeight / 2

            Dim dtTransom As DataTable = calculateTransomHeightData(CInt(Me.cboShutterType.SelectedValue), intTempMidrailHeight, 1)
            If dtTransom.Rows.Count > 0 Then
                Me.txtMidRailHeight.Text = CInt(dtTransom.Rows(0)("GivenTransomHeight"))
            End If
            dtTransom.Dispose()
            dtTransom = Nothing

        End If

    End Sub

    Protected Function calculateTransomHeightData(intShutterTypeID As Integer, intMidrailHeight As Integer, intBottomRailType As Integer) As DataTable

        Dim dtReturnTransom As DataTable = New DataTable

        Dim service As New AppService
        Dim dtTransom As DataTable = service.runSQLScheduling("select * from dbo.tblLouvreTransomHeights where ShutterTypeID=" & intShutterTypeID.ToString & " and BottomRailType=" & intBottomRailType.ToString)

        If dtTransom.Rows.Count > 0 Then
            dtReturnTransom = SharedFunctions.performDatatableSelect(dtTransom, "GivenTransomHeight>=" & intMidrailHeight.ToString, "GivenTransomHeight ASC")
        End If

        dtTransom.Dispose()
        dtTransom = Nothing

        Return dtReturnTransom

    End Function

    Private Sub btnDeliveryDocket_Click(sender As Object, e As EventArgs) Handles btnDeliveryDocket.Click

        If Me.txtId.Text <> String.Empty Then
            LouvreJobDeliveryDocket.GetLouvreJobDeliveryDocket(CInt(Me.txtId.Text))
        End If

    End Sub

    Private Sub btnRunningSheet_Click(sender As Object, e As EventArgs) Handles btnRunningSheet.Click

        If Me.txtId.Text <> String.Empty Then
            LouvreJobRunningSheet.GetJobRunningSheetPDF(CInt(Me.txtId.Text))
        End If


    End Sub

    Private Sub btnTimeSheet_Click(sender As Object, e As EventArgs) Handles btnTimeSheet.Click

        If Me.txtId.Text <> String.Empty Then
            LouvreJobTimeSheet.JobTimeSheet(CInt(Me.txtId.Text))
        End If

    End Sub

    Private Sub btnCoverSheet_Click(sender As Object, e As EventArgs) Handles btnCoverSheet.Click

        If Me.txtId.Text <> String.Empty Then
            LouvreJobCoverSheet.GetProjectCoverSheetPDF(CInt(Me.txtId.Text))
        End If

    End Sub

    Private Sub cboDeliveryAddress_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cboDeliveryAddress.SelectedIndexChanged
        ' Populate the state box
        Dim service As New AppService

        If cboDeliveryAddress.SelectedValue > 0 Then
            Dim cAddress As Address = service.getAddressByID(cboDeliveryAddress.SelectedValue)

            txtState.Text = cAddress.State
        Else
            txtState.Text = String.Empty
        End If
    End Sub

End Class