Imports System.Data
Imports System.Net

Partial Class LouvreJobSearch
    Inherits System.Web.UI.Page

    Dim dtLouvreJobs As New DataTable
    Dim dtAllMonths As New DataTable
    Dim dtScheduleMonths As New DataTable
    Dim intSScheduleYear As Integer = 2015

    Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load

        'Me.ClientScript.GetPostBackEventReference(Me, String.Empty)
        If Not IsPostBack Then

            If Session("sessUserID") = String.Empty Then
                Response.Redirect("Logout.aspx", False)
                Exit Sub
            Else
                If Not IsNumeric(Session("sessUserID")) Then
                    Response.Redirect("Logout.aspx", False)
                    Exit Sub
                End If
            End If

            Dim service As New AppService
            service.addWebsitePageAccess("Ozroll Louvre Job Search", CInt(Session("sessUserID")), Session("sessUserName").ToString, System.IO.Path.GetFileName(Request.PhysicalPath), Request.QueryString.ToString(), Now)
            service = Nothing

            Me.lblStatus.Text = String.Empty
            Me.txtContractNo.Attributes.Add("autocorrect", "off")
            'Me.txtInvMonth.Attributes.Add("pattern", "[0-9]*")
            initCtrls()
            '

            'check querystring, set search parameters and run search
            If Not Request.QueryString.Count = 0 Then
                Dim bolRunSearch As Boolean = False

                If Not IsNothing(Request.Params("type")) Then
                    Me.cboType.SelectedValue = Request.Params("type").ToString
                    bolRunSearch = True
                End If
                If Not IsNothing(Request.Params("contractno")) Then
                    Me.txtContractNo.Text = Request.Params("contractno").ToString
                    bolRunSearch = True
                End If
                If Not IsNothing(Request.Params("status")) Then
                    Me.cboStatus.SelectedValue = Request.Params("status").ToString
                    bolRunSearch = True
                End If
                If Not IsNothing(Request.Params("startdate")) Then
                    Me.txtStartDate.Text = CDate(Request.Params("startdate")).ToString("d MMM yyyy")
                    bolRunSearch = True
                End If
                If Not IsNothing(Request.Params("enddate")) Then
                    Me.txtEndDate.Text = CDate(Request.Params("enddate")).ToString("d MMM yyyy")
                    bolRunSearch = True
                End If
                If Not IsNothing(Request.Params("activeonly")) Then
                    Me.chkActiveOnly.Checked = True
                    bolRunSearch = True
                End If

                If bolRunSearch Then
                    Me.btnSearch_Click(Me, Nothing)
                End If
            End If


        End If

    End Sub

    Private Sub Page_Error(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Error
        Dim objErr1 As Exception = Server.GetLastError().GetBaseException()

        Dim strErrorMessage As String = String.Empty

        strErrorMessage &= "Error In: " & Request.Url.ToString() & Environment.NewLine & Environment.NewLine

        strErrorMessage &= "Server.GetLastError().GetBaseException()" & Environment.NewLine & Environment.NewLine

        strErrorMessage &= "Error Message: " & objErr1.Message & Environment.NewLine
        strErrorMessage &= "Stack Trace:" & Environment.NewLine
        strErrorMessage &= objErr1.StackTrace & Environment.NewLine & Environment.NewLine

        Dim objErr2 As Exception = Server.GetLastError()

        strErrorMessage &= "Server.GetLastError()" & Environment.NewLine & Environment.NewLine

        strErrorMessage &= "Error Message: " & objErr2.Message & Environment.NewLine
        strErrorMessage &= "Stack Trace:" & Environment.NewLine
        strErrorMessage &= objErr2.StackTrace & Environment.NewLine

        EventLog.addEventLogEmail(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name & ": " & System.Reflection.MethodBase.GetCurrentMethod().Name & " - " & strErrorMessage)

        Server.ClearError()

        Response.Redirect("GenericErrorPage.aspx", False)
    End Sub

    Private Function getPageInfo() As String

        Dim strPageInfo As String = String.Empty
        Dim strName As String = String.Empty
        If Session.Contents.Count > 0 Then
            strPageInfo &= "Session Variables" & Environment.NewLine
            For Each strName In Session.Contents
                strPageInfo &= strName & ": " & CStr(Session.Contents(strName)) & Environment.NewLine
            Next
        Else
            strPageInfo &= "No Session Variables" & Environment.NewLine
        End If
        strPageInfo &= Environment.NewLine
        If Me.HasControls Then
            strPageInfo &= "Form Controls" & Environment.NewLine
            getPageControls(Me, strPageInfo)
        Else
            strPageInfo &= "No Form Controls" & Environment.NewLine
        End If
        Return strPageInfo

    End Function

    Private Sub getPageControls(ByVal ctrl As Control, ByRef strPageControls As String)

        If ctrl.HasControls Then
            For Each childCtrl As Control In ctrl.Controls
                getPageControls(childCtrl, strPageControls)
            Next
        Else
            Select Case ctrl.GetType.Name
                Case "TextBox"
                    Dim frmTxt As TextBox
                    frmTxt = DirectCast(ctrl, TextBox)
                    strPageControls &= frmTxt.ID & ": " & Left(frmTxt.Text, 100) & Environment.NewLine
                Case "DropDownList"
                    Dim frmCbo As DropDownList
                    frmCbo = DirectCast(ctrl, DropDownList)
                    If frmCbo.Items.Count > 0 Then
                        strPageControls &= frmCbo.ID & ": " & frmCbo.SelectedItem.Text & " (" & frmCbo.SelectedValue & ")" & Environment.NewLine
                    Else
                        strPageControls &= frmCbo.ID & ": Not Populated" & Environment.NewLine
                    End If
                Case "CheckBox"
                    Dim frmChk As CheckBox
                    frmChk = DirectCast(ctrl, CheckBox)
                    strPageControls &= frmChk.ID & ": " & frmChk.Checked & Environment.NewLine
                Case "RadioButton"
                    Dim frmRdo As RadioButton
                    frmRdo = DirectCast(ctrl, RadioButton)
                    strPageControls &= frmRdo.ID & ": " & frmRdo.Checked & Environment.NewLine
                Case "RadioButtonList"
                    Dim frmRdoLst As RadioButtonList
                    frmRdoLst = DirectCast(ctrl, RadioButtonList)
                    If frmRdoLst.SelectedIndex >= 0 Then
                        strPageControls &= frmRdoLst.ID & ": " & frmRdoLst.SelectedItem.Text & " (" & frmRdoLst.SelectedValue & ")" & Environment.NewLine
                    Else
                        strPageControls &= frmRdoLst.ID & ": Not Selected" & Environment.NewLine
                    End If
            End Select
        End If

    End Sub

    Protected Sub initCtrls()

        Dim service As New AppService
        Dim dtOStatus As DataTable = service.runSQLOSCDatabase("Select * from [Status]")
        Me.cboStatus.DataSource = dtOStatus
        Me.cboStatus.DataValueField = "StatusID"
        Me.cboStatus.DataTextField = "Status"

        Dim drow As DataRow = dtOStatus.NewRow
        drow("StatusID") = 0
        drow("Status") = ""
        dtOStatus.Rows.InsertAt(drow, 0)
        drow = Nothing
        Me.cboStatus.DataBind()
        Me.cboStatus.SelectedIndex = 0
        '
        'setup order types list
        Dim dtType As DataTable = createTypeDatatable()
        Me.cboType.DataSource = dtType
        Me.cboType.DataValueField = "TypeID"
        Me.cboType.DataTextField = "Type"
        Me.cboType.DataBind()
        Me.cboType.SelectedIndex = 0


        Dim dtDateType As DataTable = createDateTypeDatatable()
        Me.cboDateType.DataSource = dtDateType
        Me.cboDateType.DataValueField = "DateTypeID"
        Me.cboDateType.DataTextField = "DateType"
        Me.cboDateType.DataBind()
        Me.cboDateType.SelectedIndex = 0

        service = Nothing

    End Sub

    Protected Function createTypeDatatable() As DataTable

        Dim dt As DataTable = New DataTable

        Dim col As DataColumn = New DataColumn
        col.ColumnName = "TypeID"
        col.DataType = System.Type.GetType("System.Int32")
        dt.Columns.Add(col)
        col = Nothing

        col = New DataColumn
        col.ColumnName = "Type"
        col.DataType = System.Type.GetType("System.String")
        dt.Columns.Add(col)
        col = Nothing

        Dim drow As DataRow = dt.NewRow
        drow("TypeID") = 0
        drow("Type") = String.Empty
        dt.Rows.Add(drow)
        drow = Nothing

        drow = dt.NewRow
        drow("TypeID") = 1
        drow("Type") = "Dli"
        dt.Rows.Add(drow)
        drow = Nothing

        drow = dt.NewRow
        drow("TypeID") = 1
        drow("Type") = "Dl"
        dt.Rows.Add(drow)
        drow = Nothing

        drow = dt.NewRow
        drow("TypeID") = 2
        drow("Type") = "Cl"
        dt.Rows.Add(drow)
        drow = Nothing

        Return dt

    End Function

    Protected Function createDateTypeDatatable() As DataTable

        Dim dt As DataTable = New DataTable

        Dim col As DataColumn = New DataColumn
        col.ColumnName = "DateTypeID"
        col.DataType = System.Type.GetType("System.Int32")
        dt.Columns.Add(col)
        col = Nothing

        col = New DataColumn
        col.ColumnName = "DateType"
        col.DataType = System.Type.GetType("System.String")
        dt.Columns.Add(col)
        col = Nothing

        Dim drow As DataRow = dt.NewRow
        drow("DateTypeID") = 0
        drow("DateType") = String.Empty
        dt.Rows.Add(drow)
        drow = Nothing

        drow = dt.NewRow
        drow("DateTypeID") = 1
        drow("DateType") = "Date Required"
        dt.Rows.Add(drow)
        drow = Nothing

        Return dt

    End Function

    Protected Function loadLouvreJobs() As DataTable

        Dim strSQL As String = "Select * from Table1 "
        Dim strWhere As String = String.Empty

        strSQL &= "Where "

        If Me.cboStatus.SelectedIndex > 0 Then
            strSQL &= "Status=" & CInt(Me.cboStatus.SelectedValue) & " And "
        End If
        If Me.txtContractNo.Text <> String.Empty Then
            strSQL &= "ContractNo like '%" & Me.txtContractNo.Text & "%'" & " And "
        End If
        If Me.cboType.SelectedIndex > 0 Then
            strSQL &= "Type=" & CInt(Me.cboType.SelectedValue) & " And "
        End If
        'If Me.chkActiveOnly.Checked = True Then
        '    strSQL &= "(DateSold is null) And "
        'End If
        'date selection entry
        If Me.cboDateType.SelectedIndex > 0 Then
            Select Case CInt(Me.cboDateType.SelectedValue)
                Case 1
                    'Date Required
                    strSQL &= "((DateRequired >='" & Format(CDate(Me.txtStartDate.Text), "d/MMM/yyyy") & "') And (DateRequired <='" & Format(CDate(Me.txtEndDate.Text), "d/MMM/yyyy") & "')) And "
                Case Else
                    'do nothing
            End Select
        End If

        'remove any empty trailing "and" clause
        If Trim(strSQL.Substring(strSQL.Length - 4, 4)) = "And" Then
            strSQL = Trim(strSQL.Substring(0, strSQL.Length - 4))
        End If

        'remove any empty trailing "where" clause
        If Trim(strSQL.Substring(strSQL.Length - 6, 6)) = "Where" Then
            strSQL = Trim(strSQL.Substring(0, strSQL.Length - 6))
        End If

        '
        Dim service As New AppService
        Dim dt As DataTable = service.runSQLOSCDatabase(strSQL)
        Dim dtStatus As DataTable = service.runSQLOSCDatabase("select * from dbo.[Status]")
        Dim dtType As DataTable = createTypeDatatable()
        Dim dtOrderType As DataTable = createOrderTypeDatatable()
        service = Nothing


        Dim col As DataColumn = New DataColumn
        col = New DataColumn
        col.ColumnName = "StatusName"
        col.DataType = System.Type.GetType("System.String")
        dt.Columns.Add(col)
        col = Nothing
        '
        col = New DataColumn
        col.ColumnName = "TypeName"
        col.DataType = System.Type.GetType("System.String")
        dt.Columns.Add(col)
        col = Nothing

        col = New DataColumn
        col.ColumnName = "OrderType"
        col.DataType = System.Type.GetType("System.String")
        dt.Columns.Add(col)
        col = Nothing

        For i As Integer = 0 To dt.Rows.Count - 1

            If Not IsDBNull(dt.Rows(i)("Status")) Then
                Dim drows() As DataRow = dtStatus.Select("StatusID=" & dt.Rows(i)("Status").ToString)
                If drows.Length > 0 Then
                    dt.Rows(i)("StatusName") = drows(0)("Status").ToString
                End If
            End If
            If Not IsDBNull(dt.Rows(i)("Type")) Then
                Dim drows() As DataRow = dtType.Select("TypeID=" & dt.Rows(i)("Type").ToString)
                If drows.Length > 0 Then
                    dt.Rows(i)("TypeName") = drows(0)("Type").ToString
                End If
            End If
            If Not IsDBNull(dt.Rows(i)("OrderType")) Then
                Dim drows() As DataRow = dtOrderType.Select("OrderType=" & dt.Rows(i)("OrderType").ToString)
                If drows.Length > 0 Then
                    dt.Rows(i)("OrderType") = drows(0)("OrderType").ToString
                End If
            End If

        Next

        Return dt

    End Function

    Protected Sub cboStatus_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs)

        Dim gvr As GridViewRow = DirectCast(DirectCast(sender, Control).NamingContainer, GridViewRow)
        Dim ddl As DropDownList = DirectCast(sender, DropDownList)

    End Sub

    Protected Sub btnSearch_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnSearch.Click

        Me.lblStatus.Text = String.Empty
        '
        dtLouvreJobs = loadLouvreJobs()
        Me.dgvScheduleList.DataSource = dtLouvreJobs
        Me.dgvScheduleList.DataBind()
        If Me.dgvScheduleList.Rows.Count = 0 Then
            Me.pnlList.Visible = False
            Me.lblStatus.Text = "No Records Found."
        Else
            Me.pnlList.Visible = True
        End If
        ScriptManager.RegisterClientScriptBlock(Me.Page, GetType(String), "Script", "restBTNs();", True)

    End Sub

    Protected Sub btnLogout_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnLogout.Click

        Response.Redirect("Logout.aspx", False)

    End Sub

    Protected Sub dgvScheduleList_RowCommand(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.GridViewCommandEventArgs) Handles dgvScheduleList.RowCommand

        If (e.CommandName = "LouvreDetail") Then
            Dim currentRowIndex As Integer = Int32.Parse(e.CommandArgument.ToString())
            Dim intJobRegisterId As String = CInt(dgvScheduleList.DataKeys(currentRowIndex).Values("JobRegisterID"))

            Dim strSearchQueryString As String = String.Empty
            If Me.cboType.SelectedIndex > 0 Then
                strSearchQueryString &= "&type=" & Me.cboType.SelectedValue.ToString
            End If
            If Me.cboStatus.SelectedIndex > 0 Then
                strSearchQueryString &= "&status=" & Me.cboStatus.SelectedValue.ToString
            End If
            If Me.txtContractNo.Text <> String.Empty Then
                strSearchQueryString &= "&contractno=" & Me.txtContractNo.Text
            End If

            If Me.chkActiveOnly.Checked = True Then
                strSearchQueryString &= "&activeonly=1"
            End If

            If Me.cboDateType.SelectedIndex > 0 Then
                Select Case CInt(Me.cboDateType.SelectedValue)
                    Case 1
                        strSearchQueryString &= "&datetype=1"
                    Case Else
                        strSearchQueryString &= "&datetype="
                End Select
            End If
            If Me.txtStartDate.Text <> String.Empty Then
                strSearchQueryString &= "&startdate=" & Me.txtStartDate.Text
            End If
            If Me.txtEndDate.Text <> String.Empty Then
                strSearchQueryString &= "&enddate=" & Me.txtEndDate.Text
            End If

            If Constants.LIVE_SITE Then
                Response.Redirect("LouvreJobDetails.aspx?JobRegisterID=" & intJobRegisterId.ToString & "&ViewType=1" & strSearchQueryString, False)
            Else
                Response.Redirect("LouvreJobDetails.aspx?JobRegisterID=" & intJobRegisterId.ToString & "&ViewType=1" & strSearchQueryString, False)
            End If

        End If

    End Sub

    Protected Sub btnClear_Click(sender As Object, e As System.EventArgs) Handles btnClear.Click

        Me.lblStatus.Text = String.Empty
        '
        dtLouvreJobs = New DataTable
        Me.pnlList.Visible = False
        'If Me.dtLouvreJobs.Rows.Count = 0 Then
        '    Me.lblStatus.Text = "No Records Found."
        'End If
        Me.cboStatus.SelectedIndex = -1
        Me.txtContractNo.Text = String.Empty
        Me.cboType.SelectedIndex = -1

        Me.cboDateType.SelectedIndex = -1
        Me.txtStartDate.Text = String.Empty
        Me.txtEndDate.Text = String.Empty

        ScriptManager.RegisterClientScriptBlock(Me.Page, GetType(String), "Script", "restBTNs();", True)

    End Sub

    Protected Sub btnHome_Click(sender As Object, e As System.EventArgs) Handles btnHome.Click

        Response.Redirect("Home.aspx", False)

    End Sub

    Private Function createOrderTypeDatatable() As DataTable

        Dim dt As DataTable = New DataTable

        Dim col As DataColumn = New DataColumn
        col.ColumnName = "OrderTypeID"
        col.DataType = System.Type.GetType("System.Int32")
        dt.Columns.Add(col)
        col = Nothing

        col = New DataColumn
        col.ColumnName = "OrderType"
        col.DataType = System.Type.GetType("System.String")
        dt.Columns.Add(col)
        col = Nothing

        Dim drow As DataRow = dt.NewRow
        drow("OrderTypeID") = 0
        drow("OrderType") = String.Empty
        dt.Rows.Add(drow)
        drow = Nothing

        drow = dt.NewRow
        drow("OrderTypeID") = 1
        drow("OrderType") = "Order"
        dt.Rows.Add(drow)
        drow = Nothing

        drow = dt.NewRow
        drow("OrderTypeID") = 2
        drow("OrderType") = "Remake"
        dt.Rows.Add(drow)
        drow = Nothing

        drow = dt.NewRow
        drow("OrderTypeID") = 3
        drow("OrderType") = "Rectification"
        dt.Rows.Add(drow)
        drow = Nothing

        Return dt

    End Function

End Class
