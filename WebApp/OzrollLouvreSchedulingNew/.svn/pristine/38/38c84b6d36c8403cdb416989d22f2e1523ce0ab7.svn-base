'*******************************************************************************
' * You may amend and distribute as you like, but don't remove this header!
' * 
' * All rights reserved.
' * 
' * EPPlus is an Open Source project provided under the 
' * GNU General Public License (GPL) as published by the 
' * Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
' * 
' * EPPlus provides server-side generation of Excel 2007 spreadsheets.
' * See http://www.codeplex.com/EPPlus for details.
' *
' *
' * 
' * The GNU General Public License can be viewed at http://www.opensource.org/licenses/gpl-license.php
' * If you unfamiliar with this license or have questions about it, here is an http://www.gnu.org/licenses/gpl-faq.html
' * 
' * The code for this project may be used and redistributed by any means PROVIDING it is 
' * not sold for profit without the author's written consent, and providing that this notice 
' * and the author's name and all copyright notices remain intact.
' * 
' * All code and executables are provided "as is" with no warranty either express or implied. 
' * The author accepts no liability for any damage or loss of business that this product may cause.
' *
' *
' * Code change notes:
' * 
' * Author							Change						Date
' *******************************************************************************
' * Jan Källman		Added		10-SEP-2009
' *******************************************************************************/

Imports System
Imports System.Collections.Generic
Imports System.Text
Imports System.IO
Imports OfficeOpenXml
Imports System.Xml
Imports System.Drawing
Imports OfficeOpenXml.Style

Public Class ExcelReport

    Public Shared Function createReport(ByVal stroutputDir As String, ByRef objBuffer As Byte(), ByVal dtScheduleListTBL As DataTable) As String

        Dim outputDir As DirectoryInfo = New DirectoryInfo(stroutputDir)
        Dim newFile As FileInfo = New FileInfo(outputDir.FullName & "\PlantationScheduleList.xltx")
        If Not newFile.Exists Then
            Return "Template Not found."
        End If
        '
        Dim strCurr As String = Now.ToString.Replace("/", "")
        strCurr = strCurr.Replace(":", "")
        strCurr = strCurr.Replace(" ", "")
        strCurr = strCurr.Substring(0, strCurr.Length - 3)
        strCurr = String.Empty
        Dim strFileFullPath As String = stroutputDir & "\PlantationScheduleList-" & strCurr & ".xlsx"
        Dim objfileVirtualPath As FileInfo = New FileInfo(strFileFullPath)
        If objfileVirtualPath.Exists Then
            objfileVirtualPath.Delete()
        End If

        Dim intColCNT As Integer = 27
        Dim intColNum As Integer = 1
        Dim intRowNum As Integer = 1
        Dim package As ExcelPackage = New ExcelPackage(newFile)
        'Dim xlWks As ExcelWorksheet = package.Workbook.Worksheets.Add("ScheduleList")
        Dim xlWks As ExcelWorksheet = package.Workbook.Worksheets("ProductionSchedule")

        'setupTitleRow(intRowNum, intColNum, xlWks)
        intRowNum = 7

        If dtScheduleListTBL.Rows.Count > 0 Then
            populateDataROWs(intRowNum, dtScheduleListTBL, xlWks)
        End If
        '
        FinalizeDataROWs(intRowNum - 1, xlWks)

        'Dim rangeTMP = xlWks.Cells(1, 1, 1, 27)
        'rangeTMP.Style.Font.Bold = True
        'rangeTMP.Style.Fill.PatternType = ExcelFillStyle.Solid
        'rangeTMP.Style.Fill.BackgroundColor.SetColor(Color.DarkBlue)
        'rangeTMP.Style.Font.Color.SetColor(Color.White)

        package.Workbook.Properties.Title = "OzRoll Production Schedule List"
        'package.Workbook.Properties.Author = "The Modern Group"
        'package.Workbook.Properties.Comments = "This report created an Excel 2007 workbook using EPPlus"

        'package.Workbook.Properties.Company = "The Modern Group"

        'package.Workbook.Properties.SetCustomPropertyValue("Powered by", "The Modern Group")
        'package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", "EPPlus")

        'package.Workbook.Properties.SetCustomPropertyValue("Generated by", "The Modern Group")
        'package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", "EPPlus")

        objBuffer = package.GetAsByteArray()
        'rangeTMP = Nothing
        xlWks.Dispose()
        xlWks = Nothing
        package = Nothing
        Return objfileVirtualPath.Name

    End Function

    Shared Sub setupTitleRow(ByRef intRowNum As Integer, ByRef intColNum As Integer, ByRef xlWks As ExcelWorksheet)

        xlWks.Cells(intRowNum, intColNum).Value = "Entered Date"
        intColNum += 1
        xlWks.Cells(intRowNum, intColNum).Value = "Order Date"
        intColNum += 1
        xlWks.Cells(intRowNum, intColNum).Value = "Order Reference"
        intColNum += 1
        xlWks.Cells(intRowNum, intColNum).Value = "Customer"
        intColNum += 1
        xlWks.Cells(intRowNum, intColNum).Value = "State"
        intColNum += 1
        xlWks.Cells(intRowNum, intColNum).Value = "Order Status"
        intColNum += 1
        xlWks.Cells(intRowNum, intColNum).Value = "Invoice Month"
        intColNum += 1
        xlWks.Cells(intRowNum, intColNum).Value = "Invoice Week"
        intColNum += 1
        xlWks.Cells(intRowNum, intColNum).Value = "Total Sq.M."
        intColNum += 1
        xlWks.Cells(intRowNum, intColNum).Value = "Total Panels"
        intColNum += 1
        xlWks.Cells(intRowNum, intColNum).Value = "Panel < 700"
        intColNum += 1
        xlWks.Cells(intRowNum, intColNum).Value = "Panel > 700"
        intColNum += 1
        xlWks.Cells(intRowNum, intColNum).Value = "Qty. Hinges"
        intColNum += 1
        xlWks.Cells(intRowNum, intColNum).Value = "Qty. Sliding"
        intColNum += 1
        xlWks.Cells(intRowNum, intColNum).Value = "Qty. Bifold"
        intColNum += 1
        xlWks.Cells(intRowNum, intColNum).Value = "Qty. Fixed"
        intColNum += 1
        xlWks.Cells(intRowNum, intColNum).Value = "Qty. ZFrame"
        intColNum += 1
        xlWks.Cells(intRowNum, intColNum).Value = "Qty. LFrame"
        intColNum += 1
        xlWks.Cells(intRowNum, intColNum).Value = "Off White"
        intColNum += 1
        xlWks.Cells(intRowNum, intColNum).Value = "Bright White"
        intColNum += 1
        xlWks.Cells(intRowNum, intColNum).Value = "GRA Remakes"
        intColNum += 1
        xlWks.Cells(intRowNum, intColNum).Value = "Updates Text"
        intColNum += 1
        xlWks.Cells(intRowNum, intColNum).Value = "BOM Costed"
        intColNum += 1
        xlWks.Cells(intRowNum, intColNum).Value = "Shutter Pro"
        intColNum += 1
        xlWks.Cells(intRowNum, intColNum).Value = "Shipping Details"
        intColNum += 1
        xlWks.Cells(intRowNum, intColNum).Value = "Planned Shipping Date"
        intColNum += 1
        xlWks.Cells(intRowNum, intColNum).Value = "Actual Shipping Date"

    End Sub

    Shared Sub populateDataROWs(ByRef intRowNum As Integer, ByVal dtScheduleListTBL As DataTable, ByRef xlWks As ExcelWorksheet)

        Dim intDBrows As Integer = 0
        Dim dtWKMonthsTBL As DataTable = New DataTable
        If dtScheduleListTBL.Rows.Count > 0 Then
            populateDataROW(intDBrows, intRowNum, dtScheduleListTBL, dtWKMonthsTBL, xlWks)
        Else
            intRowNum += 1
            xlWks.Cells(intRowNum, 1).Value = "No Records Found."
            Dim rangeTMP As ExcelRange = xlWks.Cells(intRowNum, 1, intRowNum, 1)
            rangeTMP.Style.Font.Size = 12
            rangeTMP.Style.Font.Bold = True
            rangeTMP.Style.Font.Color.SetColor(Color.Red)
            rangeTMP = xlWks.Cells(intRowNum, 1, intRowNum, 27)
        End If
        dtWKMonthsTBL = Nothing

    End Sub

    Shared Sub populateDataROW(ByRef intDBrows As Integer, ByRef intRowNum As Integer, ByRef dtScheduleListTBL As DataTable, ByRef dtWKMonthsTBL As DataTable, ByRef xlWks As ExcelWorksheet)

        For intDBrows = 0 To dtScheduleListTBL.Rows.Count - 1


            Dim service As New AppService
            Dim clsProdSchedule As ProductionSchedule = service.ConvertRcdToProdScheduleCls(dtScheduleListTBL.Rows(intDBrows))
            service = Nothing
            Dim intColNum As Integer = 1
            Dim dwTMPs() As DataRow = Nothing
            'If clsProdSchedule.EnteredDatetime <> Constants.DEFAULT_DATE_VALUE Then
            '    xlWks.Cells(intRowNum, intColNum).Value = Format(clsProdSchedule.EnteredDatetime, "d MMM yyyy")
            'End If
            'intColNum += 1
            If clsProdSchedule.OrderDate <> Constants.DEFAULT_DATE_VALUE Then
                'xlWks.Cells(intRowNum, intColNum).Value = Format(clsProdSchedule.OrderDate, "d MMM yyyy")
                xlWks.Cells(intRowNum, intColNum).Value = clsProdSchedule.OrderDate
            End If
            intColNum += 1
            If clsProdSchedule.OrderReference <> String.Empty Then
                xlWks.Cells(intRowNum, intColNum).Value = clsProdSchedule.OrderReference
            End If
            intColNum += 1
            If clsProdSchedule.CustomerName <> String.Empty Then
                xlWks.Cells(intRowNum, intColNum).Value = clsProdSchedule.CustomerName
            End If
            intColNum += 1
            If clsProdSchedule.CustomerID <> Constants.DEFAULT_INTEGER_VALUE Then
                xlWks.Cells(intRowNum, intColNum).Value = dtScheduleListTBL.Rows(intDBrows)("Customer").ToString
            End If
            intColNum += 1
            If clsProdSchedule.OrderStatus <> Constants.DEFAULT_INTEGER_VALUE Then
                xlWks.Cells(intRowNum, intColNum).Value = dtScheduleListTBL.Rows(intDBrows)("OrderStatusName").ToString
            End If
            intColNum += 1
            If clsProdSchedule.TotalSQM <> Constants.DEFAULT_DECIMAL_VALUE Then
                xlWks.Cells(intRowNum, intColNum).Value = CDec(Format(clsProdSchedule.TotalSQM, "#,##0.0#"))
            End If
            intColNum += 1
            If clsProdSchedule.TotalPanels <> Constants.DEFAULT_INTEGER_VALUE Then
                xlWks.Cells(intRowNum, intColNum).Value = clsProdSchedule.TotalPanels
            End If
            intColNum += 1
            If clsProdSchedule.PanelsLess700 <> Constants.DEFAULT_INTEGER_VALUE Then
                xlWks.Cells(intRowNum, intColNum).Value = clsProdSchedule.PanelsLess700
            End If
            intColNum += 1
            If clsProdSchedule.PanelsMore700 <> Constants.DEFAULT_INTEGER_VALUE Then
                xlWks.Cells(intRowNum, intColNum).Value = clsProdSchedule.PanelsMore700
            End If
            intColNum += 1
            If clsProdSchedule.QtyHinges <> Constants.DEFAULT_INTEGER_VALUE Then
                xlWks.Cells(intRowNum, intColNum).Value = clsProdSchedule.QtyHinges
            End If
            intColNum += 1
            If clsProdSchedule.QtySliding <> Constants.DEFAULT_INTEGER_VALUE Then
                xlWks.Cells(intRowNum, intColNum).Value = clsProdSchedule.QtySliding
            End If
            intColNum += 1
            If clsProdSchedule.QtyBifold <> Constants.DEFAULT_INTEGER_VALUE Then
                xlWks.Cells(intRowNum, intColNum).Value = clsProdSchedule.QtyBifold
            End If
            intColNum += 1
            If clsProdSchedule.QtyFixed <> Constants.DEFAULT_INTEGER_VALUE Then
                xlWks.Cells(intRowNum, intColNum).Value = clsProdSchedule.QtyFixed
            End If
            intColNum += 1
            If clsProdSchedule.QtyZFrame <> Constants.DEFAULT_INTEGER_VALUE Then
                xlWks.Cells(intRowNum, intColNum).Value = clsProdSchedule.QtyZFrame
            End If
            intColNum += 1
            If clsProdSchedule.QtyLFrame <> Constants.DEFAULT_INTEGER_VALUE Then
                xlWks.Cells(intRowNum, intColNum).Value = clsProdSchedule.QtyLFrame
            End If
            intColNum += 1
            If clsProdSchedule.OffWhite = 1 Then
                xlWks.Cells(intRowNum, intColNum).Value = "OW"
            End If
            intColNum += 1
            If clsProdSchedule.BrightWhite = 1 Then
                xlWks.Cells(intRowNum, intColNum).Value = "BW"
            End If
            'intColNum += 1
            'If clsProdSchedule.GRARemakes <> String.Empty Then
            '    xlWks.Cells(intRowNum, intColNum).Value = clsProdSchedule.GRARemakes.ToString
            'End If
            intColNum += 1
            If clsProdSchedule.UpdatesText <> String.Empty Then
                xlWks.Cells(intRowNum, intColNum).Value = clsProdSchedule.UpdatesText.ToString
            End If
            intColNum += 1
            If clsProdSchedule.BOMCosted <> String.Empty Then
                xlWks.Cells(intRowNum, intColNum).Value = clsProdSchedule.BOMCosted.ToString
            End If
            'intColNum += 1
            'If clsProdSchedule.ShutterPro <> String.Empty Then
            '    xlWks.Cells(intRowNum, intColNum).Value = clsProdSchedule.ShutterPro.ToString
            'End If
            'intColNum += 1
            'If clsProdSchedule.ShippingDetails <> String.Empty Then
            '    xlWks.Cells(intRowNum, intColNum).Value = clsProdSchedule.ShippingDetails.ToString
            'End If
            intColNum += 1
            If clsProdSchedule.ScheduledDate <> Constants.DEFAULT_DATE_VALUE Then
                xlWks.Cells(intRowNum, intColNum).Value = clsProdSchedule.ScheduledDate
                'xlWks.Cells(intRowNum, intColNum).Value = Format(clsProdSchedule.ScheduledDate, "d MMM yyyy")
            End If
            intColNum += 1
            If clsProdSchedule.ExpectedShippingDate <> Constants.DEFAULT_DATE_VALUE Then
                xlWks.Cells(intRowNum, intColNum).Value = clsProdSchedule.ExpectedShippingDate
                'xlWks.Cells(intRowNum, intColNum).Value = Format(clsProdSchedule.ExpectedShippingDate, "d MMM yyyy")
            End If
            intColNum += 1
            If clsProdSchedule.InvoicedDate <> Constants.DEFAULT_DATE_VALUE Then
                xlWks.Cells(intRowNum, intColNum).Value = clsProdSchedule.InvoicedDate
                'xlWks.Cells(intRowNum, intColNum).Value = Format(clsProdSchedule.InvoicedDate, "d MMM yyyy")
            End If
            intColNum += 1
            If clsProdSchedule.ShutterProNumber <> String.Empty Then
                xlWks.Cells(intRowNum, intColNum).Value = clsProdSchedule.ShutterProNumber.ToString
            End If
            intColNum += 1
            If clsProdSchedule.CostPrice <> Constants.DEFAULT_DECIMAL_VALUE Then
                xlWks.Cells(intRowNum, intColNum).Value = clsProdSchedule.CostPrice
            End If
            intColNum += 1
            If clsProdSchedule.FreightAmount <> Constants.DEFAULT_DECIMAL_VALUE Then
                xlWks.Cells(intRowNum, intColNum).Value = clsProdSchedule.FreightAmount
            End If
            intColNum += 1
            xlWks.Cells(intRowNum, intColNum).Formula = "=IF(V" & intRowNum & "<>"""",V" & intRowNum & "-A" & intRowNum & ",0)"
            intColNum += 1
            xlWks.Cells(intRowNum, intColNum).Value = dtScheduleListTBL.Rows(intDBrows)("OrderType").ToString()

            intRowNum += 1
            xlWks.InsertRow(intRowNum, 1)
        Next

        'intColNum += 1
        'If clsProdSchedule.ActualShippingDate <> Constants.DEFAULT_DATE_VALUE Then
        '    xlWks.Cells(intRowNum, intColNum).Value = Format(clsProdSchedule.ActualShippingDate, "d MMM yyyy")
        'End If
        'If intDBrows + 1 <= dtScheduleListTBL.Rows.Count - 1 Then
        '    populateDataROW(intDBrows + 1, intRowNum, dtScheduleListTBL, dtWKMonthsTBL, xlWks)
        'End If

    End Sub

    Shared Sub FinalizeDataROWs(ByRef intDBrows As Integer, ByRef xlWks As ExcelWorksheet)

        Dim intTMP As Integer = 0
        Dim intFRowNum As Integer = 7
        Dim intERowNum As Integer = intDBrows
        Dim intRowNum As Integer = 1
        Dim intColNum As Integer = 10 'J
        '

        intRowNum = 3
        'rangeTMP = xlWks.SelectedRange(intRowNum, intColNum)
        For intColNum = 7 To 15                  'J toR
            xlWks.Cells(intRowNum, intColNum).Formula = strSubTotalCells(intColNum, intFRowNum, intERowNum, 2)
        Next

        intRowNum = 5
        'rangeTMP = xlWks.SelectedRange(intRowNum, intColNum)
        For intColNum = 6 To 15                  'I toR
            xlWks.Cells(intRowNum, intColNum).Formula = strSumCells(intColNum, intFRowNum, intERowNum)
        Next

        'X5
        xlWks.Cells(5, 24).Formula = "=SUBTOTAL(109,X" & intFRowNum & ":X" & intERowNum & ")"

        'Z5
        xlWks.Cells(5, 26).Formula = "=AVERAGE(Z" & intFRowNum & ":Z" & intERowNum & ")"

        '
        'intRowNum = 4
        'intColNum = 11
        'rangeTMP = xlWks.SelectedRange(intRowNum, intColNum)
        'For intColNum = 11 To 18                  'K toR
        '    xlWks.Cells(intRowNum, intColNum).Formula = strPercentCells(intColNum, 5)
        'Next
        '

    End Sub

    Shared Function strSumCells(ByVal intColNum As Integer, ByVal intFRowNum As Integer, ByVal intERowNum As Integer) As String

        Dim strTMP As String = String.Empty
        Select Case intColNum
            Case 6
                strTMP = "=SUM(F" & intFRowNum & " : F" & intERowNum & ")"
            Case 7
                strTMP = "=SUM(G" & intFRowNum & " : G" & intERowNum & ")"
            Case 8
                strTMP = "=SUM(H" & intFRowNum & " : H" & intERowNum & ")"
            Case 9
                strTMP = "=SUM(I" & intFRowNum & " : I" & intERowNum & ")"
            Case 10
                strTMP = "=SUM(J" & intFRowNum & " : J" & intERowNum & ")"
            Case 11
                strTMP = "=SUM(K" & intFRowNum & " : K" & intERowNum & ")"
            Case 12
                strTMP = "=SUM(L" & intFRowNum & " : L" & intERowNum & ")"
            Case 13
                strTMP = "=SUM(M" & intFRowNum & " : N" & intERowNum & ")"
            Case 14
                strTMP = "=SUM(N" & intFRowNum & " : N" & intERowNum & ")"
            Case 15
                strTMP = "=SUM(O" & intFRowNum & " : O" & intERowNum & ")"
        End Select
        Return strTMP

    End Function

    Shared Function strSubTotalCells(ByVal intColNum As Integer, ByVal intFRowNum As Integer, ByVal intERowNum As Integer, ByVal intFunctionType As Integer) As String
        Dim strTMP As String = String.Empty
        Select Case intColNum
            Case 7
                strTMP = "=SUBTOTAL(" & intFunctionType & ", G" & intFRowNum & " : G" & intERowNum & ")"
            Case 8
                strTMP = "=SUBTOTAL(" & intFunctionType & ", H" & intFRowNum & " : H" & intERowNum & ")"
            Case 9
                strTMP = "=SUBTOTAL(" & intFunctionType & ", I" & intFRowNum & " : I" & intERowNum & ")"
            Case 10
                strTMP = "=SUBTOTAL(" & intFunctionType & ", J" & intFRowNum & " : J" & intERowNum & ")"
            Case 11
                strTMP = "=SUBTOTAL(" & intFunctionType & ", K" & intFRowNum & " : K" & intERowNum & ")"
            Case 12
                strTMP = "=SUBTOTAL(" & intFunctionType & ", L" & intFRowNum & " : L" & intERowNum & ")"
            Case 13
                strTMP = "=SUBTOTAL(" & intFunctionType & ", M" & intFRowNum & " : M" & intERowNum & ")"
            Case 14
                strTMP = "=SUBTOTAL(" & intFunctionType & ", N" & intFRowNum & " : N" & intERowNum & ")"
            Case 15
                strTMP = "=SUBTOTAL(" & intFunctionType & ", O" & intFRowNum & " : O" & intERowNum & ")"
        End Select
        Return strTMP

    End Function

    Shared Function strPercentCells(ByVal intColNum As Integer, ByVal intRowNum As Integer) As String

        Dim strTMP As String = String.Empty
        Select Case intColNum
            Case 11
                strTMP = "=+(K" & intRowNum & "/J" & intRowNum & ")"
            Case 12
                strTMP = "=+(L" & intRowNum & "/K" & intRowNum & ")"
            Case 13
                strTMP = "=+(M" & intRowNum & "/L" & intRowNum & ")"
            Case 14
                strTMP = "=+(N" & intRowNum & "/M" & intRowNum & ")"
            Case 15
                strTMP = "=+(O" & intRowNum & "/N" & intRowNum & ")"
            Case 16
                strTMP = "=+(P" & intRowNum & "/O" & intRowNum & ")"
            Case 17
                strTMP = "=+(Q" & intRowNum & "/P" & intRowNum & ")"
            Case 18
                strTMP = "=+(R" & intRowNum & "/Q" & intRowNum & ")"
        End Select
        Return strTMP

    End Function

    Shared Function getAllweekmonth() As DataTable

        Dim strSQL As String = "Select loctblWeeks.WeekId, loctblWeeks.WeekNumber, loctblMonths.MonthID, loctblMonths.MonthName, loctblMonths.YearID " &
            "From loctblMonths Inner Join loctblWeeks On loctblMonths.MonthID=loctblWeeks.MonthID"
        Dim service As New AppService
        Dim dtAllweekmonth As DataTable = service.runSQLScheduling(strSQL)
        service = Nothing
        Return dtAllweekmonth

    End Function



End Class



